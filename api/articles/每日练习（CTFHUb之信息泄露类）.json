{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"每日练习（CTFHUb之信息泄露类）","date":"2020-03-31T03:12:22.000Z","updated":"2020-04-13T00:47:54.000Z","comments":true,"path":"api/articles/每日练习（CTFHUb之信息泄露类）.json","keywords":"A1andNS","cover":[],"content":"<p>今天在<a href=\"www.cfthub.com\">CTFHub</a>上做了一些题，把他们记录学习一下。就是之前的工具包是Windows端的，幸好一些还是跨平台的。最近要去找个Linux下的工具包了。</p>\n<p>今天主要干技能树里面信息泄露类的内容。</p>\n<h2 id=\"0x0001-目录遍历\"><a href=\"#0x0001-目录遍历\" class=\"headerlink\" title=\"0x0001 目录遍历\"></a>0x0001 目录遍历</h2><p>这个因为是技能树，主要是让人知道目录遍历的危害。很直接进去很明显的目录遍历。</p>\n<p>依次遍历所给目录就可以找到3/flag.txt</p>\n<p>ctfhub{0ed8c88cb111f71a407977026a969e78d8dc34b4}</p>\n<h2 id=\"0x0002-PHPINFO\"><a href=\"#0x0002-PHPINFO\" class=\"headerlink\" title=\"0x0002 PHPINFO\"></a>0x0002 PHPINFO</h2><p>这个更加直接，很明显他是先要告诉我们PHPINFO的重要性，phpinfo()函数会把很多重要信息泄露出来，这也就是为什么他会在信息泄露类了，要是phpinfo不当使用，让重要的系统信息、PHP版本等对外公开了，这将是十分危险的。</p>\n<p>在PHPINFO页面直接使用页面查找，就找出了flag。</p>\n<p> ctfhub{8066c78cc1c995466cb74075cc1e2b50a4efdfa4}</p>\n<h2 id=\"0x0003-网页源码\"><a href=\"#0x0003-网页源码\" class=\"headerlink\" title=\"0x0003 网页源码\"></a>0x0003 网页源码</h2><p>看题目名字直指源码泄露。</p>\n<p>题目提供了有用的提示</p>\n<h3 id=\"1、常见的网站源码备份文件后缀\"><a href=\"#1、常见的网站源码备份文件后缀\" class=\"headerlink\" title=\"1、常见的网站源码备份文件后缀\"></a>1、常见的网站源码备份文件后缀</h3><hr>\n<ul>\n<li>tar</li>\n<li>tar.gz</li>\n<li>zip</li>\n<li>rar</li>\n</ul>\n<h3 id=\"2、常见的网站源码备份文件名\"><a href=\"#2、常见的网站源码备份文件名\" class=\"headerlink\" title=\"2、常见的网站源码备份文件名\"></a>2、常见的网站源码备份文件名</h3><hr>\n<ul>\n<li>web</li>\n<li>website</li>\n<li>backup</li>\n<li>back</li>\n<li>www</li>\n<li>wwwroot</li>\n<li>temp</li>\n</ul>\n<p>那么我开工了，我第一时间想到的就是搞一个字典然后用字典去请求，找出状态码200的就OK了。于是我写了个脚本：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getHTMLText</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>        \n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        respon <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        respon<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        respon<span class=\"token punctuation\">.</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> respon<span class=\"token punctuation\">.</span>txt\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>\n\nname <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'web'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'website'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'backup'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'back'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'www'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wwwroot'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'temp'</span><span class=\"token punctuation\">]</span>\nback <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'tar'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'tar.gz'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'zip'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rar'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> name<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> back<span class=\"token punctuation\">:</span>\n        fullname <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span><span class=\"token string\">'.'</span><span class=\"token operator\">+</span> j\n        url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://challenge-9cc768c61ee393de.sandbox.ctfhub.com:10080/\"</span><span class=\"token operator\">+</span>fullname\n        s <span class=\"token operator\">=</span> getHTMLText<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_dde-desktop_20200331163429.png\" alt=\"找到了需要的结果\"></p>\n<p>访问这个url得到一个压缩包。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_dde-desktop_20200331164505.png\" alt=\"压缩包内文件\"></p>\n<p>但是事情并没有这么简单，访问了打开flag_1800031554.txt</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200331164719.png\" alt=\"flag文件\"></p>\n<p>里面并没有flag,而是问flag在哪，这里就要考虑备份文件是用来干什么的。备份文件是用来备份网站源代码的，那么在网页中也会有这个文件存在吧。所以就去使用url访问这个文件看看。</p>\n<p>果然出了flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200331165221.png\" alt=\"flag如图\"></p>\n<h2 id=\"0x0004-bak文件\"><a href=\"#0x0004-bak文件\" class=\"headerlink\" title=\"0x0004 bak文件\"></a>0x0004 bak文件</h2><p>一进去就明显提示，就是要找index.php的代码，但是php是后端在前端是看不到的。可惜备份文件不小心留在了web目录下啊！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200331174021.png\" alt=\"提示\"></p>\n<p>所以就范文<code>http://challenge-2083e39bcae17eeb.sandbox.ctfhub.com:10080/index.php.bak</code>，备份文件就被下载下来了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_dde-desktop_20200331174448.png\" alt=\"备份文件\"></p>\n<p>flag很明显，就是ctfhub{df52fef8c844654e644fc97e58abb7bb1a7744d3}</p>\n<h2 id=\"0x0005-vim缓存\"><a href=\"#0x0005-vim缓存\" class=\"headerlink\" title=\"0x0005 vim缓存\"></a>0x0005 vim缓存</h2><p>说句实话，看到vim缓存我是不知道的。所以我也不知道vim缓存是如何存在的。后来上网查询了一下，vim缓存文件的后缀是<code>.swp</code>,再次意外退出后就会产生<code>.swo</code>文件，而第三次产生的就是<code>.swn</code>。这下就知道，意外退出的vim缓存文件是什么了。这里我一开始一直尝试的是<code>index.php.swp</code>,所以一直都是not found了。这里有一点要注意，由于是vim缓存文件<code>.index.php.swp</code>文件才对。</p>\n<p>然后就能够下载到这个文件了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200331200705.png\" alt=\"vim缓存\"></p>\n<p>它既然是vim缓存自然是使用vim打开了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_20200331201626.png\" alt=\"vim\"></p>\n<p>如图得到flag</p>\n<p>ctfhub{e6517a906ac248e1e33dd8f8e66b02693ec4d836}</p>\n<h2 id=\"0x0006-DS-Store\"><a href=\"#0x0006-DS-Store\" class=\"headerlink\" title=\"0x0006 .DS_Store\"></a>0x0006 .DS_Store</h2><p><strong>tips:</strong><code>.DS_Store </code>是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过<code>.DS_Store</code>可以知道这个目录里面所有文件的清单。</p>\n<p>直接访问<code>http://challenge-78def8513b138f6c.sandbox.ctfhub.com:10080/flag.DB_Store</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200331205247.png\" alt=\"文件中包含的目录\"></p>\n<p>发现一个名字及其长的文件，到浏览器访问一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20200331162859.png\" alt=\"得到flag\"></p>\n<p>flag就出了，ctfhub{0364986c175041a47c7f4d5d7b5aba9c0f21316b}</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>1、目录遍历的出现让攻击者可以随意去范文目录，如同使用自己的电脑一样。这真是太危险了。目录遍历主要是因为web中间件配置错误和目录权限配置不当，使得在网站目录下没有索引文件时出现直接出现目录和字目录。比如修改Apach中的配置文件httpd.conf和vhosts.conf 。关键就是配置<code>+</code>号就会导致目录遍历出现，<code>-</code>号就可以避免目录遍历出现。</p>\n<p>2、PHPinfo不当使用后果严重</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE_dde-desktop_20200331115128.png\"></p>\n<p>这些信息对于攻击者而言简直是如虎添翼，在渗透工作中，这些也会极大帮助测试人员进行渗透。这就是为什么PTES中信息收集是首要工作了，所以必须小心，不要把这些重要和敏感信息公开化。</p>\n<p>3、在做这一题的时候，我没有去使用目录遍历的工具，主要是我之前没有用过，也不知道用什么工具，所以就只能手工写了一个脚本来找了。还有就是在拿到那个没有flag的flag文件时，我也是有点懵了，做的太少，好一会才反应过来。看来还是要多做题，事后我找了一个工具叫做direserch。</p>\n<p>4、备份文件真的是要小心处理，千万不能随便放在web目录下，不然后端都被人看光了。。</p>\n<p>5、vim缓存文件一般都会以<code>.</code>开头，<code>.filename.swp</code></p>\n<p>6、<code>DB—Store</code>文件是MacOS中特有的文件系统隐藏文件。</p>\n","text":"今天在CTFHub上做了一些题，把他们记录学习一下。就是之前的工具包是Windows端的，幸好一些还是跨平台的。最近要去找个Linux下的工具包了。 今天主要干技能树里面信息泄露类的内容。 0x0001 目录遍历这个因为是技能树，主要是让人知道目录遍历的危害。很直接进去很明显的目...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"信息泄露","slug":"信息泄露","count":4,"path":"api/tags/信息泄露.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0001-%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">0x0001 目录遍历</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0002-PHPINFO\"><span class=\"toc-text\">0x0002 PHPINFO</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0003-%E7%BD%91%E9%A1%B5%E6%BA%90%E7%A0%81\"><span class=\"toc-text\">0x0003 网页源码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%AB%99%E6%BA%90%E7%A0%81%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80\"><span class=\"toc-text\">1、常见的网站源码备份文件后缀</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%AB%99%E6%BA%90%E7%A0%81%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E5%90%8D\"><span class=\"toc-text\">2、常见的网站源码备份文件名</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0004-bak%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">0x0004 bak文件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0005-vim%E7%BC%93%E5%AD%98\"><span class=\"toc-text\">0x0005 vim缓存</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0006-DS-Store\"><span class=\"toc-text\">0x0006 .DS_Store</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"每日练习-git泄露","uid":"484224831f5c00a6a576cf9c15449d62","slug":"每日练习-git泄露","date":"2020-04-01T03:04:46.000Z","updated":"2020-04-13T00:47:42.000Z","comments":true,"path":"api/articles/每日练习-git泄露.json","keywords":"A1andNS","cover":[],"text":"继续昨天的信息泄露,ctfhub技能树的git泄露，go！go！go！ 0x0001 log根据提示这就是一题典型的git泄露题目。直接使用githacker工具。 不然的话，一般都是先做目录扫描，存在.git时就可以使用工具恢复了。 第一步就是使用工具恢复git，clone目标...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"信息泄露","slug":"信息泄露","count":4,"path":"api/tags/信息泄露.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Deepin下的pip安装与pip换源","uid":"ca781548f0f3d71dbc85540a0ea23e48","slug":"Deepin下的pip安装与pip换源","date":"2020-03-30T09:18:40.000Z","updated":"2020-04-13T00:47:52.000Z","comments":true,"path":"api/articles/Deepin下的pip安装与pip换源.json","keywords":"A1andNS","cover":"https://pypi.org/static/images/logo-large.72ad8bf1.svg","text":"之前写过了一篇关于Windows上pip换源的博客，现在换到Deepin上来又遇到安装pip和换源了。 PIP安装在Deepin下进行pip的安装还是比较容易的，只需要在终端使用apt-get就可以安装 #为python2安装pip $ sudo apt-get install ...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"资源教程","slug":"资源教程","count":7,"path":"api/categories/资源教程.json"}],"tags":[{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"},{"name":"Deepin","slug":"Deepin","count":2,"path":"api/tags/Deepin.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}