{"title":"常见的Web源码泄露","uid":"f1953cde70037836ff5e06b15265596d","slug":"常见的Web源码泄露","date":"2020-04-02T02:38:56.000Z","updated":"2020-10-13T01:51:54.000Z","comments":true,"path":"api/articles/常见的Web源码泄露.json","keywords":"A1andNS","cover":null,"content":"<p>本文主要是记录一下常见的源码泄漏问题，这些经常在web渗透测试以及CTF中出现。</p>\n<p>这几天都在CTFHub上接触信息泄露类的东西，所以就乘热打铁记录一下常见的源码泄漏问题，这些在web渗透测试和CTF也是中出现。学到了一个GitHacker工具，确实对于git泄露很有用。</p>\n<h2 id=\"源码泄漏分类\"><a href=\"#源码泄漏分类\" class=\"headerlink\" title=\"源码泄漏分类\"></a><strong>源码泄漏分类</strong></h2><h3 id=\"hg源码泄漏\"><a href=\"#hg源码泄漏\" class=\"headerlink\" title=\".hg源码泄漏\"></a>.hg源码泄漏</h3><p><strong>漏洞成因：</strong></p>\n<p>hg init的时候会生成.hg ，而管理员一时不小心，就会导致.hg目录公开泄露了。大多数这种类型泄露原理几乎一致。在URL中一般是如下格式：</p>\n<p><code>http://www.test.com/.hg/</code></p>\n<p><strong>漏洞利用：</strong></p>\n<p>利用.hg泄露可以用到一个工具dvcs-ripper</p>\n<p>工具：<strong>dvcs-ripper</strong></p>\n<p>下载地址：<a href=\"https://github.com/kost/dvcs-ripper\">https://github.com/kost/dvcs-ripper</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#漏洞利用的代码</span>\nperl rip-hg.pl -v -u http://www.test.com/.hg/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"git源码泄漏\"><a href=\"#git源码泄漏\" class=\"headerlink\" title=\".git源码泄漏\"></a>.git源码泄漏</h3><p><strong>漏洞成因：</strong></p>\n<p>在运行git init初始化代码库的时候，会在当前目录下面产生一个.git的隐藏文件，用来记录代码变更记录等等。在发布代码的时候，把.git这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。</p>\n<p>昨天就接触了git泄露相关内容了。例如下面路径，可以利用dirsearch工具扫描后台目录。</p>\n<p><code>http://www.test.com/.git</code></p>\n<p><strong>漏洞利用：</strong></p>\n<p>工具：<code>GitHack</code>、<code>dvcs-ripper</code></p>\n<p>但是我更喜欢用GitHack，附下载连接<a href=\"https://github.com/BugScanTeam/GitHack\">https://github.com/BugScanTeam/GitHack</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#GitHack</span>\nGitHack.py http://www.test.com/.git/\n<span class=\"token comment\">#dvcs-ripper</span>\nperl rip-git.pl -v -u http://www.test.com/.git/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"DS-Store文件泄漏\"><a href=\"#DS-Store文件泄漏\" class=\"headerlink\" title=\".DS_Store文件泄漏\"></a>.DS_Store文件泄漏</h3><p><strong>漏洞成因:</strong></p>\n<p>.DS_Store是Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。之前遇到的比较简单都是直接下载，后来去百度，发现有利用脚本。</p>\n<p><strong>漏洞利用:</strong></p>\n<p><code>http://www.test.com/.ds_store</code></p>\n<p><strong>工具：</strong><code>dsstoreexp</code></p>\n<p><strong>工具链接：</strong><a href=\"https://github.com/lijiejie/ds_store_exp\">https://github.com/lijiejie/ds_store_exp</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#dsstoreexp</span>\npython ds_store_exp.py http://www.test.com/.DS_Store\n<span class=\"token comment\">#工具使用之前要先安装依赖，到dsstoreexp目录下。</span>\npip <span class=\"token function\">install</span> -r requirements.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"网站备份压缩文件\"><a href=\"#网站备份压缩文件\" class=\"headerlink\" title=\"网站备份压缩文件\"></a>网站备份压缩文件</h3><p>在网站的使用过程中，往往需要对网站中的文件进行修改、升级。此时就需要对网站整站或者其中某一页面进行备份。当备份文件或者修改过程中的缓存文件因为各种原因而被留在网站web目录下，而该目录又没有设置访问权限时，便有可能导致备份文件或者编辑器的缓存文件被下载，导致敏感信息泄露，给服务器的安全埋下隐患。</p>\n<p><strong>漏洞成因及危害:</strong></p>\n<p>该漏洞的成因主要有以下两种：</p>\n<ul>\n<li>服务器管理员错误地将网站或者网页的备份文件放置到服务器web目录下。</li>\n<li>编辑器在使用过程中自动保存的备份文件或者临时文件因为各种原因没有被删除而保存在web目录下。</li>\n</ul>\n<p><strong>漏洞检测:</strong></p>\n<p>该漏洞往往会导致服务器整站源代码或者部分页面的源代码被下载，利用。源代码中所包含的各类敏感信息，如服务器数据库连接信息，服务器配置信息等会因此而泄露，造成巨大的损失。被泄露的源代码还可能会被用于代码审计，进一步利用而对整个系统的安全埋下隐患。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.rar\n.zip\n.7z\n.tar.gz\n.bak\n.swp\n.txt\n.html<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以利用一些后台扫描工具，可以快速扫描看看有没有泄露文件，但是这也只能针对于一些名称固定或比较参加的备份文件名，跟多时候还是要自己判断和尝试其是否有备份文件。我在Linux系统下使用dirsearch工具来进行扫描的，以前都是使用御剑来扫，其实工具只是一个，字典的丰富程度可能更加重要。</p>\n<h3 id=\"SVN导致文件泄露\"><a href=\"#SVN导致文件泄露\" class=\"headerlink\" title=\"SVN导致文件泄露\"></a>SVN导致文件泄露</h3><p>Subversion，简称SVN，是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p>\n<p>Subversion使用服务端—客户端的结构，当然服务端与客户端可以都运行在同一台服务器上。在服务端是存放着所有受控制数据的Subversion仓库，另一端是Subversion的客户端程序，管理着受控数据的一部分在本地的映射（称为“工作副本”）。在这两端之间，是通过各种仓库存取层（Repository Access，简称RA）的多条通道进行访问的。这些通道中，可以通过不同的网络协议，例如HTTP、SSH等，或本地文件的方式来对仓库进行操作。</p>\n<p>例如：<code>http://vote.lz.taobao.com/admin/scripts/fckeditor.266/editor/.svn/entries</code></p>\n<p><strong>漏洞利用:</strong></p>\n<p><strong>工具</strong>：<code>dvcs-ripper</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#dvcs-ripper，这工具挺通用的，好东西啊！！！</span>\n perl rip-svn.pl -v -u http://www.example.com/.svn/\n<span class=\"token comment\">#Seay-Svn</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<hr>\n<h3 id=\"WEB-INF-web-xml泄露\"><a href=\"#WEB-INF-web-xml泄露\" class=\"headerlink\" title=\"WEB-INF/web.xml泄露\"></a>WEB-INF/web.xml泄露</h3><p>WEB-INF是Java的WEB应用的安全目录。如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。</p>\n<p>WEB-INF主要包含以下文件或目录：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;WEB-INF&#x2F;web.xml：Web应用程序配置文件，描述了 servlet 和其他的应用组件配置及命名规则。\n&#x2F;WEB-INF&#x2F;classes&#x2F;：含了站点所有用的 class 文件，包括 servlet class 和非servlet class，他们不能包含在 .jar文件中\n&#x2F;WEB-INF&#x2F;lib&#x2F;：存放web应用需要的各种JAR文件，放置仅在这个应用中要求使用的jar文件,如数据库驱动jar文件\n&#x2F;WEB-INF&#x2F;src&#x2F;：源码目录，按照包名结构放置各个java文件。\n&#x2F;WEB-INF&#x2F;database.properties：数据库配置文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>漏洞成因：</strong></p>\n<p>通常一些web应用我们会使用多个web服务器搭配使用，解决其中的一个web服务器的性能缺陷以及做均衡负载的优点和完成一些分层结构的安全策略等。在使用这种架构的时候，由于对静态资源的目录或文件的映射配置不当，可能会引发一些的安全问题，导致web.xml等文件能够被读取。</p>\n<p><strong>漏洞检测以及利用方法：</strong></p>\n<p>通过找到web.xml文件，推断class文件的路径，最后直接class文件，在通过反编译class文件，得到网站源码。</p>\n<p>一般情况，jsp引擎默认都是禁止访问WEB-INF目录的，Nginx 配合Tomcat做均衡负载或集群等情况时，问题原因其实很简单，Nginx不会去考虑配置其他类型引擎（Nginx不是jsp引擎）导致的安全问题而引入到自身的安全规范中来（这样耦合性太高了），修改Nginx配置文件禁止访问WEB-INF目录就好了： location ~ ^/WEB-INF/* { deny all; } 或者return 404; 或者其他！</p>\n<h3 id=\"CVS泄漏\"><a href=\"#CVS泄漏\" class=\"headerlink\" title=\"CVS泄漏\"></a>CVS泄漏</h3><p><strong>漏洞利用</strong></p>\n<p>测试的目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;url&#x2F;CVS&#x2F;Root 返回根信息\nhttp:&#x2F;&#x2F;url&#x2F;CVS&#x2F;Entries 返回所有文件的结构<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#取回源码的命令\nbk clone http:&#x2F;&#x2F;url&#x2F;name dir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这个命令的意思就是把远端一个名为name的repo clone到本地名为dir的目录下。</p>\n<p>查看所有的改变的命令，转到download的目录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">bk changes\nBazaar&#x2F;bzr<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>工具：</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">dvcs-ripper\nperl rip-bzr.pl -v -u http:&#x2F;&#x2F;www.example.com&#x2F;.bzr&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"本文涉及工具及下载地址\"><a href=\"#本文涉及工具及下载地址\" class=\"headerlink\" title=\"本文涉及工具及下载地址\"></a>本文涉及工具及下载地址</h2><p>其实本文中都有了，最后再统一写一下吧！</p>\n<p><code>dvcs-ripper</code> <a href=\"https://github.com/kost/dvcs-ripper\">https://github.com/kost/dvcs-ripper</a></p>\n<p><code>GitHacker</code> <a href=\"https://github.com/BugScanTeam/GitHack\">https://github.com/BugScanTeam/GitHack</a></p>\n<p><code>destoreexp</code> <a href=\"https://github.com/lijiejie/ds_store_exp\">https://github.com/lijiejie/ds_store_exp</a></p>\n<p>备注：GitHacker版本有很多，可以自己寻找测试。dvcs-ripper工具要使用必须要安装相应的环境，例如perl、svn等。</p>\n<h2 id=\"参看资料\"><a href=\"#参看资料\" class=\"headerlink\" title=\"参看资料\"></a>参看资料</h2><p><a href=\"http://www.mottoin.com/95749.html\">http://www.mottoin.com/95749.html</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/21296806\">https://zhuanlan.zhihu.com/p/21296806</a></p>\n<p><a href=\"http://www.s2.sshz.org/post/source-code-leak/\">http://www.s2.sshz.org/post/source-code-leak/</a></p>\n","text":"本文主要是记录一下常见的源码泄漏问题，这些经常在web渗透测试以及CTF中出现。 这几天都在CTFHub上接触信息泄露类的东西，所以就乘热打铁记录一下常见的源码泄漏问题，这些在web渗透测试和CTF也是中出现。学到了一个GitHacker工具，确实对于git泄露很有用。 源码泄漏...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":35,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"信息泄露","slug":"信息泄露","count":4,"path":"api/tags/信息泄露.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">源码泄漏分类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hg%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">.hg源码泄漏</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#git%E6%BA%90%E7%A0%81%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">.git源码泄漏</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DS-Store%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">.DS_Store文件泄漏</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%91%E7%AB%99%E5%A4%87%E4%BB%BD%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">网站备份压缩文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SVN%E5%AF%BC%E8%87%B4%E6%96%87%E4%BB%B6%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">SVN导致文件泄露</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WEB-INF-web-xml%E6%B3%84%E9%9C%B2\"><span class=\"toc-text\">WEB-INF&#x2F;web.xml泄露</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CVS%E6%B3%84%E6%BC%8F\"><span class=\"toc-text\">CVS泄漏</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E6%96%87%E6%B6%89%E5%8F%8A%E5%B7%A5%E5%85%B7%E5%8F%8A%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">本文涉及工具及下载地址</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E7%9C%8B%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参看资料</span></a></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CTFHub技能树信息泄露最后两题","uid":"36a94c9540a0ae0f6cf64f5945275ac2","slug":"CTFHub技能树信息泄露最后两题","date":"2020-04-03T05:04:21.000Z","updated":"2020-04-13T00:47:34.000Z","comments":true,"path":"api/articles/CTFHub技能树信息泄露最后两题.json","keywords":"A1andNS","cover":[],"text":"今天就把技能树里面的信息泄露收尾了，干了这最后两题 0x0001 SVN泄露当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。 网页提示flag在服务端旧版本源代码中。 使用dirsearc...","link":"","photos":[],"count_time":{"symbolsCount":804,"symbolsTime":"1 mins."},"categories":[{"name":"CTF","slug":"CTF","count":43,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"信息泄露","slug":"信息泄露","count":4,"path":"api/tags/信息泄露.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"每日练习-git泄露","uid":"484224831f5c00a6a576cf9c15449d62","slug":"每日练习-git泄露","date":"2020-04-01T03:04:46.000Z","updated":"2020-04-13T00:47:42.000Z","comments":true,"path":"api/articles/每日练习-git泄露.json","keywords":"A1andNS","cover":[],"text":"继续昨天的信息泄露,ctfhub技能树的git泄露，go！go！go！ 0x0001 log根据提示这就是一题典型的git泄露题目。直接使用githacker工具。 不然的话，一般都是先做目录扫描，存在.git时就可以使用工具恢复了。 第一步就是使用工具恢复git，clone目标...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"CTF","slug":"CTF","count":43,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"信息泄露","slug":"信息泄露","count":4,"path":"api/tags/信息泄露.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}