{"title":"二分查找","uid":"d843ced03f40ac612213952de4b63ad2","slug":"二分查找","date":"2020-09-09T09:47:15.000Z","updated":"2020-09-29T10:32:22.000Z","comments":true,"path":"api/articles/二分查找.json","keywords":"A1andNS","cover":null,"content":"<p>之前学习了一下二分查找，然后根据算法的描述和效果。写了一下实现代码，一个使用C++写的，一个使用Python3写的。</p>\n<p>C++实现如下：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\nusing namespace std;\n\nvoid banary_search(int data_array[],int item, int len )\n&#123;\n    int low &#x3D; 0;\n    int high &#x3D; len;\n    while(low&lt;&#x3D;high)&#123;\n        int mid &#x3D; (low+high) &#x2F; 2;\n        int guess &#x3D; data_array[mid];\n        if (guess &#x3D;&#x3D; item)\n        &#123;\n            cout&lt;&lt;&quot;item has been found at &quot;&lt;&lt;mid&lt;&lt;&quot;th index&quot;&lt;&lt;endl;\n            return ;\n        &#125;\n        else if (guess &gt; item)\n        &#123;\n            high &#x3D; mid - 1;\n        &#125;\n        else\n        &#123;\n            low &#x3D; mid + 1;\n        &#125;\n    &#125;\n    cout&lt;&lt;&quot;item not found&quot;&lt;&lt;endl;\n    return ;\n&#125;\nk\nint main()\n&#123;\n    int data_array[] &#x3D; &#123;1,2,3,4,55,66,77,88,98,99&#125;;\n    int lenth &#x3D; sizeof(data_array) &#x2F; sizeof(int);\n    banary_search(data_array, 55, lenth);\n    banary_search(data_array, 2, lenth);\n    banary_search(data_array, 99, lenth);\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Python3实现：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>python写的时候我是去读取字典文件的数值来组成list，然后再从键盘接受一个查找值，进行查找。</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span> <span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    low <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    high <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">while</span> low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>low<span class=\"token operator\">+</span>high<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        guess <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>guess <span class=\"token operator\">==</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mid\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>guess <span class=\"token operator\">></span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            high <span class=\"token operator\">=</span> mid<span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            low <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">readInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the number you want to find: \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> num\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">readFileNum</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    txt <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span>\n    alist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> txt<span class=\"token punctuation\">:</span>\n        line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n        alist<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> alist\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">readFilePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    path <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter the path of the FILE： \"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> path\n\npath <span class=\"token operator\">=</span> readFilePath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest_list <span class=\"token operator\">=</span> readFileNum<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\nnum <span class=\"token operator\">=</span> readInput<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">'''for i in test_list:\n    print(i)\n'''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"find the index of the number is \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>binary_search<span class=\"token punctuation\">(</span>test_list<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>二分查找相比普通的遍历查找拥有优势，二分查找最多只需要log(n)次就可以了，普通遍历查找则最多需要n次</p>\n","text":"之前学习了一下二分查找，然后根据算法的描述和效果。写了一下实现代码，一个使用C++写的，一个使用Python3写的。 C++实现如下： #include &lt;iostream&gt; using namespace std; void banary_search(int da...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":30,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"},{"name":"学习笔记","slug":"学习笔记","count":3,"path":"api/tags/学习笔记.json"},{"name":"数据结构","slug":"数据结构","count":3,"path":"api/tags/数据结构.json"},{"name":"C++","slug":"C","count":2,"path":"api/tags/C.json"}],"toc":"","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Python写个2048","uid":"6a4d9e181c2406d317b06b634d8dec47","slug":"Python写个2048","date":"2020-09-09T13:48:50.000Z","updated":"2021-06-28T14:41:26.389Z","comments":true,"path":"api/articles/Python写个2048.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200323233608.png","text":"项目名称-2048小游戏用户行为所有的有效输入都可以转换为上下左右，游戏重置，退出这六种行为，有效输入键是WASDRQwasdrq，并且要把行为和输入关联起来。 actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit'...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Python","slug":"Python","count":2,"path":"api/categories/Python.json"},{"name":"学习笔记","slug":"Python/学习笔记","count":1,"path":"api/categories/Python/学习笔记.json"}],"tags":[{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"},{"name":"2048","slug":"2048","count":1,"path":"api/tags/2048.json"},{"name":"学习笔记","slug":"学习笔记","count":3,"path":"api/tags/学习笔记.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"棋牌某源码通杀注入直接反弹shell复现","uid":"7cc3e043ec5ad1c47977cc31e0f2c58a","slug":"棋牌某源码通杀注入直接反弹shell复现","date":"2020-09-08T14:46:04.000Z","updated":"2021-03-29T08:49:12.861Z","comments":true,"path":"api/articles/棋牌某源码通杀注入直接反弹shell复现.json","keywords":"A1andNS","cover":null,"text":" 627feb16c11f197ed5323e23f4e5670494772517b10752ca45bbd7bf37978b30b3f574dc6f4789eed295d97c0c0cecfdbaf02ac96517317ddb12218d76e13aa6029cd33fa5e...","link":"","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"漏洞复现","slug":"漏洞复现","count":3,"path":"api/categories/漏洞复现.json"}],"tags":[{"name":"SQL","slug":"SQL","count":2,"path":"api/tags/SQL.json"},{"name":"RCE","slug":"RCE","count":3,"path":"api/tags/RCE.json"},{"name":"加密文章","slug":"加密文章","count":2,"path":"api/tags/加密文章.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}