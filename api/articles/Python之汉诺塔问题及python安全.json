{"title":"Python之汉诺塔问题及python安全","uid":"627388fd642a6b198cb0eb0502f3acb1","slug":"Python之汉诺塔问题及python安全","date":"2020-03-09T07:40:14.000Z","updated":"2021-04-21T15:59:49.296Z","comments":true,"path":"api/articles/Python之汉诺塔问题及python安全.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200323233608.png","content":"<p>今天学习了一下汉诺塔问题，像了许久啊！！脑袋不太OK！记得上次看到汉诺塔是我在看电影的时候，电影场景里给大猩猩测试智商的。。。。</p>\n<p>这里使用的是Python3编写的代码，毕竟大家都知道2020年的1月1日Python2已经正式退休了。下面是Python3的时代了。</p>\n<p>发现规律后就会意识到这个就是一个递归函数，挺明显的。</p>\n<h2 id=\"代码如下：\"><a href=\"#代码如下：\" class=\"headerlink\" title=\"代码如下：\"></a>代码如下：</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\n下面是汉诺塔问题不同的圆盘个数实现任务的次数规律：\nn=1    a=1   f(x) = 1\nn=2    a=3   f(2) = 2*f(1)+1\nn=3    a=7   f(3) = 2*f(2)+1\nn=4    a=15  f(4) = 2*f(3)+1\n...    ...   f(n) = 2*f(n-1)+1\n'''</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Move</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token string\">'--->'</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>    <span class=\"token comment\">#如果只有一个圆盘就直接把它从A拿到C，并且结束程序。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\">#不是一个圆盘那么就要对n-1个圆盘从A移到B</span>\n        Move<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token string\">'--->'</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">#把最底下的那个从A移动到C</span>\n        Move<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>       <span class=\"token comment\">#最后把在B的n-1个圆盘移动到C</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入圆盘的个数（整数数字）：'</span><span class=\"token punctuation\">)</span>\nMove<span class=\"token punctuation\">(</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"运行效果如下：\"><a href=\"#运行效果如下：\" class=\"headerlink\" title=\"运行效果如下：\"></a>运行效果如下：<img src=\"https://img-blog.csdnimg.cn/20200106231054919.png\" alt=\"2\"></h2><h2 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h2><p>说起Python，这也是一门解释型语言所以它肯定会存在一些注入漏洞，之前在看SQL注入的时候就一直在想Python注入会是什么样的。今天就试一试，因为刚好我在编写代码的时候使用到了<code>eval()</code>函数，这个函数可以把字符串转换为Python可以理解的语句，这样就产生了了一个命令执行漏洞。就不具体讲了，所以我发现它是可以被利用于注入的。<br>所以我就设置了一个flag进行简单是实验：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\n下面是汉诺塔问题不同的圆盘个数实现任务的次数规律：\nn=1    a=1   f(x) = 1\nn=2    a=3   f(2) = 2*f(1)+1\nn=3    a=7   f(3) = 2*f(2)+1\nn=4    a=15  f(4) = 2*f(3)+1\n...    ...   f(n) = 2*f(n-1)+1\n'''</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">'A1andNS&#123;sfji_341bghsdf_6ygsfuh&#125;'</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Move</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token string\">'--->'</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>    <span class=\"token comment\">#如果只有一个圆盘就直接把它从A拿到C，并且结束程序。</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>           <span class=\"token comment\">#不是一个圆盘那么就要对n-1个圆盘从A移到B</span>\n        Move<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token string\">'--->'</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>   <span class=\"token comment\">#把最底下的那个从A移动到C</span>\n        Move<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>       <span class=\"token comment\">#最后把在B的n-1个圆盘移动到C</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入圆盘的个数（整数数字）：'</span><span class=\"token punctuation\">)</span>\nMove<span class=\"token punctuation\">(</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码如上，然后运行一下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200106234657265.png\" alt=\"3\"></p>\n<p>照常请求输入数字，但是我会输入<code>print(flag)</code>语句：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200106234713294.png\" alt=\"4\"></p>\n<p>运行一下结果如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200106234730155.png\" alt=\"5\"></p>\n<p>我要的Flag被直接显示出来了，当然由于eval(‘print flag’)被执行，所以python报错了，Move()函数就传参异常了。</p>\n<h2 id=\"防范\"><a href=\"#防范\" class=\"headerlink\" title=\"防范\"></a>防范</h2><p>那么要怎么样来防止被恶意执行命令呢？</p>\n<p>可以从eval()函数自身开始看，利用eval()的两个设置 限制条件的位来设置白名单，从而避免被执行。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">'''\nn=1    a=1   f(x) = 1\nn=2    a=3   f(2) = 2*f(1)+1\nn=3    a=7   f(3) = 2*f(2)+1\nn=4    a=15  f(4) = 2*f(3)+1\n...    ...   f(n) = 2*f(n-1)+1\n'''</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">'A1andNS&#123;sfji_341bghsdf_6ygsfuh&#125;'</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">Move</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token string\">'--->'</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        Move<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token string\">'--->'</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>\n        Move<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span>\nnumber <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入圆盘的个数（整数数字）：'</span><span class=\"token punctuation\">)</span>\nMove<span class=\"token punctuation\">(</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>比如我把eval函数加了限制后再去执行print(flag)，就不起作用了。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200106234807355.png\" alt=\"6\"></p>\n<p>当然这只是一个简单的实验，证实了eval函数在带来便利的同时也会带来一些风险，这些风险需要被重视，并且安全的使用eval函数。否则就会造成一些不必要的损失。</p>\n","text":"今天学习了一下汉诺塔问题，像了许久啊！！脑袋不太OK！记得上次看到汉诺塔是我在看电影的时候，电影场景里给大猩猩测试智商的。。。。 这里使用的是Python3编写的代码，毕竟大家都知道2020年的1月1日Python2已经正式退休了。下面是Python3的时代了。 发现规律后就会意...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"Python学习","slug":"Python学习","count":19,"path":"api/categories/Python学习.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">代码如下：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%95%88%E6%9E%9C%E5%A6%82%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">运行效果如下：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%9D%E8%80%83\"><span class=\"toc-text\">思考</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%98%B2%E8%8C%83\"><span class=\"toc-text\">防范</span></a></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"核心防御机制之处理用户访问、处理用户输入","uid":"b9ca1258184e8ee98832b57de6133069","slug":"核心防御机制之处理用户访问、处理用户输入","date":"2020-03-09T07:41:41.000Z","updated":"2020-04-13T00:47:30.000Z","comments":true,"path":"api/articles/核心防御机制之处理用户访问、处理用户输入.json","keywords":"A1andNS","cover":[],"text":"web应用的基本安全问题就是所有用户输入都不可信，这一点要有清晰的认识，必须假设用户所有输入都不可信，并且进行相应的过滤，才能较大可能排除哪些不坏好意的输入。Web应用采用的防御机制基本是由一下几个核心因素构成的： 1、处理用户访问应用程序的数据与功能，防止用户获得未授权的访问。...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":34,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Python之pip使用","uid":"54c75574745375be4c44850b85f0e669","slug":"Python之pip使用","date":"2020-03-09T07:38:05.000Z","updated":"2020-04-13T00:46:56.000Z","comments":true,"path":"api/articles/Python之pip使用.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200323233608.png","text":"pip安装Python拥有很多的第三方库，这也是Python优秀的计算生态的组成部分，也是Python的一大特点。这些第三方库可以说解决了不少开发者的问题，也极大的方便了开发者和初学者。 说到安装第三方库，就必须用一些办法来安装这些库，其中官方给的就是pip方法，首先要想安装pi...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"资源教程","slug":"资源教程","count":7,"path":"api/categories/资源教程.json"}],"tags":[{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}