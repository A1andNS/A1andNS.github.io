{"title":"Operating System Homework(1)","uid":"53e6dede4a08a86369937a2c59d15b83","slug":"Operating-System-Homework-1","date":"2020-09-19T06:35:04.000Z","updated":"2020-09-19T08:31:12.000Z","comments":true,"path":"api/articles/Operating-System-Homework-1.json","keywords":"A1andNS","cover":null,"content":"<p>This is a homework about cpu-intro, you can get the source from <a href=\"https://github.com/remzi-arpacidusseau/ostep-homework/blob/master/cpu-intro/\">https://github.com/remzi-arpacidusseau/ostep-homework/blob/master/cpu-intro/</a></p>\n<p>The homework is from the book named “Operating System” and the book is written by Remzi H.Arpaci-Dusseau and Andrea C.Arpaci-Dusseau.</p>\n<p>now let’s download the source from the github repositories.</p>\n<h2 id=\"Help-is-here\"><a href=\"#Help-is-here\" class=\"headerlink\" title=\"Help is here\"></a>Help is here</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -h\nUsage: process-run.py <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span>\n\nOptions:\n  -h, --help            show this <span class=\"token builtin class-name\">help</span> message and <span class=\"token builtin class-name\">exit</span>\n  -s SEED, --seed<span class=\"token operator\">=</span>SEED  the random seed\n  -P PROGRAM, --program<span class=\"token operator\">=</span>PROGRAM\n                        <span class=\"token function\">more</span> specific controls over programs\n  -l PROCESS_LIST, --processlist<span class=\"token operator\">=</span>PROCESS_LIST\n                        a comma-separated list of processes to run, <span class=\"token keyword\">in</span> the\n                        form X1:Y1,X2:Y2,<span class=\"token punctuation\">..</span>. where X is the number of\n                        instructions that process should run, and Y the\n                        chances <span class=\"token punctuation\">(</span>from <span class=\"token number\">0</span> to <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> that an instruction will use\n                        the CPU or issue an IO\n  -L IO_LENGTH, --iolength<span class=\"token operator\">=</span>IO_LENGTH\n                        how long an IO takes\n  -S PROCESS_SWITCH_BEHAVIOR, --switch<span class=\"token operator\">=</span>PROCESS_SWITCH_BEHAVIOR\n                        when to switch between processes: SWITCH_ON_IO,\n                        SWITCH_ON_END\n  -I IO_DONE_BEHAVIOR, --iodone<span class=\"token operator\">=</span>IO_DONE_BEHAVIOR\n                        <span class=\"token builtin class-name\">type</span> of behavior when IO ends: IO_RUN_LATER,\n                        IO_RUN_IMMEDIATE\n  -c                    compute answers <span class=\"token keyword\">for</span> me\n  -p, --printstats      print statistics at end<span class=\"token punctuation\">;</span> only useful with -c flag\n                        <span class=\"token punctuation\">(</span>otherwise stats are not printed<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Homework-begin\"><a href=\"#Homework-begin\" class=\"headerlink\" title=\"Homework begin\"></a>Homework begin</h2><h3 id=\"1-Use-this-statement-to-run-the-program：-process-run-py-l-5-100-5-100\"><a href=\"#1-Use-this-statement-to-run-the-program：-process-run-py-l-5-100-5-100\" class=\"headerlink\" title=\"(1) Use this statement to run the program：./process-run.py -l 5:100,5:100\"></a>(1) Use this statement to run the program：./process-run.py -l 5:100,5:100</h3><p>Here, the process we specified is “5:100” which means it should consist of 5 instructions, and the chances that each instruction is a CPU instruction are 100%. And “X:Y,X:Y” where X is the number of instructions and Y is the percent change that an instruction is CPU not IO.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -l <span class=\"token number\">5</span>:100,5:100\nProduce a trace of what would happen when you run these processes:\nProcess <span class=\"token number\">0</span>\n  cpu\n  cpu\n  cpu\n  cpu\n  cpu\n\nProcess <span class=\"token number\">1</span>\n  cpu\n  cpu\n  cpu\n  cpu\n  cpu\n\nImportant behaviors:\n  System will switch whenthe current process is FINISHED or ISSUES AN IO\n  After IOs, the process issuing the IO willrun LATER <span class=\"token punctuation\">(</span>when it is its turn<span class=\"token punctuation\">)</span>\n  \na1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -c -l <span class=\"token number\">5</span>:100,5:100\nTime    PID: <span class=\"token number\">0</span>    PID: <span class=\"token number\">1</span>       CPU       IOs\n  <span class=\"token number\">1</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">2</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">3</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">4</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">5</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">6</span>       DONE   RUN:cpu         <span class=\"token number\">1</span>          \n  <span class=\"token number\">7</span>       DONE   RUN:cpu         <span class=\"token number\">1</span>          \n  <span class=\"token number\">8</span>       DONE   RUN:cpu         <span class=\"token number\">1</span>          \n  <span class=\"token number\">9</span>       DONE   RUN:cpu         <span class=\"token number\">1</span>          \n <span class=\"token number\">10</span>       DONE   RUN:cpu         <span class=\"token number\">1</span>          <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>Process 1 is in READY state when the process 0 is running, and the process 0 run 5 instructions. When process 0 is finished,  the CPU run the process 1 to perform the same operation. The total time is 10 units of time.</p>\n<h3 id=\"2-Use-this-statement-to-run-the-program-process-run-py-l-4-100-1-0\"><a href=\"#2-Use-this-statement-to-run-the-program-process-run-py-l-4-100-1-0\" class=\"headerlink\" title=\"(2)Use this statement to run the program: ./process-run.py -l 4:100,1:0\"></a>(2)Use this statement to run the program: ./process-run.py -l 4:100,1:0</h3><p>this means CPU should run 4 instructions in process 0, then process 1 issues an I/O request, the CPU blocks the process, I/O executes for 4 units of time, the CPU releases the blocked state of process 1, and process 1 completes the operation, which takes 10 units of time.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -l <span class=\"token number\">4</span>:100,1:0\nProduce a trace of what would happen when you run these processes:\nProcess <span class=\"token number\">0</span>\n  cpu\n  cpu\n  cpu\n  cpu\n\nProcess <span class=\"token number\">1</span>\n  io\n\na1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -c -l <span class=\"token number\">4</span>:100,1:0\nTime    PID: <span class=\"token number\">0</span>    PID: <span class=\"token number\">1</span>       CPU       IOs\n  <span class=\"token number\">1</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">2</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">3</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">4</span>    RUN:cpu     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">5</span>       DONE    RUN:io         <span class=\"token number\">1</span>          \n  <span class=\"token number\">6</span>       DONE   WAITING                   <span class=\"token number\">1</span>\n  <span class=\"token number\">7</span>       DONE   WAITING                   <span class=\"token number\">1</span>\n  <span class=\"token number\">8</span>       DONE   WAITING                   <span class=\"token number\">1</span>\n  <span class=\"token number\">9</span>       DONE   WAITING                   <span class=\"token number\">1</span>\n <span class=\"token number\">10</span>*      DONE      DONE         <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100\"><a href=\"#3-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100\" class=\"headerlink\" title=\"(3)Use this statement to run the program: ./process-run.py -l 1:0,4:100\"></a>(3)Use this statement to run the program: ./process-run.py -l 1:0,4:100</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -c -l <span class=\"token number\">1</span>:0,4:100\nTime    PID: <span class=\"token number\">0</span>    PID: <span class=\"token number\">1</span>       CPU       IOs\n  <span class=\"token number\">1</span>     RUN:io     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">2</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">3</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">4</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">5</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">6</span>*      DONE      DONE         <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>CPU run process 0 to issues an I/O request, the CPU blocks the process, then CPU run process 1 .process 1 run 4 instructions and the CPU occupancy rate of each instruction is 100%, 4 units of time later, the I/O operation and process 1 is done. Great! the process 0 and process 1 are both finished. So the total time is 6 units of time. It’s save 4 units of time than Previous way.</p>\n<h3 id=\"4-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100-c-S-SWITCH-ON-END\"><a href=\"#4-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100-c-S-SWITCH-ON-END\" class=\"headerlink\" title=\"(4)Use this statement to run the program: ./process-run.py -l  1:0,4:100 -c -S SWITCH_ON_END\"></a>(4)Use this statement to run the program: ./process-run.py -l  1:0,4:100 -c -S SWITCH_ON_END</h3><p>-S is a flag which decide the system’s response when current process issues an I/O. We can set this flag to SWITCH_ON_END, it means system can’t switch to another process when the I/O Operation is running.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -l <span class=\"token number\">1</span>:0,4:100 -c -S SWITCH_ON_END\nTime    PID: <span class=\"token number\">0</span>    PID: <span class=\"token number\">1</span>       CPU       IOs\n  <span class=\"token number\">1</span>     RUN:io     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">2</span>    WAITING     READY                   <span class=\"token number\">1</span>\n  <span class=\"token number\">3</span>    WAITING     READY                   <span class=\"token number\">1</span>\n  <span class=\"token number\">4</span>    WAITING     READY                   <span class=\"token number\">1</span>\n  <span class=\"token number\">5</span>    WAITING     READY                   <span class=\"token number\">1</span>\n  <span class=\"token number\">6</span>*      DONE   RUN:cpu         <span class=\"token number\">1</span>          \n  <span class=\"token number\">7</span>       DONE   RUN:cpu         <span class=\"token number\">1</span>          \n  <span class=\"token number\">8</span>       DONE   RUN:cpu         <span class=\"token number\">1</span>          \n  <span class=\"token number\">9</span>       DONE   RUN:cpu         <span class=\"token number\">1</span>          <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>So we can see the CPU run the process 0 , the CPU blocks the process 0 .The process 0 run for 4 units of time until it’s finished. Next, the process 1 is running for 4 units of time. The  total time is 9 units of time.</p>\n<h3 id=\"5-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100-c-S-SWITCH-ON-IO\"><a href=\"#5-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100-c-S-SWITCH-ON-IO\" class=\"headerlink\" title=\"(5)Use this statement to run the program: ./process-run.py -l 1:0,4:100 -c -S SWITCH_ON_IO\"></a>(5)Use this statement to run the program: ./process-run.py -l 1:0,4:100 -c -S SWITCH_ON_IO</h3><p>SWITCH_ON_IO means system will switch to another process when waiting I/O.</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -l <span class=\"token number\">1</span>:0,4:100 -c -S SWITCH_ON_IO\nTime    PID: <span class=\"token number\">0</span>    PID: <span class=\"token number\">1</span>       CPU       IOs\n  <span class=\"token number\">1</span>     RUN:io     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">2</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">3</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">4</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">5</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">6</span>*      DONE      DONE         <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>We can see the result. Firstly, CPU run the process 0 (IO), then CPU blocks the process 0. Because the IO Operation is in waiting state, the system decide to  switch to another process(process 1). And we can see the process 2 is run by CPU, it’s same as third question. Total time is 6 units of time.</p>\n<h3 id=\"6-Use-this-statement-to-run-the-program-process-run-py-l-2-0-5-100-S-SWITCH-ON-IO-I-IO-RUN-LATER-c-p\"><a href=\"#6-Use-this-statement-to-run-the-program-process-run-py-l-2-0-5-100-S-SWITCH-ON-IO-I-IO-RUN-LATER-c-p\" class=\"headerlink\" title=\"(6)Use this statement to run the program: ./process-run.py -l 2:0,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER  -c -p\"></a>(6)Use this statement to run the program: ./process-run.py -l 2:0,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER  -c -p</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -l <span class=\"token number\">2</span>:0,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER  -c -p\nTime    PID: <span class=\"token number\">0</span>    PID: <span class=\"token number\">1</span>       CPU       IOs\n  <span class=\"token number\">1</span>     RUN:io     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">2</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">3</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">4</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">5</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">6</span>*     READY   RUN:cpu         <span class=\"token number\">1</span>          \n  <span class=\"token number\">7</span>     RUN:io      DONE         <span class=\"token number\">1</span>          \n  <span class=\"token number\">8</span>    WAITING      DONE                   <span class=\"token number\">1</span>\n  <span class=\"token number\">9</span>    WAITING      DONE                   <span class=\"token number\">1</span>\n <span class=\"token number\">10</span>    WAITING      DONE                   <span class=\"token number\">1</span>\n <span class=\"token number\">11</span>    WAITING      DONE                   <span class=\"token number\">1</span>\n <span class=\"token number\">12</span>*      DONE      DONE         <span class=\"token number\">1</span>\n\nStats: Total Time <span class=\"token number\">12</span>\nStats: CPU Busy <span class=\"token number\">8</span> <span class=\"token punctuation\">(</span><span class=\"token number\">66.67</span>%<span class=\"token punctuation\">)</span>\nStats: IO Busy  <span class=\"token number\">8</span> <span class=\"token punctuation\">(</span><span class=\"token number\">66.67</span>%<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This is the same as the previous process, I don’t want to say it again. Look at the result , you will know it .</p>\n<h3 id=\"7-Use-this-statement-to-run-the-program-process-run-py-l-2-0-5-100-S-SWITCH-ON-IO-I-IO-RUN-IMMEDIATE-c-p\"><a href=\"#7-Use-this-statement-to-run-the-program-process-run-py-l-2-0-5-100-S-SWITCH-ON-IO-I-IO-RUN-IMMEDIATE-c-p\" class=\"headerlink\" title=\"(7)Use this statement to run the program: ./process-run.py -l 2:0,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE -c -p\"></a>(7)Use this statement to run the program: ./process-run.py -l 2:0,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE -c -p</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Documents/Course Doc/Python/Operating System$ python3 process-run.py -l <span class=\"token number\">2</span>:0,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE -c -p\nTime    PID: <span class=\"token number\">0</span>    PID: <span class=\"token number\">1</span>       CPU       IOs\n  <span class=\"token number\">1</span>     RUN:io     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">2</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">3</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">4</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">5</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">6</span>*    RUN:io     READY         <span class=\"token number\">1</span>          \n  <span class=\"token number\">7</span>    WAITING   RUN:cpu         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">8</span>    WAITING      DONE         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n  <span class=\"token number\">9</span>    WAITING      DONE         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n <span class=\"token number\">10</span>    WAITING      DONE         <span class=\"token number\">1</span>         <span class=\"token number\">1</span>\n <span class=\"token number\">11</span>*      DONE      DONE         <span class=\"token number\">1</span>\n\nStats: Total Time <span class=\"token number\">11</span>\nStats: CPU Busy <span class=\"token number\">11</span> <span class=\"token punctuation\">(</span><span class=\"token number\">100.00</span>%<span class=\"token punctuation\">)</span>\nStats: IO Busy  <span class=\"token number\">8</span> <span class=\"token punctuation\">(</span><span class=\"token number\">72.73</span>%<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>This is different from the previous situation, previous situation is when I/O operation is finished,CPU will keep running instructions in process 1 until it’s finished . And this one is CPU will run next I/O operation when last I/O operation is finished. So this situation just needs 11 units of time and previous situation needs 12 units of time.</p>\n<p>The CPU blocks the I/O process and system decide to switch to another process . That’s a good idea! It can save more time, make the system more efficient.</p>\n","text":"This is a homework about cpu-intro, you can get the source from https://github.com/remzi-arpacidusseau/ostep-homework/blob/master/cpu-intro/...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Help-is-here\"><span class=\"toc-text\">Help is here</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Homework-begin\"><span class=\"toc-text\">Homework begin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-Use-this-statement-to-run-the-program%EF%BC%9A-process-run-py-l-5-100-5-100\"><span class=\"toc-text\">(1) Use this statement to run the program：.&#x2F;process-run.py -l 5:100,5:100</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Use-this-statement-to-run-the-program-process-run-py-l-4-100-1-0\"><span class=\"toc-text\">(2)Use this statement to run the program: .&#x2F;process-run.py -l 4:100,1:0</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100\"><span class=\"toc-text\">(3)Use this statement to run the program: .&#x2F;process-run.py -l 1:0,4:100</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100-c-S-SWITCH-ON-END\"><span class=\"toc-text\">(4)Use this statement to run the program: .&#x2F;process-run.py -l  1:0,4:100 -c -S SWITCH_ON_END</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Use-this-statement-to-run-the-program-process-run-py-l-1-0-4-100-c-S-SWITCH-ON-IO\"><span class=\"toc-text\">(5)Use this statement to run the program: .&#x2F;process-run.py -l 1:0,4:100 -c -S SWITCH_ON_IO</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-Use-this-statement-to-run-the-program-process-run-py-l-2-0-5-100-S-SWITCH-ON-IO-I-IO-RUN-LATER-c-p\"><span class=\"toc-text\">(6)Use this statement to run the program: .&#x2F;process-run.py -l 2:0,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER  -c -p</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-Use-this-statement-to-run-the-program-process-run-py-l-2-0-5-100-S-SWITCH-ON-IO-I-IO-RUN-IMMEDIATE-c-p\"><span class=\"toc-text\">(7)Use this statement to run the program: .&#x2F;process-run.py -l 2:0,5:100 -S SWITCH_ON_IO -I IO_RUN_IMMEDIATE -c -p</span></a></li></ol></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"操作系统之进程API","date":"2020-09-20T13:44:15.000Z","updated":"2020-09-30T12:04:44.000Z","comments":true,"path":"api/articles/操作系统之进程API.json","keywords":"A1andNS","cover":null,"text":"系统调用函数来控制进程，UNIX系统采用了一对系统调用来创建新进程：fork()、exec()，并且还可以通过另一个系统调用wait()来等待其创建的子进程完成执行。 fork()系统调用system uses fork() system call to creat a new ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"},{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Desktop File Learning","uid":"df149b563856104ed5f5e4f987c98ca6","slug":"Desktop File Learning","date":"2020-09-18T14:04:39.000Z","updated":"2020-09-19T01:53:16.000Z","comments":true,"path":"api/articles/Desktop File Learning.json","keywords":"A1andNS","cover":[],"text":"How to add a shortcuts on Linux? We often download the software from the software’s official website . But sometimes the software is a zip w...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"资源教程","slug":"资源教程","count":7,"path":"api/categories/资源教程.json"}],"tags":[{"name":"Linux","slug":"Linux","count":11,"path":"api/tags/Linux.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}