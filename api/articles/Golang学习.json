{"title":"Golang学习","uid":"56e382eff1ea84909fbad402b7d27cb5","slug":"Golang学习","date":"2022-02-15T14:50:07.000Z","updated":"2022-02-22T11:31:31.185Z","comments":true,"path":"api/articles/Golang学习.json","keywords":"A1andNS","cover":[],"content":"<h1 id=\"Golang是什么\"><a href=\"#Golang是什么\" class=\"headerlink\" title=\"Golang是什么\"></a>Golang是什么</h1><p>Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。</p>\n<p>Go是从2007年末由Robert Griesemer, Rob Pike, Ken Thompson主持开发，后来还加入了Ian Lance Taylor, Russ Cox等人，并最终于2009年11月开源，在2012年早些时候发布了Go 1稳定版本。现在Go的开发已经是完全开放的，并且拥有一个活跃的社区。</p>\n<p>下载地址： <a href=\"https://golang.org/dl/%E3%80%82\">https://golang.org/dl/。</a></p>\n<p>支持Windows、Linux、Mac等全平台。</p>\n<img src=\"https://www.runoob.com/wp-content/uploads/2015/06/go128.png\" title=\"\" alt=\"\" data-align=\"center\">\n\n<h2 id=\"GO语言的主要用途\"><a href=\"#GO语言的主要用途\" class=\"headerlink\" title=\"GO语言的主要用途\"></a>GO语言的主要用途</h2><p>以前就经常听说go适合网络编程，因为其具有优秀的并发能力。事实上Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。</p>\n<p>对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。</p>\n<h2 id=\"Go-语言特色\"><a href=\"#Go-语言特色\" class=\"headerlink\" title=\"Go 语言特色\"></a>Go 语言特色</h2><ul>\n<li>简洁、快速、安全</li>\n<li>并行、有趣、开源</li>\n<li>内存管理、数组安全、编译迅速</li>\n</ul>\n<h2 id=\"GO程序运行和编译\"><a href=\"#GO程序运行和编译\" class=\"headerlink\" title=\"GO程序运行和编译\"></a>GO程序运行和编译</h2><p>运行方式：<code>go run test.go</code></p>\n<p>编译方式: <code>go build test.go</code>，这样会生成一个exe可执行文件。</p>\n<h1 id=\"Go语言结构\"><a href=\"#Go语言结构\" class=\"headerlink\" title=\"Go语言结构\"></a>Go语言结构</h1><p>Go 语言的基础组成有以下几个部分：</p>\n<ul>\n<li><p>包声明</p>\n<p>第一行代码定义包名，每个Go应用程序都包含一个名为main的包。<strong>同一个文件夹下的文件只能有一个包名,否则编译报错，文件夹名称与包名称没有直接关系，不一定要一致。文件名和包名没有直接关系。</strong></p>\n</li>\n<li><p>引入包</p>\n<p><code>*import &quot;fmt&quot;*</code> 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。</p>\n</li>\n<li><p>函数</p>\n<p><code>func main()</code> 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行init()函数）。</p>\n</li>\n<li><p>变量</p>\n<p>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</p>\n</li>\n<li><p>语句 &amp; 表达式</p>\n<p><code>&#123;</code>不允许单独一行，不然语法会报错。</p>\n</li>\n<li><p>注释</p>\n<p><code>//</code>单行</p>\n<p><code>/**/</code>多行，多行注释一般用于包的文档描述或注释成块的代码片段。</p>\n</li>\n</ul>\n<h1 id=\"GO语言基础语法\"><a href=\"#GO语言基础语法\" class=\"headerlink\" title=\"GO语言基础语法\"></a>GO语言基础语法</h1><h2 id=\"Go标记\"><a href=\"#Go标记\" class=\"headerlink\" title=\"Go标记\"></a>Go标记</h2><p>Go程序可以由多个标记组成，可以是关键字，标识符，常量，字符串，符号。如以下 GO 语句由 6 个标记组成：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>6 个标记是(每行一个)：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token number\">1.</span>fmt \n<span class=\"token number\">2.</span> <span class=\"token punctuation\">.</span> \n<span class=\"token number\">3.</span> Println \n<span class=\"token number\">4.</span> <span class=\"token punctuation\">(</span> \n<span class=\"token number\">5.</span> <span class=\"token string\">\"Hello, World!\"</span> \n<span class=\"token number\">6.</span> <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"行分隔符\"><a href=\"#行分隔符\" class=\"headerlink\" title=\"行分隔符\"></a>行分隔符</h2><p>Go和python一样不用使用<code>;</code>结尾，但是Go如果多条语句同行则需要使用<code>;</code>分隔语句</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">fmt<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">/*\nAuthor by A1andNS\n*/</span>\n<span class=\"token comment\">//单行注释</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h2><p>一个标识符实际上就是一个或是多个字母(A<del>Z和a</del>z)数字(0~9)、下划线_组成的序列，但是<strong>第一个字符必须是字母或下划线而不能是数字</strong>。</p>\n<h2 id=\"字符串连接\"><a href=\"#字符串连接\" class=\"headerlink\" title=\"字符串连接\"></a>字符串连接</h2><p>Go语言支持使用<code>+</code>来连接字符串：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> fmt\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A1andNS\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"hhh\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p>\n<table>\n<thead>\n<tr>\n<th>break</th>\n<th>default</th>\n<th>func</th>\n<th>interface</th>\n<th>select</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>case</td>\n<td>defer</td>\n<td>go</td>\n<td>map</td>\n<td>struct</td>\n</tr>\n<tr>\n<td>chan</td>\n<td>else</td>\n<td>goto</td>\n<td>package</td>\n<td>switch</td>\n</tr>\n<tr>\n<td>const</td>\n<td>fallthrough</td>\n<td>if</td>\n<td>range</td>\n<td>type</td>\n</tr>\n<tr>\n<td>continue</td>\n<td>for</td>\n<td>import</td>\n<td>return</td>\n<td>var</td>\n</tr>\n</tbody></table>\n<p>Go 语言还有 36 个预定义标识符：</p>\n<table>\n<thead>\n<tr>\n<th>append</th>\n<th>bool</th>\n<th>byte</th>\n<th>cap</th>\n<th>close</th>\n<th>complex</th>\n<th>complex64</th>\n<th>complex128</th>\n<th>uint16</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>copy</td>\n<td>false</td>\n<td>float32</td>\n<td>float64</td>\n<td>imag</td>\n<td>int</td>\n<td>int8</td>\n<td>int16</td>\n<td>uint32</td>\n</tr>\n<tr>\n<td>int32</td>\n<td>int64</td>\n<td>iota</td>\n<td>len</td>\n<td>make</td>\n<td>new</td>\n<td>nil</td>\n<td>panic</td>\n<td>uint64</td>\n</tr>\n<tr>\n<td>print</td>\n<td>println</td>\n<td>real</td>\n<td>recover</td>\n<td>string</td>\n<td>true</td>\n<td>uint</td>\n<td>uint8</td>\n<td>uintptr</td>\n</tr>\n</tbody></table>\n<h2 id=\"GO中的空格\"><a href=\"#GO中的空格\" class=\"headerlink\" title=\"GO中的空格\"></a>GO中的空格</h2><p>Go语言中的变量声明必须使用空格隔开</p>\n<p><code>var age int;</code></p>\n<p>提升程序美观度，建议合理使用空格，就像写其他语言一样</p>\n<p><code>people = man + woman;</code></p>\n<h2 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h2><p>Go语言中使用<code>fmt.Sprintf()</code>来格式化字符串</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> fmt\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Sprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d:%s\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"alan\"</span><span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Go语言数据类型\"><a href=\"#Go语言数据类型\" class=\"headerlink\" title=\"Go语言数据类型\"></a>Go语言数据类型</h1><table>\n<thead>\n<tr>\n<th>1</th>\n<th><strong>布尔型</strong>  <br>布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td><strong>数字类型</strong><br>整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>字符串类型:</strong><br>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>派生类型:</strong><br>包括：<br><br>- (a) 指针类型（Pointer）<br>- (b) 数组类型<br>- (c) 结构化类型(struct)<br>- (d) Channel 类型<br>- (e) 函数类型<br>- (f) 切片类型<br>- (g) 接口类型（interface）<br>- (h) Map 类型</td>\n</tr>\n</tbody></table>\n<h2 id=\"Go的数字类型\"><a href=\"#Go的数字类型\" class=\"headerlink\" title=\"Go的数字类型\"></a>Go的数字类型</h2><h2 id=\"整型\"><a href=\"#整型\" class=\"headerlink\" title=\"整型\"></a>整型</h2><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>类型和描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><strong>uint8</strong><br>无符号 8 位整型 (0 到 255)</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>uint16</strong><br>无符号 16 位整型 (0 到 65535)</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>uint32</strong><br>无符号 32 位整型 (0 到 4294967295)</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>uint64</strong><br>无符号 64 位整型 (0 到 18446744073709551615)</td>\n</tr>\n<tr>\n<td>5</td>\n<td><strong>int8</strong><br>有符号 8 位整型 (-128 到 127)</td>\n</tr>\n<tr>\n<td>6</td>\n<td><strong>int16</strong><br>有符号 16 位整型 (-32768 到 32767)</td>\n</tr>\n<tr>\n<td>7</td>\n<td><strong>int32</strong><br>有符号 32 位整型 (-2147483648 到 2147483647)</td>\n</tr>\n<tr>\n<td>8</td>\n<td><strong>int64</strong><br>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td>\n</tr>\n</tbody></table>\n<h3 id=\"浮点型\"><a href=\"#浮点型\" class=\"headerlink\" title=\"浮点型\"></a>浮点型</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>类型和描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><strong>float32</strong><br>IEEE-754 32位浮点型数</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>float64</strong><br>IEEE-754 64位浮点型数</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>complex64</strong><br>32 位实数和虚数</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>complex128</strong><br>64 位实数和虚数</td>\n</tr>\n</tbody></table>\n<h3 id=\"其他数字类型\"><a href=\"#其他数字类型\" class=\"headerlink\" title=\"其他数字类型\"></a>其他数字类型</h3><p>以下列出了其他更多的数字类型：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>类型和描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td><strong>byte</strong><br>类似 uint8</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>rune</strong><br>类似 int32</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>uint</strong><br>32 或 64 位</td>\n</tr>\n<tr>\n<td>4</td>\n<td><strong>int</strong><br>与 uint 一样大小</td>\n</tr>\n<tr>\n<td>5</td>\n<td><strong>uintptr</strong><br>无符号整型，用于存放一个指针</td>\n</tr>\n</tbody></table>\n<h1 id=\"Go语言变量\"><a href=\"#Go语言变量\" class=\"headerlink\" title=\"Go语言变量\"></a>Go语言变量</h1><p>再Go中声明变量的一般形式是使用var关键字:</p>\n<p><code>var identifier type</code></p>\n<p>可以一次声明多个变量：</p>\n<p><code>var ientifier1, identifier2 type</code></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Runoob\"</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> b<span class=\"token punctuation\">,</span>c <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>如果变量只声明，未初始化，则变量值默认为0 。</strong></p>\n<ul>\n<li><p>数值类型（包括complex64/128）为 <strong>0</strong></p>\n</li>\n<li><p>布尔类型为 <strong>false</strong></p>\n</li>\n<li><p>字符串为 **””**（空字符串）</p>\n</li>\n<li><p>以下几种类型为 <strong>nil</strong>：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var a *int\nvar a []int\nvar a map[string] int\nvar a chan int\nvar a func(string) int\nvar a error &#x2F;&#x2F; error 是接口<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果未声明变量，Go的部分类型是支持自动识别变量类型的。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这种声明方式也是可以的<code>intVal := 1 </code>,(<strong>只能在函数体中使用</strong>)相等于：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> intVal <span class=\"token builtin\">int</span> \nintVal <span class=\"token operator\">=</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"多变量声明\"><a href=\"#多变量声明\" class=\"headerlink\" title=\"多变量声明\"></a>多变量声明</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">//类型相同多个变量, 非全局变量</span>\n<span class=\"token keyword\">var</span> vname1<span class=\"token punctuation\">,</span> vname2<span class=\"token punctuation\">,</span> vname3 <span class=\"token keyword\">type</span>\nvname1<span class=\"token punctuation\">,</span> vname2<span class=\"token punctuation\">,</span> vname3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3\n\n<span class=\"token keyword\">var</span> vname1<span class=\"token punctuation\">,</span> vname2<span class=\"token punctuation\">,</span> vname3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3 <span class=\"token comment\">// 和 python 很像,不需要显示声明类型，自动推断</span>\n\nvname1<span class=\"token punctuation\">,</span> vname2<span class=\"token punctuation\">,</span> vname3 <span class=\"token operator\">:=</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3 <span class=\"token comment\">// 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>// 这种因式分解关键字的写法一般用于声明全局变量<br>var (</p>\n<pre><code>vname1 v_type1\nvname2 v_type2\n</code></pre>\n<p>)</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">## 值类型和引用类型\n\n所有像 int、float、bool 和 string 这些基本类型都属于**值类型，使用这些类型的变量直接指向存在内存中的值**：\n\n你可以通过 &amp;i 来获取变量 i 的内存地址，例如：0xf840000040\n\n**一个引用类型的变量 r1 存储的是 r1 的值所在的内存地址（数字），或内存地址中第一个字所在的位置。**\n\n# Go语言常量\n\n常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。\n\n常量的定义格式：\n\n&#96;const identifier [type] &#x3D; value&#96;\n\n因为编译器可以根据变量值来推断类型，所以有两种定义方法：\n\n- 显式类型定义： &#96;const b string &#x3D; &quot;abc&quot;&#96;  \n\n- 隐式类型定义： &#96;const b &#x3D; &quot;abc&quot;&#96;\n\n常量可以用于枚举：\n\n&#96;&#96;&#96;go\nconst (\n  Unknown &#x3D; 0\n  Female &#x3D; 1\n  Male &#x3D; 2\n)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>常量可以用<code>len(), cap(), unsafe.Sizeof()</code>函数计算表达式的值。常量表达式中，函数必须是<strong>内置函数</strong>，否则编译不过：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    a <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span>\n    b <span class=\"token operator\">=</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    c <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"iota\"><a href=\"#iota\" class=\"headerlink\" title=\"iota\"></a>iota</h2><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p>\n<p>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p>\n<p>iota 可以被用作枚举值：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token boolean\">iota</span>     <span class=\"token comment\">//1+0</span>\n    j<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token boolean\">iota</span>    <span class=\"token comment\">//2+1</span>\n    k    <span class=\"token comment\">//2+2</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//1，3，4</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>iota相当于index，且iota后的枚举按照最后一个iota的表达式继续计算</strong></p>\n<p><code>&lt;&lt;</code>左移相当于*2操作，左移n位就是*2^n</p>\n<h1 id=\"Go语言算术运算符\"><a href=\"#Go语言算术运算符\" class=\"headerlink\" title=\"Go语言算术运算符\"></a>Go语言算术运算符</h1><h2 id=\"算术运算符基本与其他语言保持一致。\"><a href=\"#算术运算符基本与其他语言保持一致。\" class=\"headerlink\" title=\"算术运算符基本与其他语言保持一致。\"></a>算术运算符基本与其他语言保持一致。</h2><h2 id=\"关系运算符基本与其他语言保持一致。\"><a href=\"#关系运算符基本与其他语言保持一致。\" class=\"headerlink\" title=\"关系运算符基本与其他语言保持一致。\"></a>关系运算符基本与其他语言保持一致。</h2><h2 id=\"逻辑运算符基本与其他语言保持一致。\"><a href=\"#逻辑运算符基本与其他语言保持一致。\" class=\"headerlink\" title=\"逻辑运算符基本与其他语言保持一致。\"></a>逻辑运算符基本与其他语言保持一致。</h2><h2 id=\"Go-语言支持的位运算符如下表所示。假定-A-为60，B-为13：\"><a href=\"#Go-语言支持的位运算符如下表所示。假定-A-为60，B-为13：\" class=\"headerlink\" title=\"Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：\"></a>Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>按位与运算符”&amp;”是双目运算符。 其功能是参与运算的两数各对应的二进位相与。</td>\n<td>(A &amp; B) 结果为 12, 二进制为 0000 1100</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或运算符”|”是双目运算符。 其功能是参与运算的两数各对应的二进位相或</td>\n<td>(A | B) 结果为 61, 二进制为 0011 1101</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或运算符”^”是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。</td>\n<td>(A ^ B) 结果为 49, 二进制为 0011 0001</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移运算符”&lt;&lt;”是双目运算符。左移n位就是乘以2的n次方。 其功能把”&lt;&lt;”左边的运算数的各二进位全部左移若干位，由”&lt;&lt;”右边的数指定移动的位数，高位丢弃，低位补0。</td>\n<td>A &lt;&lt; 2 结果为 240 ，二进制为 1111 0000</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移运算符”&gt;&gt;”是双目运算符。右移n位就是除以2的n次方。 其功能是把”&gt;&gt;”左边的运算数的各二进位全部右移若干位，”&gt;&gt;”右边的数指定移动的位数。</td>\n<td>A &gt;&gt; 2 结果为 15 ，二进制为 0000 1111</td>\n</tr>\n</tbody></table>\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><p>下表列出了所有Go语言的赋值运算符。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>简单的赋值运算符，将一个表达式的值赋给一个左值</td>\n<td>C = A + B 将 A + B 表达式结果赋值给 C</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>相加后再赋值</td>\n<td>C += A 等于 C = C + A</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>相减后再赋值</td>\n<td>C -= A 等于 C = C - A</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>相乘后再赋值</td>\n<td>C *= A 等于 C = C * A</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>相除后再赋值</td>\n<td>C /= A 等于 C = C / A</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>求余后再赋值</td>\n<td>C %= A 等于 C = C % A</td>\n</tr>\n<tr>\n<td>&lt;&lt;=</td>\n<td>左移后赋值</td>\n<td>C &lt;&lt;= 2 等于 C = C &lt;&lt; 2</td>\n</tr>\n<tr>\n<td>&gt;&gt;=</td>\n<td>右移后赋值</td>\n<td>C &gt;&gt;= 2 等于 C = C &gt;&gt; 2</td>\n</tr>\n<tr>\n<td>&amp;=</td>\n<td>按位与后赋值</td>\n<td>C &amp;= 2 等于 C = C &amp; 2</td>\n</tr>\n<tr>\n<td>^=</td>\n<td>按位异或后赋值</td>\n<td>C ^= 2 等于 C = C ^ 2</td>\n</tr>\n<tr>\n<td>|=</td>\n<td>按位或后赋值</td>\n<td>C |= 2 等于 C = C | 2</td>\n</tr>\n</tbody></table>\n<h2 id=\"其他运算符\"><a href=\"#其他运算符\" class=\"headerlink\" title=\"其他运算符\"></a>其他运算符</h2><p>下表列出了Go语言的其他运算符。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">运算符</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">&amp;</td>\n<td align=\"center\">返回变量存储地址</td>\n<td align=\"center\">&a; 将给出变量的实际地址。</td>\n</tr>\n<tr>\n<td align=\"center\">*</td>\n<td align=\"center\">指针变量。</td>\n<td align=\"center\">*a; 是一个指针变量</td>\n</tr>\n</tbody></table>\n<h2 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h2><p>有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：</p>\n<table>\n<thead>\n<tr>\n<th>优先级</th>\n<th>运算符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>* / % &lt;&lt; &gt;&gt; &amp; &amp;^</td>\n</tr>\n<tr>\n<td>4</td>\n<td>+ - | ^</td>\n</tr>\n<tr>\n<td>3</td>\n<td>== != &lt; &lt;= &gt; &gt;=</td>\n</tr>\n<tr>\n<td>2</td>\n<td>&amp;&amp;</td>\n</tr>\n<tr>\n<td>1</td>\n<td>|</td>\n</tr>\n</tbody></table>\n<p>当然，你可以通过使用括号来临时提升某个表达式的整体运算优先级。</p>\n<h1 id=\"Go语言条件语句\"><a href=\"#Go语言条件语句\" class=\"headerlink\" title=\"Go语言条件语句\"></a>Go语言条件语句</h1><p>Go 语言提供了以下几种条件判断语句：</p>\n<table>\n<thead>\n<tr>\n<th>语句</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/go/go-if-statement.html\" title=\"Go if 语句\">if 语句</a></td>\n<td><strong>if 语句</strong> 由一个布尔表达式后紧跟一个或多个语句组成。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/go/go-if-else-statement.html\" title=\"Go if...else 语句\">if…else 语句</a></td>\n<td><strong>if 语句</strong> 后可以使用可选的 <strong>else 语句</strong>, else 语句中的表达式在布尔表达式为 false 时执行。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/go/go-nested-if-statements.html\" title=\"Go if 嵌套语句\">if 嵌套语句</a></td>\n<td>你可以在 <strong>if</strong> 或 <strong>else if</strong> 语句中嵌入一个或多个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/go/go-switch-statement.html\" title=\"Go switch 语句\">switch 语句</a></td>\n<td><strong>switch</strong> 语句用于基于不同条件执行不同动作。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/go/go-select-statement.html\" title=\"Go select 语句\">select 语句</a></td>\n<td><strong>select</strong> 语句类似于 <strong>switch</strong> 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。</td>\n</tr>\n</tbody></table>\n<p><strong>GO语言不存在3目运算符，所以其他语言中常见的?:形式的条件判断是不受支持的</strong></p>\n<h1 id=\"Go-语言循环：\"><a href=\"#Go-语言循环：\" class=\"headerlink\" title=\"Go 语言循环：\"></a>Go 语言循环：</h1><p>Go 语言提供了以下几种类型<strong>循环处理语句</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>循环类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/go/go-for-loop.html\">for 循环</a></td>\n<td>重复执行语句块</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/go/go-nested-loops.html\">循环嵌套</a></td>\n<td>在 for 循环中嵌套一个或多个 for 循环言循环语句</td>\n</tr>\n</tbody></table>\n<p>GO 语言支持以下几种<strong>循环控制语句</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>控制语句</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/go/go-break-statement.html\">break 语句</a></td>\n<td>经常用于中断当前 for 循环或跳出 switch 语句</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/go/go-continue-statement.html\">continue 语句</a></td>\n<td>跳过当前循环的剩余语句，然后继续进行下一轮循环。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/go/go-goto-statement.html\">goto 语句</a></td>\n<td>将控制转移到被标记的语句。</td>\n</tr>\n</tbody></table>\n<p>无限循环，在Golang中不是使用<code>while true</code>，而是使用<code>for true</code></p>\n<h1 id=\"Go语言函数\"><a href=\"#Go语言函数\" class=\"headerlink\" title=\"Go语言函数\"></a>Go语言函数</h1><p>GO语言至少要有个main()函数。</p>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>Go 语言函数定义格式如下：</p>\n<p><code>func function_name( [parameter list] ) [return_types] &#123; 函数体 &#125;</code></p>\n<p>函数定义解析：</p>\n<ul>\n<li>func：函数由 func 开始声明</li>\n<li>function_name：函数名称，参数列表和返回值类型构成了函数签名。</li>\n<li>parameter list：参数列表，参数就像一个占位符，当函数被调用时，你可以将值传递给参数，这个值被称为实际参数。参数列表指定的是参数类型、顺序、及参数个数。参数是可选的，也就是说函数也可以不包含参数。</li>\n<li>return_types：返回类型，函数返回一列值。return_types 是该列值的数据类型。有些功能不需要返回值，这种情况下 return_types 不是必须的。</li>\n<li>函数体：函数定义的代码集合。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token builtin\">int</span>\n    result <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">,</span> b\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"函数的调用\"><a href=\"#函数的调用\" class=\"headerlink\" title=\"函数的调用\"></a>函数的调用</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">var</span> b <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token builtin\">int</span>\n    result <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"关于函数参数\"><a href=\"#关于函数参数\" class=\"headerlink\" title=\"关于函数参数\"></a>关于函数参数</h2><p>调用函数，可以通过两种方式来传递参数：</p>\n<table>\n<thead>\n<tr>\n<th>传递类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>值传递</td>\n<td>值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</td>\n</tr>\n<tr>\n<td>引用传递</td>\n<td>引用传递是指在调用函数时将<strong>实际参数的地址</strong>传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</td>\n</tr>\n</tbody></table>\n<p>默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。</p>\n<h2 id=\"函数用法\"><a href=\"#函数用法\" class=\"headerlink\" title=\"函数用法\"></a>函数用法</h2><p>闭包的语法结构：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">getSequence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n   i<span class=\"token operator\">:=</span><span class=\"token number\">0</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n      i<span class=\"token operator\">+=</span><span class=\"token number\">1</span>\n     <span class=\"token keyword\">return</span> i  \n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>方法</strong>的语法格式如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>variable_name variable_data_type<span class=\"token punctuation\">)</span> <span class=\"token function\">function_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>return_type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>\n <span class=\"token comment\">/* 函数体*/</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Go语言变量作用域\"><a href=\"#Go语言变量作用域\" class=\"headerlink\" title=\"Go语言变量作用域\"></a>Go语言变量作用域</h1><p>Go 语言中变量可以在三个地方声明：</p>\n<ul>\n<li>函数内定义的变量称为局部变量</li>\n<li>函数外定义的变量称为全局变量</li>\n<li>函数定义中的变量称为形式参数</li>\n</ul>\n<p>这个和其他语言是一致的</p>\n<p>Go 语言程序中全局变量与局部变量名称可以相同，但是函数内的局部变量会被优先考虑。</p>\n<h1 id=\"Go-语言数组\"><a href=\"#Go-语言数组\" class=\"headerlink\" title=\"Go 语言数组\"></a>Go 语言数组</h1><p>Go 语言提供了数组类型的数据结构。</p>\n<p>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。</p>\n<h2 id=\"声明数组\"><a href=\"#声明数组\" class=\"headerlink\" title=\"声明数组\"></a>声明数组</h2><p>Go 语言数组声明需要指定元素类型及元素个数，语法格式如下：</p>\n<p><code>var variable_name [SIZE] variable_type</code></p>\n<h2 id=\"初始化数组\"><a href=\"#初始化数组\" class=\"headerlink\" title=\"初始化数组\"></a>初始化数组</h2><p>以下演示了数组初始化：</p>\n<p><code>var balance = [5]float32&#123;1000.0, 2.0, 3.4, 7.0, 50.0&#125;</code></p>\n<p>如果不确定长度，可以使用<code>...</code>来代替长度，这样写的话编译器将会执行推断数组长度</p>\n<p><code>var balance = [...]float32&#123;1000.0, 2.0, 3.4, 7.0, 50.0&#125;</code></p>\n<p>如果设置了数组的长度,还有使用下标来初始化元素</p>\n<p><code>balance =  [5]float32&#123;1:12.23, 4:55.33&#125;</code></p>\n<h2 id=\"数组访问\"><a href=\"#数组访问\" class=\"headerlink\" title=\"数组访问\"></a>数组访问</h2><p>这个和其他语言一样</p>\n<p><code>array[index]</code>来进行访问就可以了</p>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><p>Go 语言支持多维数组，以下为常用的多维数组声明方式：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> variable_name <span class=\"token punctuation\">[</span>SIZE1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>SIZE2<span class=\"token punctuation\">]</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span>SIZEN<span class=\"token punctuation\">]</span> variable_type<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>访问起来和其他语言一样</p>\n<h2 id=\"Go-语言向函数传递数组\"><a href=\"#Go-语言向函数传递数组\" class=\"headerlink\" title=\"Go 语言向函数传递数组\"></a>Go 语言向函数传递数组</h2><h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><p>形参设定数组大小：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void myFunction(param [10]int)\n&#123;\n.\n.\n.\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>形参未设定数组大小：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void myFunction(param []int)\n&#123;\n.\n.\n.\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Go语言指针\"><a href=\"#Go语言指针\" class=\"headerlink\" title=\"Go语言指针\"></a>Go语言指针</h1><p>Go 语言的取地址符是 &amp;，这个和C一样，放到一个变量前使用就会返回相应变量的内存地址：</p>\n<p>一个指针变量指向了一个值的内存地址。</p>\n<p>类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var var_name *var-type<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例如</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> ip <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n<span class=\"token keyword\">var</span> fp <span class=\"token operator\">*</span><span class=\"token builtin\">float32</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h2 id=\"如何使用指针\"><a href=\"#如何使用指针\" class=\"headerlink\" title=\"如何使用指针\"></a>如何使用指针</h2><p>指针使用流程：</p>\n<ul>\n<li>定义指针变量。</li>\n<li>为指针变量赋值。</li>\n<li>访问指针变量中指向地址的值。</li>\n</ul>\n<p>在指针类型前面加上 * 号（前缀）来获取指针所指向的内容，而他自己表示的是地址。如下演示：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> ip <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n    <span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n    ip <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是指针所指向的地址: %d\"</span><span class=\"token punctuation\">,</span>ip<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这是*ip变量的值：\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>ip<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Go-空指针\"><a href=\"#Go-空指针\" class=\"headerlink\" title=\"Go 空指针\"></a>Go 空指针</h2><p>当一个指针被定义后没有分配到任何变量时，它的值为 nil。</p>\n<p>nil 指针也称为空指针。</p>\n<p>nil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。</p>\n<h2 id=\"Go-语言指针数组\"><a href=\"#Go-语言指针数组\" class=\"headerlink\" title=\"Go 语言指针数组\"></a>Go 语言指针数组</h2><p>声明方式</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var ptr [size]*array_type;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Go-语言指向指针的指针\"><a href=\"#Go-语言指向指针的指针\" class=\"headerlink\" title=\"Go 语言指向指针的指针\"></a>Go 语言指向指针的指针</h2><p>指向指针的指针变量声明格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var ptr **int;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/06/pointer_to_pointer.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> ip <span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n    <span class=\"token keyword\">var</span> ipp <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">var</span> ippp <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token builtin\">int</span>\n\t<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\tip <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a\n\tipp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ip\n\tippp <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ipp\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ip<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>ipp<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>ippp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Go指针作为函数参数\"><a href=\"#Go指针作为函数参数\" class=\"headerlink\" title=\"Go指针作为函数参数\"></a>Go指针作为函数参数</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Go语言结构体\"><a href=\"#Go语言结构体\" class=\"headerlink\" title=\"Go语言结构体\"></a>Go语言结构体</h1><p>结构体学习过C的都知道了，其实就是相同类型或不同类型数据构成的数据集合。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> struct_variable_type <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n    member definition\n    member definition\n    <span class=\"token operator\">...</span>\n    member definition\n<span class=\"token punctuation\">&#125;</span>\nvariable_name <span class=\"token operator\">:=</span> structure_variable_type <span class=\"token punctuation\">&#123;</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token operator\">...</span>valuen<span class=\"token punctuation\">&#125;</span>\n相当于\n<span class=\"token keyword\">var</span> variable_name structure_variable_type <span class=\"token operator\">=</span> structure_variable_type <span class=\"token punctuation\">&#123;</span>value1<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> value3<span class=\"token punctuation\">&#125;</span>\n或\nvariable_name <span class=\"token operator\">:=</span> structure_variable_type <span class=\"token punctuation\">&#123;</span> key1<span class=\"token punctuation\">:</span> value1<span class=\"token punctuation\">,</span> key2<span class=\"token punctuation\">:</span> value2<span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> keyn<span class=\"token punctuation\">:</span> valuen<span class=\"token punctuation\">&#125;</span>\n相当于\n<span class=\"token keyword\">var</span> variable_name structure_variable_type <span class=\"token operator\">=</span> structure_variable_type <span class=\"token punctuation\">&#123;</span>value2<span class=\"token punctuation\">,</span> value2<span class=\"token punctuation\">,</span> value3<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果要访问结构体成员，需要使用点号 <strong>.</strong> 操作符，格式为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">结构体.成员名&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>结构体作为函数参数。你可以像其他数据类型一样将结构体类型作为参数传递给函数。</strong></p>\n<h2 id=\"结构体指针\"><a href=\"#结构体指针\" class=\"headerlink\" title=\"结构体指针\"></a>结构体指针</h2><p>你可以定义指向结构体的指针类似于其他指针变量，格式如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> struct_pointer <span class=\"token operator\">*</span>struct_var_name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用结构体指针访问结构体成员，使用 “.” 操作符：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">struct_pointer.title<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h1><p>切片我理解成一种特殊的数组，动态数组，因为他的定义方式和初始化方式，包括它可以从数组引用。</p>\n<h2 id=\"定义切片的方式：\"><a href=\"#定义切片的方式：\" class=\"headerlink\" title=\"定义切片的方式：\"></a>定义切片的方式：</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> name <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">type</span>\n<span class=\"token comment\">//or 使用make()函数来创建切片</span>\n<span class=\"token keyword\">var</span> slice <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//make函数还可以指定容量</span>\n<span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//len是数组的长度，也是切片的初始长度，则就是为啥我把切片理解成一种特殊的数组,它定义是不声明自己的长度</span>\n<span class=\"token comment\">//example</span>\n<span class=\"token keyword\">var</span> students <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"切片初始化\"><a href=\"#切片初始化\" class=\"headerlink\" title=\"切片初始化\"></a>切片初始化</h2><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">slice <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span>\nslice <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\nslice <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">:</span>endIndex<span class=\"token punctuation\">]</span>\nslice <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span>startIndex<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ns <span class=\"token operator\">:=</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>endIndex<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"len-和cap-函数\"><a href=\"#len-和cap-函数\" class=\"headerlink\" title=\"len()和cap()函数\"></a>len()和cap()函数</h2><p>切片和数组一样可以索引的，并且可以使用len()来获取长度。</p>\n<p>cap()函数可以测量切片最长可以达到多少。</p>\n<h2 id=\"append-和copy-函数\"><a href=\"#append-和copy-函数\" class=\"headerlink\" title=\"append()和copy()函数\"></a>append()和copy()函数</h2><p>如果想要增加切片的容量，我们必须创建一个新的更大的切片并把原来的分片copy过来。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>numbers1<span class=\"token punctuation\">,</span>numbers<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//copy numbers到numbers1</span>\n<span class=\"token function\">append</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//append切片到number</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"范围range\"><a href=\"#范围range\" class=\"headerlink\" title=\"范围range\"></a>范围range</h1><p>Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。</p>\n<p>遍历获取key-value:</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span>value <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> array <span class=\"token punctuation\">&#123;</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Go-语言Map-集合\"><a href=\"#Go-语言Map-集合\" class=\"headerlink\" title=\"Go 语言Map(集合)\"></a>Go 语言Map(集合)</h1><p>Map 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p>\n<p>Map 是一种集合，所以我们可以像迭代数组和切片那样迭代它。不过，Map 是无序的，我们无法决定它的返回顺序，这是因为 Map 是使用 hash 表来实现的。</p>\n<h3 id=\"定义-Map\"><a href=\"#定义-Map\" class=\"headerlink\" title=\"定义 Map\"></a>定义 Map</h3><p>可以使用内建函数 make 也可以使用 map 关键字来定义 Map:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;* 声明变量，默认 map 是 nil *&#x2F;\nvar map_variable map[key_data_type]value_data_type\n\n&#x2F;* 使用 make 函数 *&#x2F;\nmap_variable :&#x3D; make(map[key_data_type]value_data_type)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对</strong></p>\n<p>赋值方式：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">countryCapitalMap<span class=\"token punctuation\">[</span><span class=\"token string\">\"France\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"巴黎\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出方式：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">for</span> country <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> countryCapitalMap<span class=\"token punctuation\">&#123;</span>\n    countryCapitalMap<span class=\"token punctuation\">[</span>country<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>删除key-value：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>map_name<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h1 id=\"Go的类型转换\"><a href=\"#Go的类型转换\" class=\"headerlink\" title=\"Go的类型转换\"></a>Go的类型转换</h1><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token function\">type_name</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> sum <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">2312</span>\n<span class=\"token keyword\">var</span> per <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n<span class=\"token keyword\">var</span> result <span class=\"token builtin\">float32</span>\nresult <span class=\"token operator\">=</span> <span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">float32</span><span class=\"token punctuation\">(</span>per<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result的值为: %f\\n\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Go的语言接口\"><a href=\"#Go的语言接口\" class=\"headerlink\" title=\"Go的语言接口\"></a>Go的语言接口</h1><p>Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> interface_name <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>\n   method_name1 <span class=\"token punctuation\">[</span>return_type<span class=\"token punctuation\">]</span>\n   method_name2 <span class=\"token punctuation\">[</span>return_type<span class=\"token punctuation\">]</span>\n   method_name3 <span class=\"token punctuation\">[</span>return_type<span class=\"token punctuation\">]</span>\n   <span class=\"token operator\">...</span>\n   method_namen <span class=\"token punctuation\">[</span>return_type<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">type</span> struct_name <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/* variables */</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/* 实现接口方法 */</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>struct_name_variable struct_name<span class=\"token punctuation\">)</span> <span class=\"token function\">method_name1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>return_type<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/* 方法实现 */</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>struct_name_variable struct_name<span class=\"token punctuation\">)</span> <span class=\"token function\">method_namen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>return_type<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">/* 方法实现*/</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以理解为go的面向对象，它使用结构体来表示原来的类，再通过定义一个接口类型，和接口方法的实现来实现面向对象中的方法</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> phone Phone\nphone <span class=\"token operator\">=</span> <span class=\"token function\">new</span><span class=\"token punctuation\">(</span>NokiaPhone<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//Phone是接口类型名称，NokiaPhone是结构体类型名称</span>\nphone<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//call()是接口Phone中定义的函数</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Go错误处理\"><a href=\"#Go错误处理\" class=\"headerlink\" title=\"Go错误处理\"></a>Go错误处理</h1><p>Go语言通过内置的错误接口提供了非常简单的错误处理机制。</p>\n<p>error类型是一个接口类型，定义如下：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> <span class=\"token builtin\">error</span> <span class=\"token keyword\">interface</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>使用errors.New 可返回一个错误信息，返回error类型：</p>\n<h1 id=\"Go并发\"><a href=\"#Go并发\" class=\"headerlink\" title=\"Go并发\"></a>Go并发</h1><p>Go语言支持并发，我们只需要通过go关键字来开启goroutine即可。</p>\n<p>goroutine是轻量级线程，goroutine的调度是由Golang运行时进行管理的。</p>\n<p>goroutine语法格式:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">go func_name(args)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>高并发：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2>","text":"Golang是什么Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。 Go是从2007年末由Robert Griesemer, Rob Pike, Ken Thompson主持开发，后来还加入了Ian Lance Taylor, Russ Cox等人，并最终于...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":36,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Golang","slug":"Golang","count":1,"path":"api/tags/Golang.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Golang%E6%98%AF%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">Golang是什么</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GO%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%BB%E8%A6%81%E7%94%A8%E9%80%94\"><span class=\"toc-text\">GO语言的主要用途</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-%E8%AF%AD%E8%A8%80%E7%89%B9%E8%89%B2\"><span class=\"toc-text\">Go 语言特色</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GO%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E5%92%8C%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">GO程序运行和编译</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">Go语言结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GO%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">GO语言基础语法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go%E6%A0%87%E8%AE%B0\"><span class=\"toc-text\">Go标记</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%8C%E5%88%86%E9%9A%94%E7%AC%A6\"><span class=\"toc-text\">行分隔符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">注释</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%87%E8%AF%86%E7%AC%A6\"><span class=\"toc-text\">标识符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">字符串连接</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">关键字</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#GO%E4%B8%AD%E7%9A%84%E7%A9%BA%E6%A0%BC\"><span class=\"toc-text\">GO中的空格</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">格式化字符串</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Go语言数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go%E7%9A%84%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">Go的数字类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E5%9E%8B\"><span class=\"toc-text\">整型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%AE%E7%82%B9%E5%9E%8B\"><span class=\"toc-text\">浮点型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">其他数字类型</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">Go语言变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">多变量声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#iota\"><span class=\"toc-text\">iota</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">Go语言算术运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%E5%9F%BA%E6%9C%AC%E4%B8%8E%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E3%80%82\"><span class=\"toc-text\">算术运算符基本与其他语言保持一致。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E5%9F%BA%E6%9C%AC%E4%B8%8E%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E3%80%82\"><span class=\"toc-text\">关系运算符基本与其他语言保持一致。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E5%9F%BA%E6%9C%AC%E4%B8%8E%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%E3%80%82\"><span class=\"toc-text\">逻辑运算符基本与其他语言保持一致。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%E5%A6%82%E4%B8%8B%E8%A1%A8%E6%89%80%E7%A4%BA%E3%80%82%E5%81%87%E5%AE%9A-A-%E4%B8%BA60%EF%BC%8CB-%E4%B8%BA13%EF%BC%9A\"><span class=\"toc-text\">Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">其他运算符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">运算符优先级</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">Go语言条件语句</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go-%E8%AF%AD%E8%A8%80%E5%BE%AA%E7%8E%AF%EF%BC%9A\"><span class=\"toc-text\">Go 语言循环：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Go语言函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数的调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">关于函数参数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">函数用法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F\"><span class=\"toc-text\">Go语言变量作用域</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go-%E8%AF%AD%E8%A8%80%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">Go 语言数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A3%B0%E6%98%8E%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">声明数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">初始化数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">数组访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">多维数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-%E8%AF%AD%E8%A8%80%E5%90%91%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">Go 语言向函数传递数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%B8%80\"><span class=\"toc-text\">方式一</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E5%BC%8F%E4%BA%8C\"><span class=\"toc-text\">方式二</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88\"><span class=\"toc-text\">Go语言指针</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%8C%87%E9%92%88\"><span class=\"toc-text\">如何使用指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-%E7%A9%BA%E6%8C%87%E9%92%88\"><span class=\"toc-text\">Go 空指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">Go 语言指针数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go-%E8%AF%AD%E8%A8%80%E6%8C%87%E5%90%91%E6%8C%87%E9%92%88%E7%9A%84%E6%8C%87%E9%92%88\"><span class=\"toc-text\">Go 语言指向指针的指针</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Go%E6%8C%87%E9%92%88%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">Go指针作为函数参数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">Go语言结构体</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88\"><span class=\"toc-text\">结构体指针</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%88%87%E7%89%87\"><span class=\"toc-text\">切片</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E5%88%87%E7%89%87%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">定义切片的方式：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%87%E7%89%87%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">切片初始化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#len-%E5%92%8Ccap-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">len()和cap()函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#append-%E5%92%8Ccopy-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">append()和copy()函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%8C%83%E5%9B%B4range\"><span class=\"toc-text\">范围range</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go-%E8%AF%AD%E8%A8%80Map-%E9%9B%86%E5%90%88\"><span class=\"toc-text\">Go 语言Map(集合)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89-Map\"><span class=\"toc-text\">定义 Map</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">Go的类型转换</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E7%9A%84%E8%AF%AD%E8%A8%80%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">Go的语言接口</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\"><span class=\"toc-text\">Go错误处理</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Go%E5%B9%B6%E5%8F%91\"><span class=\"toc-text\">Go并发</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"红队笔记卷一","uid":"643febf24c24622080f946bae0310d6c","slug":"红队笔记之信息收集","date":"2021-11-02T11:03:33.000Z","updated":"2021-12-28T11:13:17.252Z","comments":true,"path":"api/articles/红队笔记之信息收集.json","keywords":"A1andNS","cover":[],"text":"前言渗透测试第一步，就是信息收集。信息收集很大程度为后续工作打下基础。针对目标资产和主机进行信息收集是必不可少的的部分，也是至关重要的部分。 Nmap篇nmap是最常用的一个主机扫描工具，也为大家所熟知。你可以在这里Nmap官网：https://nmap.org/下载，也可以使用...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":36,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"红队","slug":"红队","count":1,"path":"api/tags/红队.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}