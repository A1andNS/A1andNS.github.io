{"title":"SSRF学习","uid":"d422db4ec62375a9a1399b6a63a1e320","slug":"SSRF学习","date":"2020-05-20T02:09:59.000Z","updated":"2020-11-18T14:07:28.000Z","comments":true,"path":"api/articles/SSRF学习.json","keywords":"A1andNS","cover":null,"content":"<h2 id=\"SSRF概念\"><a href=\"#SSRF概念\" class=\"headerlink\" title=\"SSRF概念\"></a>SSRF概念</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF是要目标网站的内部系统。（因为他是从内部系统访问的，所有可以通过它攻击外网无法访问的内部系统，也就是把目标网站当中间人）</p>\n<p>这也是因为在处理参数的时候，服务器端没有验证参数的合法性，从而导致可以利用服务器端为跳板去获取内网服务器信息。</p>\n<h2 id=\"SSRF用途\"><a href=\"#SSRF用途\" class=\"headerlink\" title=\"SSRF用途\"></a>SSRF用途</h2><p>那么SSRF 可以做什么呢？</p>\n<p><strong>1.内外网的端口和服务扫描</strong></p>\n<p><strong>2.主机本地敏感数据的读取</strong></p>\n<p><strong>3.内外网主机应用程序漏洞的利用</strong></p>\n<p><strong>4.内外网Web站点漏洞的利用</strong></p>\n<h2 id=\"SSRF漏洞经常出现的位置\"><a href=\"#SSRF漏洞经常出现的位置\" class=\"headerlink\" title=\"SSRF漏洞经常出现的位置\"></a>SSRF漏洞经常出现的位置</h2><p>调用资源的参数就很有可能会出现ssrf漏洞。</p>\n<p>1.社交分享功能：获取超链接的标题等内容进行显示</p>\n<p>2.转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</p>\n<p>3.在线翻译：给网址翻译对应网页的内容</p>\n<p>4.图片加载/下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</p>\n<p>5.图片/文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</p>\n<p>6.云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</p>\n<p>7.网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</p>\n<p>8.数据库内置功能：数据库的比如mongodb的copyDatabase函数</p>\n<p>9.邮件系统：比如接收邮件服务器地址</p>\n<p>10.编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</p>\n<p>11.未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</p>\n<p>一些的url中的关键字：share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain……</p>\n<p>12.从远程服务器请求资源（upload from url 如discuz！；import &amp; expost rss feed 如web blog；使用了xml引擎对象的地方 如wordpress xmlrpc.php）</p>\n<p>经常会看到SSRF时有RFI导致的，也就是远程文件包含，文件包含的目的是：开发程序的时候经常会吧需要重复使用的代码写入一个单独的文件中，当需要调用这些代码事，再从其他文件中包含调用代码就好了。</p>\n<p>PHP中常见的包含调用函数有：include()、require()、include_once、require_once() 。其中include失败会弹出警告，require失败则是直接导致致命错误。当然一般可能还需要php.ini文件中开启了allow_url_fopen allow_url_include才行。</p>\n<h2 id=\"SSRF利用\"><a href=\"#SSRF利用\" class=\"headerlink\" title=\"SSRF利用\"></a>SSRF利用</h2><p>1.让服务端去访问相应的网址</p>\n<p>2.让服务端去访问自己所处内网的一些指纹文件来判断是否存在相应的cms</p>\n<p>3.可以使用file、dict、gopher[11]、ftp协议进行请求访问相应的文件</p>\n<p>4.攻击内网web应用（可以向内部任意主机的任意端口发送精心构造的数据包{payload}）</p>\n<p>5.攻击内网应用程序（利用跨协议通信技术）</p>\n<p>6.判断内网主机是否存活：方法是访问看是否有端口开放</p>\n<p>7.DoS攻击（请求大文件，始终保持连接keep-alive always）</p>\n<h2 id=\"绕过小技巧\"><a href=\"#绕过小技巧\" class=\"headerlink\" title=\"绕过小技巧\"></a>绕过小技巧</h2><p>注：参考[8]会有更详细的绕过方式总结</p>\n<p>1.<a href=\"http://baidu.com@www.baidu.com/%E4%B8%8Ehttp://www.baidu.com/%E8%AF%B7%E6%B1%82%E6%97%B6%E6%98%AF%E7%9B%B8%E5%90%8C%E7%9A%84\">http://baidu.com@www.baidu.com/与http://www.baidu.com/请求时是相同的</a></p>\n<p>2.各种IP地址的进制转换</p>\n<p>3.URL跳转绕过：<a href=\"http://www.hackersb.cn/redirect.php?url=http://192.168.0.1/\">http://www.hackersb.cn/redirect.php?url=http://192.168.0.1/</a></p>\n<p>4.短网址绕过 <a href=\"http://t.cn/RwbLKDx\">http://t.cn/RwbLKDx</a></p>\n<p>5.xip.io来绕过：<a href=\"http://xxx.192.168.0.1.xip.io/\">http://xxx.192.168.0.1.xip.io/</a> == 192.168.0.1 (xxx 任意）</p>\n<p>指向任意ip的域名：xip.io(37signals开发实现的定制DNS服务)</p>\n<p>6.限制了子网段，可以加 :80 端口绕过。<a href=\"http://tieba.baidu.com/f/commit/share/openShareApi?url=http://10.42.7.78:80\">http://tieba.baidu.com/f/commit/share/openShareApi?url=http://10.42.7.78:80</a></p>\n<p>7.探测内网域名，或者将自己的域名解析到内网ip</p>\n<p>8.例如 <a href=\"http://10.153.138.81/ts.php\">http://10.153.138.81/ts.php</a> , 修复时容易出现的获取host时以/分割来确定host，</p>\n<p>但这样可以用 <a href=\"http://abc@10.153.138.81/\">http://abc@10.153.138.81/</a> 绕过</p>\n<h2 id=\"漏洞修复\"><a href=\"#漏洞修复\" class=\"headerlink\" title=\"漏洞修复\"></a>漏洞修复</h2><p>1.禁止跳转</p>\n<p>2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</p>\n<p>3.禁用不需要的协议，仅仅允许http和https请求。可以防止类似于file://, gopher://, ftp:// 等引起的问题</p>\n<p>4.设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）</p>\n<p>5.限制请求的端口为http常用的端口，比如 80、443、8080、8090</p>\n<p>6.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</p>\n<h2 id=\"常见bypass方式：\"><a href=\"#常见bypass方式：\" class=\"headerlink\" title=\"常见bypass方式：\"></a>常见bypass方式：</h2><p>a. 单斜线”/“绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=/www.evil.com\">https://www.xxx.com/redirect.php?url=/www.evil.com</a></p>\n<p>b. 缺少协议绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=//www.evil.com\">https://www.xxx.com/redirect.php?url=//www.evil.com</a></p>\n<p>c. 多斜线”/“前缀绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=///www.evil.com\">https://www.xxx.com/redirect.php?url=///www.evil.com</a></p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=www.evil.com\">https://www.xxx.com/redirect.php?url=www.evil.com</a></p>\n<p>d. 利用”@”符号绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=https://www.xxx.com@www.evil.com\">https://www.xxx.com/redirect.php?url=https://www.xxx.com@www.evil.com</a></p>\n<p>e. 利用反斜线”&quot;绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=https://www.evil.com%5Chttps://www.xxx.com/\">https://www.xxx.com/redirect.php?url=https://www.evil.com\\https://www.xxx.com/</a></p>\n<p>f. 利用”#”符号绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=https://www.evil.com#https://www.xxx.com/\">https://www.xxx.com/redirect.php?url=https://www.evil.com#https://www.xxx.com/</a></p>\n<p>g. 利用”?”号绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=https://www.evil.com?www.xxx.com\">https://www.xxx.com/redirect.php?url=https://www.evil.com?www.xxx.com</a></p>\n<p>h. 利用”\\“绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=https://www.evil.com%5C%5Cwww.xxx.com\">https://www.xxx.com/redirect.php?url=https://www.evil.com\\\\www.xxx.com</a></p>\n<p>i. 利用”.”绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=.evil\">https://www.xxx.com/redirect.php?url=.evil</a>     </p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=.evil.com\">https://www.xxx.com/redirect.php?url=.evil.com</a> </p>\n<p>j.重复特殊字符绕过</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=///www.evil.com//\">https://www.xxx.com/redirect.php?url=///www.evil.com//</a>..</p>\n<p><a href=\"https://www.xxx.com/redirect.php?url=www.evil.com//\">https://www.xxx.com/redirect.php?url=www.evil.com//</a>..</p>\n<p>​    其他常见的绕过方式还有，使用地址，而不是域名；使用跳转到IPV6地址，而不是IPv4地址；用10进制、8进制、16进制形式表示；更换协议,使用ftp、gopher协议等；</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>[1] . <a href=\"https://xz.aliyun.com/t/2115\">https://xz.aliyun.com/t/2115</a></p>\n","text":"SSRF概念SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF是要目标网站的内部系统。（因为他是从内部系统访问的，所有可以通过它攻击外网无法访问的内部系统，也就是把目标网...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":30,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"SSRF","slug":"SSRF","count":1,"path":"api/tags/SSRF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">SSRF概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E7%94%A8%E9%80%94\"><span class=\"toc-text\">SSRF用途</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E6%BC%8F%E6%B4%9E%E7%BB%8F%E5%B8%B8%E5%87%BA%E7%8E%B0%E7%9A%84%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">SSRF漏洞经常出现的位置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SSRF%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">SSRF利用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%95%E8%BF%87%E5%B0%8F%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">绕过小技巧</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D\"><span class=\"toc-text\">漏洞修复</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81bypass%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">常见bypass方式：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99\"><span class=\"toc-text\">参考资料</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"XSS挑战之旅","uid":"78d694166ceafa715bcdb2c1afc2ef78","slug":"XSS挑战之旅","date":"2020-05-27T01:02:16.000Z","updated":"2020-05-27T14:20:52.000Z","comments":true,"path":"api/articles/XSS挑战之旅.json","keywords":"A1andNS","cover":[],"text":"无意间看到了一个XSS小游戏，就玩了一下。 链接：https://xss.tesla-space.com/ level1看显示的界面和url，可以知道name参数是一个关键，我试着再name参数写入一个脚本。 name=&lt;script&gt;alert(&quot;XSS&...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":30,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"XSS","slug":"XSS","count":4,"path":"api/tags/XSS.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Java代码练习之抽象类和接口","uid":"29d2db0c129aae9d00581e94f50e8afb","slug":"Java代码练习之抽象类和接口","date":"2020-04-26T14:38:19.000Z","updated":"2020-04-26T14:55:26.000Z","comments":true,"path":"api/articles/Java代码练习之抽象类和接口.json","keywords":"A1andNS","cover":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1584797250934&di=7c8cf327145401b1534a2902f687257f&imgtype=0&src=http%3A%2F%2Fs7.51cto.com%2Fwyfs02%2FM01%2F73%2F3F%2FwKioL1X4zfyRH-yTAABu41grSmY047.jpg","text":"今天写了两题Java练习题 题目一有一个抽象类ObjectVolume，如下所示： abstract class ObjectVolume &#123; abstract double getVolume(); //返回物体的体积 &#125; （1）编写球体类，立方体类和圆柱体...","link":"","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"Java学习","slug":"Java学习","count":6,"path":"api/categories/Java学习.json"}],"tags":[{"name":"Java","slug":"Java","count":6,"path":"api/tags/Java.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}