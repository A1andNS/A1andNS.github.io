{"title":"RedHat学习(三)","uid":"c1bcca257a4c5447e48fa38583f46a58","slug":"RedHat学习-三","date":"2020-11-10T10:35:20.000Z","updated":"2020-12-26T14:20:01.000Z","comments":true,"path":"api/articles/RedHat学习-三.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200601211235.jpg","content":"<h2 id=\"Vim文本编辑器\"><a href=\"#Vim文本编辑器\" class=\"headerlink\" title=\"Vim文本编辑器\"></a>Vim文本编辑器</h2><p>之前也是已经使用过了，这个是个Linux上必备应用，基本上市面上的Linux发行版也都已经内置了这个文本编辑器了。vim编辑器有三种模式，分别是命令模式、末行模式、编辑模式。</p>\n<ul>\n<li>命令模式：控制光标移动，可以对文本进行复制、粘贴、删除和查找</li>\n<li>输入模式：可以进行文本写入</li>\n<li>末行模式：保存或退出文档，以及设置编辑环境。</li>\n</ul>\n<p>这个切换也比较简单，在启动vim编辑器时，默认时处于命令模式，而我们要切换到命令模式就只需要输入a、i、o中的任意一个就好了。a是进在光标的后一位进入编辑模式，i是在当前光标处进入编辑模式，o是另起一行进入编辑模式。</p>\n<p>下面再看看vim中的常用命令：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dd</td>\n<td>删除（剪切）光标所在整行</td>\n</tr>\n<tr>\n<td>5dd</td>\n<td>删除（剪切）光标开始的5行</td>\n</tr>\n<tr>\n<td>yy</td>\n<td>复制光标所在整行</td>\n</tr>\n<tr>\n<td>5yy</td>\n<td>复制光标开始的5行</td>\n</tr>\n<tr>\n<td>n</td>\n<td>显示搜索命令定位到的下一个字符串</td>\n</tr>\n<tr>\n<td>N</td>\n<td>显示搜索命令定位到的上一个字符串</td>\n</tr>\n<tr>\n<td>u</td>\n<td>撤销上一步的操作</td>\n</tr>\n<tr>\n<td>p</td>\n<td>将之前删除或复制的数据粘贴到光标的后面</td>\n</tr>\n</tbody></table>\n<p>末行模式中可以使用的命令</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:w</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>:q</td>\n<td>退出</td>\n</tr>\n<tr>\n<td>:q!</td>\n<td>强制退出</td>\n</tr>\n<tr>\n<td>:wq!</td>\n<td>强制保存退出</td>\n</tr>\n<tr>\n<td>:set nu</td>\n<td>显示行号</td>\n</tr>\n<tr>\n<td>:set nonu</td>\n<td>不显示行号</td>\n</tr>\n<tr>\n<td>:命令</td>\n<td>执行此命令</td>\n</tr>\n<tr>\n<td>:整数</td>\n<td>跳转到该行</td>\n</tr>\n</tbody></table>\n<p>直接上手试一下，就知道如何简单使用vim了。</p>\n<p>网卡配置文件很有趣，在RHEL7之前的系统都是用eth前缀的文件来存储配置文件。而在RHEL7后改用了ifcfg开头的文件。例如我通过查询ifconfig，得到我的网卡名称为<code>eno16777728</code>，所以我的配置文件名称<code>ifcfg-eno16777728</code>，而配置文件位置没有变在<code>/etc/sysconfig/network-scripts</code></p>\n<h2 id=\"Shell脚本\"><a href=\"#Shell脚本\" class=\"headerlink\" title=\"Shell脚本\"></a>Shell脚本</h2><p>Shell是用户与Linux系统内部的通信媒介。它的工作方式有两种：交互式和批处理。</p>\n<ul>\n<li>交互式：用户没输入一条命令就立即执行</li>\n<li>批处理：由用户事先编写好一个完整的Shell脚本，Shell会一次性执行脚本中诸多的命令。</li>\n</ul>\n<p>那么Shell脚本要这么编写呢？一个简单的Shell脚本，就是把Linux命令按照顺序写入到一个文件中。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token comment\">#this is the test</span>\n<span class=\"token builtin class-name\">pwd</span>\n<span class=\"token function\">ls</span> -al<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>练习一下vim，用vim来写一个这个简单shell。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@linuxprobe ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># sh test.sh </span>\n/home/ctf\ntotal <span class=\"token number\">4</span>\ndrwxr-xr-x. <span class=\"token number\">2</span> root root <span class=\"token number\">20</span> Nov <span class=\"token number\">10</span> <span class=\"token number\">19</span>:33 <span class=\"token builtin class-name\">.</span>\ndrwxr-xr-x. <span class=\"token number\">4</span> root root <span class=\"token number\">30</span> Nov <span class=\"token number\">10</span> <span class=\"token number\">16</span>:39 <span class=\"token punctuation\">..</span>\n-rw-r--r--. <span class=\"token number\">1</span> root root <span class=\"token number\">42</span> Nov <span class=\"token number\">10</span> <span class=\"token number\">19</span>:33 test.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果直接运行一下test.sh脚本,权限不够，那是因为没有添加运行权限。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@linuxprobe ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./test.sh</span>\nbash: ./test.sh: Permission denied\n<span class=\"token punctuation\">[</span>root@linuxprobe ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls -l</span>\ntotal <span class=\"token number\">4</span>\n-rw-r--r--. <span class=\"token number\">1</span> root root <span class=\"token number\">42</span> Nov <span class=\"token number\">10</span> <span class=\"token number\">19</span>:33 test.sh\n<span class=\"token punctuation\">[</span>root@linuxprobe ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># chmod +x test.sh </span>\n<span class=\"token punctuation\">[</span>root@linuxprobe ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># ls -l</span>\ntotal <span class=\"token number\">4</span>\n-rwxr-xr-x. <span class=\"token number\">1</span> root root <span class=\"token number\">42</span> Nov <span class=\"token number\">10</span> <span class=\"token number\">19</span>:33 test.sh\n<span class=\"token punctuation\">[</span>root@linuxprobe ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># ./test.sh </span>\n/home/ctf\ntotal <span class=\"token number\">4</span>\ndrwxr-xr-x. <span class=\"token number\">2</span> root root <span class=\"token number\">20</span> Nov <span class=\"token number\">10</span> <span class=\"token number\">19</span>:33 <span class=\"token builtin class-name\">.</span>\ndrwxr-xr-x. <span class=\"token number\">4</span> root root <span class=\"token number\">30</span> Nov <span class=\"token number\">10</span> <span class=\"token number\">16</span>:39 <span class=\"token punctuation\">..</span>\n-rwxr-xr-x. <span class=\"token number\">1</span> root root <span class=\"token number\">42</span> Nov <span class=\"token number\">10</span> <span class=\"token number\">19</span>:33 test.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加了运行权限后就可以正常执行了。</p>\n<h3 id=\"获取用户参数\"><a href=\"#获取用户参数\" class=\"headerlink\" title=\"获取用户参数\"></a>获取用户参数</h3><p>在运行一些shell脚本的时候需要去接受一些来自用户的输入。</p>\n<p>例如</p>\n<pre class=\"line-numbers language-bahs\" data-language=\"bahs\"><code class=\"language-bahs\">.&#x2F;test.sh str1 str2 str3 str4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>那么一个shell脚本如何来获取到这些输入呢？</p>\n<p>这就要使用到一些内置变量了。</p>\n<ul>\n<li><code>$*</code>:所有用户输入参数</li>\n<li><code>$?</code>:上次命令执行的返回值</li>\n<li><code>$1</code>、<code>$2</code>……:分别对应第N个位置的参数值</li>\n<li><code>$#</code>:参数的总个数</li>\n</ul>\n<h3 id=\"条件测试语法\"><a href=\"#条件测试语法\" class=\"headerlink\" title=\"条件测试语法\"></a>条件测试语法</h3><p>条件测试语句可以分为4种:</p>\n<ul>\n<li>文件测试语句</li>\n<li>逻辑测试语句</li>\n<li>整数值比较语句</li>\n<li>字符串比较语句</li>\n</ul>\n<p>格式是：<code>[ 条件表达式 ]</code></p>\n<p><strong>必须注意的是空格不能省略</strong></p>\n<h3 id=\"文件测试\"><a href=\"#文件测试\" class=\"headerlink\" title=\"文件测试\"></a>文件测试</h3><p>看看文件测试的常用参数</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-d</td>\n<td>测试文件是否为目录类型</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>测试文件是否存在</td>\n</tr>\n<tr>\n<td>-f</td>\n<td>判断是否为一般文件</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>测试当前用户是否有权限读取</td>\n</tr>\n<tr>\n<td>-w</td>\n<td>测试当前用户是否有权限写入</td>\n</tr>\n<tr>\n<td>-x</td>\n<td>测试当前用户是否有权限执行</td>\n</tr>\n</tbody></table>\n<p>[ -e /etc/passwd ]如果文件/etc/passwd存在就会返回0，否则就返回任意一个非零的值。</p>\n<p>逻辑表达式[ $USER = root ]，如果当前用户是root就会返回0，否则就是返回一个1。</p>\n<p>其实就是一个要点，这个条件判断式，成立就返回0，不成立就返回1</p>\n<h3 id=\"整数比较\"><a href=\"#整数比较\" class=\"headerlink\" title=\"整数比较\"></a>整数比较</h3><p>整数比较运算符，这个不用&gt;等符号来表示大于等关系，因为这些符号在前面的管道符里已经被使用了，避免出现歧义。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-eq</td>\n<td>是否等于</td>\n</tr>\n<tr>\n<td>-ne</td>\n<td>是否不等于</td>\n</tr>\n<tr>\n<td>-gt</td>\n<td>是否大于</td>\n</tr>\n<tr>\n<td>-lt</td>\n<td>是否小于</td>\n</tr>\n<tr>\n<td>-le</td>\n<td>是否等于或小于</td>\n</tr>\n<tr>\n<td>-ge</td>\n<td>是都大于或等于</td>\n</tr>\n</tbody></table>\n<p>[ 10 -eq 10 ]的结果是0</p>\n<p>至于与&amp;&amp;和||结合使用，例如格式是<code>条件判断 &amp;&amp; echo &quot;yes&quot;</code>或<code>条件判断 || echo &quot;yes&quot;</code> </p>\n<p>&amp;&amp;的是条件成立就执行右边，也就是左边执行成功，就执行右边</p>\n<p>||的是条件不成立就执行右边，也就是左边执行失败，就执行右边</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@a1andns ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># mem=`free -m | grep Mem: | awk '&#123;print $4&#125;'` &amp;&amp; [ $mem -lt 1024 ] &amp;&amp; echo \"Insufficient Memory\"</span>\nInsufficient Memory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>综合利用，查询内存用量中剩余内存，并且和1024比较，如果小于1024，输出内存不足。</p>\n<h3 id=\"字符串比较\"><a href=\"#字符串比较\" class=\"headerlink\" title=\"字符串比较\"></a>字符串比较</h3><p>字符串比较语句用于判断测试字符串是否是空值，或两个字符串是否相同。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>=</td>\n<td>比较字符串内容是否相同</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>比较字符串内容是都不同</td>\n</tr>\n<tr>\n<td>-z</td>\n<td>判断字符串内容是否为空</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@a1andns ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># [ -z $String ]</span>\n<span class=\"token punctuation\">[</span>root@a1andns ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo $?</span>\n<span class=\"token number\">0</span>\n<span class=\"token punctuation\">[</span>root@a1andns ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo $LANG</span>\nen_US.utf8\n<span class=\"token punctuation\">[</span>root@a1andns ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># [ $LANG != \"en_US\" ] &amp;&amp; echo \"not en.US\"</span>\nnot en.US\n<span class=\"token punctuation\">[</span>root@a1andns ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># [ $LANG = \"en_US.utf8\" ] &amp;&amp; echo \"this is en.US.uft8\"</span>\nthis is en.US.uft8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"流程控制语句\"><a href=\"#流程控制语句\" class=\"headerlink\" title=\"流程控制语句\"></a>流程控制语句</h3><p>简单地把命令写入肯定是不够的，那么就需要一些别的模块辅助，所以就可以看看流程控制语句了。</p>\n<h3 id=\"if条件测试语句\"><a href=\"#if条件测试语句\" class=\"headerlink\" title=\"if条件测试语句\"></a>if条件测试语句</h3><p>if条件测试语句可以分为单分支结构、双分支结构、多分支结构。</p>\n<p>单分支结构由if、then、fi关键词组成。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token assign-left variable\">DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/media/cdrom\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> -e <span class=\"token variable\">$DIR</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token function\">mkdir</span> -p <span class=\"token variable\">$DIR</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>双分支结构由if、then、else、fi关键词组成</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token function\">ping</span> -c <span class=\"token number\">3</span> -i <span class=\"token number\">0.2</span> -W <span class=\"token number\">3</span> <span class=\"token variable\">$1</span> $<span class=\"token operator\">></span> /dev/null\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Host <span class=\"token variable\">$1</span> is On-line.\"</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Host <span class=\"token variable\">$1</span> is Off-line.\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>多分支结构由if、then、else、elif、fi关键词组成。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"Enter The Score:\"</span> SCORE\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$SCORE</span> -ge <span class=\"token number\">85</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$SCORE</span> -le <span class=\"token number\">100</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$SCORE</span> is Excellent\"</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$SCORE</span> -ge <span class=\"token number\">70</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$SCORE</span> -le <span class=\"token number\">84</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$SCORE</span> is Pass\"</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$SCORE</span> is Fail\"</span>\n<span class=\"token keyword\">fi</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"for条件循环语句\"><a href=\"#for条件循环语句\" class=\"headerlink\" title=\"for条件循环语句\"></a>for条件循环语句</h3><p>for语句允许脚本一次性读取多个信息，然后逐一对信息进行操作处理。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"Enter the users password:\"</span> PASSWD\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">UNAME</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> users.txt<span class=\"token variable\">`</span></span>\n<span class=\"token keyword\">do</span>\n<span class=\"token function\">id</span> UNAME $<span class=\"token operator\">></span> /dev/null\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Already exists\"</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token function\">useradd</span> <span class=\"token variable\">$UNAME</span> <span class=\"token operator\">&amp;></span> /dev/null\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$PASSWD</span>\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">passwd</span> --stdin <span class=\"token variable\">$UNAME</span> <span class=\"token operator\">&amp;></span> /dev/null\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> -eq <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$UNAME</span> , Create success\"</span>\n<span class=\"token keyword\">else</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$UNAME</span> , Create failture\"</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"while条件循环语句\"><a href=\"#while条件循环语句\" class=\"headerlink\" title=\"while条件循环语句\"></a>while条件循环语句</h3><p>while条件循环语句是一种让脚本根据某些条件重复执行命令的语句，它的循环结构往往在执行前并不确定最终执行次数。</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token assign-left variable\">PRICE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">expr</span> <span class=\"token environment constant\">$RANDOM</span> % <span class=\"token number\">1000</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">TIMES</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"商品实际价格为0-999之间，猜猜看是多少？\"</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">do</span>\n<span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"请输入你猜测的价格类目：\"</span> INT\n<span class=\"token builtin class-name\">let</span> TIMES++\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$INT</span> -eq <span class=\"token variable\">$PRICE</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"恭喜你答对了，实际价格是<span class=\"token variable\">$PRICE</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"您总共猜测了<span class=\"token variable\">$TIMES</span>次\"</span>\n<span class=\"token builtin class-name\">exit</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">elif</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$INT</span> -gt <span class=\"token variable\">$PRICE</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"太高了\"</span>\n<span class=\"token keyword\">else</span> \n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"太低了\"</span>\n<span class=\"token keyword\">fi</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token comment\">#格式</span>\n<span class=\"token keyword\">while</span> 条件测试语句\n<span class=\"token keyword\">do</span>\n命令序列\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"case条件测试语句\"><a href=\"#case条件测试语句\" class=\"headerlink\" title=\"case条件测试语句\"></a>case条件测试语句</h3><p>类似于c的switch语句，语法结构如下：</p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"><span class=\"token keyword\">case</span> 变量 <span class=\"token keyword\">in</span>\nmode1）\n\t命令序列1\n\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\nmode1<span class=\"token punctuation\">)</span>\n\t命令序列2\n\t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n*<span class=\"token punctuation\">)</span>\n\t默认命令序列\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"计划任务服务程序\"><a href=\"#计划任务服务程序\" class=\"headerlink\" title=\"计划任务服务程序\"></a>计划任务服务程序</h2><p>计划任务是是实现运维自动化的重要工具，计划任务分为一次性计划任务与长期性计划任务</p>\n<ul>\n<li>一次性计划任务：今晚11点30分开启网站服务</li>\n<li>长期型计划任务：每周一的凌晨3点3分把/home/wwwroot目录打包备份为backup.tar.gz</li>\n</ul>\n<p>写一次性计划任务使用at命令来设置</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">at 23:30\nat&gt; systemctl restart httpd\n#Use Ctrl+D to complete this setting\n#OR\necho “systemctl restart httpd” | at 23:30\n#查看一次性任务计划列表\nat -l\n#删除一个一次性计划任务,&quot;3&quot;为一次计划任务的序号\natrm 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>长期任务计划的创建、编辑计划任务的命令为crontab -e，而查看当前计划任务的命令为crontab -l</p>\n<p>格式为分、时、日、月、星期 命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">crontab -e\n25 3 * * 1,3,5 &#x2F;usr&#x2F;bin&#x2F;tar -czvf backup.tar.gz &#x2F;home&#x2F;wwwroot\ncrontab -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>其中<code>,</code>用来分别多个时间段，例如1,3,5表示了星期一、三、五，除此之外还可以使用<code>-</code>来表示一个时间段，例如在日字段写12-15,就是表示12日到15日。</p>\n<p><strong>注意点</strong></p>\n<p><em><em>crond服务的配置参数，可以像shell脚本一样使用<code>#</code>来写注释信息，这样就可以在日后快熟回顾这段命令的作用。还有就是在分字段，不能使用空或者</em>,因为分钟无时不在，如果使用空，那么定时任务恐怕永远不会执行，而使用*的话，一直在执行。日与星期也不能同时使用，因为这样日和星期是有可能发生冲突的。</em>*</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>《Linux就该这么学》</p>\n","text":"Vim文本编辑器之前也是已经使用过了，这个是个Linux上必备应用，基本上市面上的Linux发行版也都已经内置了这个文本编辑器了。vim编辑器有三种模式，分别是命令模式、末行模式、编辑模式。 命令模式：控制光标移动，可以对文本进行复制、粘贴、删除和查找 输入模式：可以进行文本写入...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Linux学习","slug":"Linux学习","count":7,"path":"api/categories/Linux学习.json"}],"tags":[{"name":"Linux","slug":"Linux","count":11,"path":"api/tags/Linux.json"},{"name":"Redhat","slug":"Redhat","count":5,"path":"api/tags/Redhat.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vim%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8\"><span class=\"toc-text\">Vim文本编辑器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Shell%E8%84%9A%E6%9C%AC\"><span class=\"toc-text\">Shell脚本</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">获取用户参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">条件测试语法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">文件测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B4%E6%95%B0%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">整数比较</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83\"><span class=\"toc-text\">字符串比较</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">流程控制语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#if%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">if条件测试语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#for%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">for条件循环语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#while%E6%9D%A1%E4%BB%B6%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">while条件循环语句</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#case%E6%9D%A1%E4%BB%B6%E6%B5%8B%E8%AF%95%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">case条件测试语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">计划任务服务程序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"RedHat学习(四)","uid":"fd1d8d0cd37eabf9d916bbc0522132cf","slug":"RedHat学习-四","date":"2020-11-16T05:37:25.000Z","updated":"2020-12-26T14:20:10.000Z","comments":true,"path":"api/articles/RedHat学习-四.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200601211235.jpg","text":"前言Redhat系列继续，Linux冲鸭！ 用户身份与文件权限前面说过了Linux是一个多用户、多任务的操作系统，具有很好的稳定性和安全性。而不用用户之间的文件，就有一个ACL问题了，也就是访问控制，那么就涉及到文件属性中的权限，谁有权力去读取和修改它。在Linux系统中UID就...","link":"","photos":[],"count_time":{"symbolsCount":759,"symbolsTime":"1 mins."},"categories":[{"name":"Linux学习","slug":"Linux学习","count":7,"path":"api/categories/Linux学习.json"}],"tags":[{"name":"Linux","slug":"Linux","count":11,"path":"api/tags/Linux.json"},{"name":"Redhat","slug":"Redhat","count":5,"path":"api/tags/Redhat.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"BUUOJ刷题2020119-15","uid":"1f9ed3837271c9618e2c89b56e8e0ee6","slug":"BUUOJ刷题2020119-15","date":"2020-11-09T09:20:59.000Z","updated":"2021-06-28T14:58:01.890Z","comments":true,"path":"api/articles/BUUOJ刷题2020119-15.json","keywords":"A1andNS","cover":"https://gitee.com/A1andNS/blogimage/raw/master/img/3.png","text":"[BJDCTF2020]Mark loves cat考点：git泄露、代码审计、变量覆盖 只发现最下面有一个交互点，这是一个提交留言的交互点的样子，提交试一下，发现会在GET传参message。 但是有一个奇怪的地方，index.html?message=1111111 但是这个...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}