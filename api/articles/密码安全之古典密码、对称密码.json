{"title":"密码安全之古典密码、对称密码","uid":"dab54fd2655655c7faa2b5033cd1ff05","slug":"密码安全之古典密码、对称密码","date":"2020-03-09T07:56:23.000Z","updated":"2020-04-13T00:47:04.000Z","comments":true,"path":"api/articles/密码安全之古典密码、对称密码.json","keywords":"A1andNS","cover":null,"content":"<p>阅读前推荐观看我之前做的分类图URL：<code>https://blog.csdn.net/qq_26139045/article/details/103113818</code></p>\n<h2 id=\"密码算法\"><a href=\"#密码算法\" class=\"headerlink\" title=\"密码算法\"></a>密码算法</h2><p>密码学可以分为古典密码学和现代密码学。其中现代密码学的出现于一个熟悉的人脱不了关系，他就是香农了，绝对的大佬。</p>\n<p>古典密码于现代密码的区别之处，我认为就是古典密码是依赖于加密算法的精心设计和保密性，而现代密码这是公开了加密所用的算法，注重的是对密钥的保密。两者的侧重点不同，一个在算法的保密上，另一个则是在密钥的保密上。而将现代密码在以密钥细分就会分为，对称加密和非对称加密。所谓的对称加密，就是加密时和解密时的密钥是一样的；而非对称加密则是加密密钥和解密密钥不同，在我看来就目前而言，似乎非对称加密会使用更多，最近经常看到的RSA就是一种非对称加密方法，只可惜还没有搞明白RSA。</p>\n<h2 id=\"古典密码\"><a href=\"#古典密码\" class=\"headerlink\" title=\"古典密码\"></a>古典密码</h2><h3 id=\"置换密码\"><a href=\"#置换密码\" class=\"headerlink\" title=\"置换密码\"></a>置换密码</h3><p>所谓置换密码真的就只是置换，把明文通过一些方法排列，然后按你想要的方向或者顺序读出，就成为一个密文。这是一种比较简单的加密方式。正是由于这种方法过于简单，所以它禁不起穷举的，是可以进行爆破的。置换密码可能是先排矩阵再按列读取，也有可能会使用密钥，但是这里的密钥只是为了助记，与现代密码的密钥大不相同。通过密钥去除重复字母后，按字典序编号，然后按编号读出相应的列，实现加密。</p>\n<p>例如：明文：this is transposition cipher</p>\n<p>密钥：password</p>\n<p>数字序列：4167352</p>\n<p>密文：hath ts iiphtripsocin iessor</p>\n<p>注意！！！密文要写的与明文格式相同。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">t</th>\n<th align=\"center\">h</th>\n<th align=\"center\">i</th>\n<th align=\"center\">s</th>\n<th align=\"center\">j</th>\n<th align=\"center\">s</th>\n<th align=\"center\">t</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r</td>\n<td align=\"center\">a</td>\n<td align=\"center\">n</td>\n<td align=\"center\">s</td>\n<td align=\"center\">p</td>\n<td align=\"center\">o</td>\n<td align=\"center\">s</td>\n</tr>\n<tr>\n<td align=\"center\">i</td>\n<td align=\"center\">t</td>\n<td align=\"center\">i</td>\n<td align=\"center\">o</td>\n<td align=\"center\">n</td>\n<td align=\"center\">e</td>\n<td align=\"center\">i</td>\n</tr>\n<tr>\n<td align=\"center\">p</td>\n<td align=\"center\">h</td>\n<td align=\"center\">e</td>\n<td align=\"center\">r</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"替代密码\"><a href=\"#替代密码\" class=\"headerlink\" title=\"替代密码\"></a>替代密码</h3><p>说到替代密码，大家最熟悉的可能就是凯撒密码。替代密码是利用了替代法进行加密的，通过将明文中的字符使用其他的字符替代后形成密文。</p>\n<p>它还有很多类型，比如单表替代密码，多明码替代密码，多字母替代密码，多表替代密码。凯撒加密就是单表替代密码了，所有的字母都是相同的偏移量，所以凯撒是可以被轻易的破解的，直接暴力破解，CTFCracker就可以实现凯撒爆破。而多表替代密码就提高了破解的难度，像维吉尼亚密码、希尔密码，一次一密钥密码、Playfair密码等等，由于使用了多个替换表，情况更加复杂，爆破难度就蹭蹭蹭上去。</p>\n<p>在我看来维吉尼亚其实就是凯撒的加强版，只不过是每个字符都有自己独特的偏移量了，不在如凯撒一样统一偏移量，所以对于破解而言就提高难度了。</p>\n<p>加密：Ci=(Mi+Ki)mod26</p>\n<p>解密就是i一个逆过程，Mi=(Ki-Ci)mod26</p>\n<p>例如密钥可能为：cipher即（3，9，16，8，5，18）</p>\n<p>明文 :this is substitution cipher</p>\n<p>密文：vpxz mj ucqzxzvcipse eqeoii</p>\n<h2 id=\"对称密码\"><a href=\"#对称密码\" class=\"headerlink\" title=\"对称密码\"></a>对称密码</h2><p>对称密码可以分为分组密码和序列密码。分组密码是以一个固定大小作为每次处理的基本单元，而序列密码则是以一个单位元素（通常是一个字母或一个比特）作为基本的处理单元。当分组长度等于单位长度的是否，分组密码也就是序列密码，所以你可以这样理解，序列密码是分组密码中特殊的一种情况，即分组长=单位长。</p>\n<p>分组密码的常用工作模式：</p>\n<h3 id=\"1、电子密码本（ECB）\"><a href=\"#1、电子密码本（ECB）\" class=\"headerlink\" title=\"1、电子密码本（ECB）\"></a>1、电子密码本（ECB）</h3><p>最简单的加密模式即电子密码本模式，将加密的消息按照密码块的块大小分为数块，对每一块进行独立加密。</p>\n<p>优点：实现简单、效率高；有利于并行计算；误差不会被传送。</p>\n<p>缺点：不能隐藏明文的模式，相同的明文会产生相同的密文；可能对明文进行主动攻击，比如说黑客可以通过获取账号对应的密文段，进行密文段替换，成功实施ECB重放攻击</p>\n<h3 id=\"2、密码块链接（CBC）\"><a href=\"#2、密码块链接（CBC）\" class=\"headerlink\" title=\"2、密码块链接（CBC）\"></a>2、密码块链接（CBC）</h3><p>在CBC模式下，每个密文块先要与前一个密文进行异或，然后再加密，所以它高度依赖于上一个密文块，这就对数据完整性要求很高。因为第一个明文没有上一个密文，所以就要引入一个初始化矢量（IV）。</p>\n<p>优点：不易被主动攻击，这也是得益于它的这种像串行的机密模式，安全性高于ECB，适合传输长度较长的报文，是目前SSL和IPSec安全协议的应用标准。</p>\n<p>缺点：不利于并行计算；有误差传输效应；需要维护初始化矢量IV。</p>\n<h3 id=\"3、密文反馈（CFB）\"><a href=\"#3、密文反馈（CFB）\" class=\"headerlink\" title=\"3、密文反馈（CFB）\"></a>3、密文反馈（CFB）</h3><p>密文反馈模式我觉得和CBC非常相似，区别上我觉得就是，一个先异或，一个后异或，它把上一个密文进行分组密码加密，然后再和明文进行异或。与CBC一样，也需要一开始引入一个初始化矢量。</p>\n<p>优点：隐藏了明文模式；分组密码转化为流模式，增强了安全强度；可以及时加密传送小于分组的数据。</p>\n<p>缺点：不利于并行运算；存在误差传送效应，即一个明文单元受损可以影响多个单元；需要维护一个IV。</p>\n<p>分组密码包括DES、IDEA、SAFER、Blowfish和Skipjack等等，最新国际标准算法是AES，以前使用的是DES/3DES算法。分组密码的一个核心变换——Feistel结构。大多数分组密码的结构本质上都是基于Feistel网格结构，所以这是一个很重要的地方。</p>\n<p>Feistel网络的安全性与一下参数有关。</p>\n<p>（1）分组大小</p>\n<p>（2）密钥大小</p>\n<p>（3）子密钥产生算法：该算法复杂性越高，则密码分析越困难</p>\n<p>（4）轮数n：单轮结构远不足以保证安全，一般轮数选取16</p>\n<p>（5）轮函数F：结构越复杂越难分析</p>\n<h3 id=\"分组加密算法DES\"><a href=\"#分组加密算法DES\" class=\"headerlink\" title=\"分组加密算法DES\"></a>分组加密算法DES</h3><p>DES算法为密码体制中的对称密码体制，又被称为美国数据加密标准，是1972年美国IBM公司研制的对称密码体制加密算法。明文按64bit进行分组，密钥长64bit。</p>\n<p>DES算法具有极高的安全性，到日前为止，除了用穷举搜索法对DES算法进行攻击外，还没有发现更有效的办法。但是随着计算处理能力的提升，为了克服DES密钥空间小的缺陷，研究人员提出了三重DES的变形方式，即采用了两个密钥共128bit长度，仅加大了穷举密钥的计算复杂度。</p>\n<h3 id=\"分组加密标准AES\"><a href=\"#分组加密标准AES\" class=\"headerlink\" title=\"分组加密标准AES\"></a>分组加密标准AES</h3><p>AES算法基于排列和置换运算。排列是对数据重新进行安排，置换是将一个数据单元替换为另一个。AES使用几种不同的方法来执行排列和置换运算。AES是一个迭代的、对称的密钥分组的密码，它可以使用128、192、256位密钥，并且通过128bit分组加密或解密数据，既然是对称加密，所以它使用相同的密钥进行加密解密。迭代加密时就要使用一个循环结构，在循环中重复置换和替换输入数据。</p>\n<h3 id=\"序列密码\"><a href=\"#序列密码\" class=\"headerlink\" title=\"序列密码\"></a>序列密码</h3><p>序列密码是一个随时间变化的加密变换，具有转换速度快、低错误传播的有点，硬件实现电路简单，缺点是有低扩散、插入或修改等不敏感性。<br>目前序列密码研究成果没有完全公开，因为序列密码更多应用于外交和军事部门等机密部门。目前公开的序列密码算法有RC4、SEAL等。 说到序列密码必须说一次一密，如果序列密码所使用的是真正随机方式的、与消息流长度相同的密钥流，那么这个序列密码就是一次一密的密码体制（One-Time Password）。</p>\n<p>至于序列密码加密和解密，加密过程大概就是密钥K通过密钥流生成器生成密钥流，使用密钥流和明文进行异或运算得到密文；解密过程这是使用密钥K通过密钥生成器生成密钥流，在用密钥流和密文进行异或得到明文。</p>\n<p>注：密钥流生成器的核心是一个伪随机数发生器，而密钥K为该随机数发生器的种子。应用最广的随机数发生器为线性反馈一位寄存器（LFSR）。当LFSR周期无限长即可形成OTP一次一密系统，OPT是一种理想的安全流密码体制。</p>\n<p>一次一密系统应用目前面临的挑战：</p>\n<p>1、密钥配送问题，OTP的密钥长度和明文长度相同，若能把密钥安全有效地发生出去，那还加什么密呢？？</p>\n<p>2、密钥的保存问题，OTP把保存明文问题转化为保存于明文等长的密钥问题</p>\n<p>3、密钥的复用：OTP不能使用过去用过的随机比特序列，否则就会泄露之前的通讯内容，这也叫前向安全。</p>\n<p>4、密钥的同步，明文很长的时候，密钥也会一样长，在同步密钥的过程中一旦出现错误，后续通讯就无法解密，有时也被称为后向安全。</p>\n<p>5、密钥的生成问题，OTP需要生成大量的随机数，而我们目前只能使用计算机生成伪随机数来暂时替代，凯撒伪随机数终究不是随机数，无法满足需求，而想要无重现性的真正随机数生成的难度极大。</p>\n<p>流密码的安全性主要依赖于主控密钥K的保密性和密钥流发生器的可靠性。密钥序列产生算法最为关键，其生成的密钥必须具备伪随机性，至于什么是伪随机性，就留给大家自行百度了。序列密码的安全性确实高，加密速度也快，实时性好，就是过于要求同步，要实现严格同步，需要付出很高的代价。</p>\n<h3 id=\"RC4序列密码\"><a href=\"#RC4序列密码\" class=\"headerlink\" title=\"RC4序列密码\"></a>RC4序列密码</h3><p>RC4由RSA Security的Ron Rivest在1987年设计的一种高速简洁的流密码，被广泛用于常用协议，比如无线网络安全算法、SSL/TLS、HTTPS等安全协议。RC4加密分为两步：</p>\n<p>1、Key-Scheduling Algorithm(KSA）密钥调度算法，采用可变长度的加密密钥产生密钥流生成器的初始状态。</p>\n<p>2、Pseudo-Random Generation Algorithm（PRGA）伪随机子密码生成算法，根据初始状态生成密码流，并于明文进行相异或产生密文。</p>\n<p>RC4采用的是XOR运算，一旦子密码序列出现了重复，密文就有可能被破解。存在部分弱密钥，是子密序列在不到100B内就出现重复。那么就可能在10万字节内就发生完全重复风险。所以在使用RC4算法时候，必须对加密密钥进行安全测试，避免出现弱密钥问题。</p>\n","text":"阅读前推荐观看我之前做的分类图URL：https://blog.csdn.net/qq_26139045/article/details/103113818 密码算法密码学可以分为古典密码学和现代密码学。其中现代密码学的出现于一个熟悉的人脱不了关系，他就是香农了，绝对的大佬。 古...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":36,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"Crypto","slug":"Crypto","count":4,"path":"api/tags/Crypto.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">密码算法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%A4%E5%85%B8%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">古典密码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BD%AE%E6%8D%A2%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">置换密码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%BF%E4%BB%A3%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">替代密码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">对称密码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E7%94%B5%E5%AD%90%E5%AF%86%E7%A0%81%E6%9C%AC%EF%BC%88ECB%EF%BC%89\"><span class=\"toc-text\">1、电子密码本（ECB）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AF%86%E7%A0%81%E5%9D%97%E9%93%BE%E6%8E%A5%EF%BC%88CBC%EF%BC%89\"><span class=\"toc-text\">2、密码块链接（CBC）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AF%86%E6%96%87%E5%8F%8D%E9%A6%88%EF%BC%88CFB%EF%BC%89\"><span class=\"toc-text\">3、密文反馈（CFB）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95DES\"><span class=\"toc-text\">分组加密算法DES</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%BB%84%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86AES\"><span class=\"toc-text\">分组加密标准AES</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">序列密码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RC4%E5%BA%8F%E5%88%97%E5%AF%86%E7%A0%81\"><span class=\"toc-text\">RC4序列密码</span></a></li></ol></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"古典密码与现代密码的算法分类结构逻辑图","uid":"f0da9c453120872f00a6890b00f56e44","slug":"古典密码与现代密码的算法分类结构逻辑图","date":"2020-03-09T07:57:26.000Z","updated":"2020-09-06T01:05:14.000Z","comments":true,"path":"api/articles/古典密码与现代密码的算法分类结构逻辑图.json","keywords":"A1andNS","cover":[],"text":"自己使用百度脑图制作的一个分类图，在这里安利一下，这东西挺好用的，重点是免费，可以用来画思维导图等等，良心啊！！！附上URL：https://naotu.baidu.com/感兴趣的朋友可以去体验一下，效率整理类好工具。下面上图了： ","link":"","photos":[],"count_time":{"symbolsCount":117,"symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":36,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"Crypto","slug":"Crypto","count":4,"path":"api/tags/Crypto.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"密码安全之公钥密码、散列算法、数字签名","uid":"e2abbcc65a824b1fa9ae0ab1c5718bf6","slug":"密码安全之公钥密码、散列算法、数字签名","date":"2020-03-09T07:54:15.000Z","updated":"2020-04-13T00:47:20.000Z","comments":true,"path":"api/articles/密码安全之公钥密码、散列算法、数字签名.json","keywords":"A1andNS","cover":null,"text":"密码安全之公钥密码、散列算法、数字签名上期文章密码安全之古典密码、对称密码链接：https://blog.csdn.net/qq_26139045/article/details/103153172密码开篇文章古典密码与现代密码的算法分类结构逻辑图：https://blog.cs...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":36,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"Crypto","slug":"Crypto","count":4,"path":"api/tags/Crypto.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}