{"title":"Docker简单入门","uid":"804c228705dc2bd8721e58f306185d36","slug":"Docker简单入门","date":"2021-01-21T05:36:40.000Z","updated":"2021-01-21T12:31:51.000Z","comments":true,"path":"api/articles/Docker简单入门.json","keywords":"A1andNS","cover":null,"content":"<h2 id=\"what-is-Docker\"><a href=\"#what-is-Docker\" class=\"headerlink\" title=\"what is Docker?\"></a>what is Docker?</h2><p>Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。比如，你在本地用Python开发网站后台，开发测试完成后，就可以将Python3及其依赖包、Flask及其各种插件、Mysql、Nginx等打包到一个容器中，然后部署到任意你想部署到的环境。</p>\n<h2 id=\"Docker的三个概念\"><a href=\"#Docker的三个概念\" class=\"headerlink\" title=\"Docker的三个概念\"></a>Docker的三个概念</h2><ul>\n<li><p>镜像（Image）：类似于虚拟机中的镜像，是一个包含有文件系统的面向Docker引擎的只读模板。任何应用程序运行都需要环境，而镜像就是用来提供这种运行环境的。例如一个Ubuntu镜像就是一个包含Ubuntu操作系统环境的模板，同理在该镜像上装上Apache软件，就可以称为Apache镜像。</p>\n</li>\n<li><p>容器（Container）：类似于一个轻量级的沙盒，可以将其看作一个极简的Linux系统环境（包括root权限、进程空间、用户空间和网络空间等），以及运行在其中的应用程序。Docker引擎利用容器来运行、隔离各个应用。容器是镜像创建的应用实例，可以创建、启动、停止、删除容器，各个容器之间是是相互隔离的，互不影响。注意：镜像本身是只读的，容器从镜像启动时，Docker在镜像的上层创建一个可写层，镜像本身不变。</p>\n</li>\n<li><p>仓库（Repository）：类似于代码仓库，这里是镜像仓库，是Docker用来集中存放镜像文件的地方。注意与注册服务器（Registry）的区别：注册服务器是存放仓库的地方，一般会有多个仓库；而仓库是存放镜像的地方，一般每个仓库存放一类镜像，每个镜像利用tag进行区分，比如Ubuntu仓库存放有多个版本（12.04、14.04等）的Ubuntu镜像。</p>\n</li>\n</ul>\n<h2 id=\"Docker的安装和卸载\"><a href=\"#Docker的安装和卸载\" class=\"headerlink\" title=\"Docker的安装和卸载\"></a>Docker的安装和卸载</h2><p>Docker可以安装在Windows、Linux、Mac等各个平台上。具体可以查看文档<a href=\"https://link.zhihu.com/?target=https://docs.docker.com/engine/installation/\">Install Docker</a>。安装完成之后，可以查看Docker的版本信息：</p>\n<p>使用命令docker version</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">root@A1andNS-PC:&#x2F;home&#x2F;a1andns# docker version\nClient: Docker Engine - Community\n Version:           19.03.8\n API version:       1.40\n Go version:        go1.14.2\n Git commit:        1b4342cd4c\n Built:             Fri Jun 19 03:26:58 2020\n OS&#x2F;Arch:           linux&#x2F;amd64\n Experimental:      false<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>查看帮助信息使用docker –help</p>\n<h2 id=\"Docker中关于镜像的基本操作\"><a href=\"#Docker中关于镜像的基本操作\" class=\"headerlink\" title=\"Docker中关于镜像的基本操作\"></a>Docker中关于镜像的基本操作</h2><h3 id=\"搜索、获取、运行镜像\"><a href=\"#搜索、获取、运行镜像\" class=\"headerlink\" title=\"搜索、获取、运行镜像\"></a>搜索、获取、运行镜像</h3><p>安装完Docker引擎之后，就可以对镜像进行基本的操作了。</p>\n<p>我们从官方注册服务器（<a href=\"https://link.zhihu.com/?target=https://hub.docker.com\">https://hub.docker.com</a>）的仓库中pull下CentOS的镜像，前边说过，每个仓库会有多个镜像，用tag标示，如果不加tag，默认使用latest镜像:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker search ubuntu #查看Ubuntu镜像是否存在。\ndocker pull ubuntu #利用pull命令获取镜像\ndocker images #查看当前系统中的images信息\ndocker run -it centos:v4 &#x2F;bin&#x2F;bash #运行一个镜像\n在容器中使用exit退出容器。\ndocker ps -a #查看docker中运行的容器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"创建一个镜像\"><a href=\"#创建一个镜像\" class=\"headerlink\" title=\"创建一个镜像\"></a>创建一个镜像</h3><h4 id=\"从已经有的镜像容器中创建\"><a href=\"#从已经有的镜像容器中创建\" class=\"headerlink\" title=\"从已经有的镜像容器中创建\"></a><strong>从已经有的镜像容器中创建</strong></h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">docker commit -m &quot;centos with git&quot; -a &quot;A1andNS&quot; 1ee7ed3d4811 a1andns&#x2F;centos:git #把容器转换为镜像\n其中-m指定说明信息；-a指定用户信息；1ee7ed3d4811代表容器的id；xianhu&#x2F;centos:git指定目标镜像的用户名、仓库名和 tag 信息。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"利用Dockerfile创建\"><a href=\"#利用Dockerfile创建\" class=\"headerlink\" title=\"利用Dockerfile创建\"></a><strong>利用Dockerfile创建</strong></h4><p>Dockerfile可以理解为一种配置文件，用来告诉docker build命令应该执行哪些操作。一个简易的Dockerfile文件如下所示，官方说明：<a href=\"https://link.zhihu.com/?target=https://docs.docker.com/engine/reference/builder/\">Dockerfile reference</a>：</p>\n<pre class=\"line-numbers language-dockerfile\" data-language=\"dockerfile\"><code class=\"language-dockerfile\"># 说明该镜像以哪个镜像为基础\nFROM centos:latest\n\n# 构建者的基本信息\nMAINTAINER a1andns\n\n# 在build这个镜像时执行的操作\nRUN yum update\nRUN yum install -y git\n\n# 拷贝本地文件到镜像中\nCOPY .&#x2F;* &#x2F;usr&#x2F;share&#x2F;gitdir&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后就可以利用Dockerfile结合build命令构建镜像了：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker build -t&#x3D;&quot;xianhu&#x2F;centos:gitdir&quot; .\n-t用来指定新镜像的用户信息、tag等，\n.表示从当前目录寻找Dockerfile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><p>如果想删除容器或者镜像，可以使用rm命令，注意：删除镜像前必须先删除以此镜像为基础的容器。</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">[root@xxx ~]# docker rm container_name&#x2F;container_id\n[root@xxx ~]# docker rmi image_name&#x2F;image_id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"保存镜像\"><a href=\"#保存镜像\" class=\"headerlink\" title=\"保存镜像\"></a>保存镜像</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">[root@xxx ~]# docker save -o centos.tar a1andns&#x2F;centos:git    # 保存镜像, -o也可以是--output<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"加载镜像\"><a href=\"#加载镜像\" class=\"headerlink\" title=\"加载镜像\"></a>加载镜像</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@xxx ~]# docker load -i centos.tar    # 加载镜像, -i也可以是--input<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Docker中关于容器的基本操作\"><a href=\"#Docker中关于容器的基本操作\" class=\"headerlink\" title=\"Docker中关于容器的基本操作\"></a>Docker中关于容器的基本操作</h2><p>基于镜像启动一个容器，即docker run操作。</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">[root@xxx ~]# docker run -it centos:latest &#x2F;bin&#x2F;bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里-it是两个参数：-i和-t。前者表示打开并保持stdout，后者表示分配一个终端（pseudo-tty）。此时如果使用exit退出，则容器的状态处于Exit，而不是后台运行。如果想让容器一直运行，而不是停止，可以使用快捷键 ctrl+p ctrl+q 退出，此时容器的状态为Up。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@xxx ~]# docker run -d centos:latest &#x2F;bin&#x2F;bash -c &quot;while true; do echo hello; sleep 1; done&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>后台运行-d，使这个容器处于后台运行的状态，不会对当前终端产生任何输出，所有的stdout都输出到log，可以使用docker logs container_name/container_id查看。</p>\n<h3 id=\"启动、停止、重启容器命令\"><a href=\"#启动、停止、重启容器命令\" class=\"headerlink\" title=\"启动、停止、重启容器命令\"></a>启动、停止、重启容器命令</h3><pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">[root@xxx ~]# docker start container_name&#x2F;container_id\n[root@xxx ~]# docker stop container_name&#x2F;container_id\n[root@xxx ~]# docker restart container_name&#x2F;container_id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"进入到后台容器\"><a href=\"#进入到后台容器\" class=\"headerlink\" title=\"进入到后台容器\"></a>进入到后台容器</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@xxx ~]# docker attach container_name&#x2F;container_id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">[root@xxx ~]# docker rm container_name&#x2F;container_id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Docker中关于仓库的基本操作\"><a href=\"#Docker中关于仓库的基本操作\" class=\"headerlink\" title=\"Docker中关于仓库的基本操作\"></a>Docker中关于仓库的基本操作</h2><p>Docker官方维护了一个DockerHub的公共仓库，里边包含有很多平时用的较多的镜像。除了从上边下载镜像之外，我们也可以将自己自定义的镜像发布（push）到DockerHub上。</p>\n<p>（1）访问<a href=\"https://link.zhihu.com/?target=https://hub.docker.com/\">https://hub.docker.com/</a>，如果没有账号，需要先注册一个。</p>\n<p>（2）利用命令docker login登录DockerHub，输入用户名、密码即可登录成功：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">[root@xxx ~]# docker login\nLogin with your Docker ID to push and pull images from Docker Hub. If you don&#39;t have a Docker ID, head over to https:&#x2F;&#x2F;hub.docker.com to create one.\nUsername: a1andns\nPassword:\nLogin Succeeded<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>3）将本地的镜像推送到DockerHub上，这里的a1andns要和登录时的username一致：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">[root@xxx ~]# docker push a1andns&#x2F;centos:git    # 成功推送\n[root@xxx ~]# docker push xxx&#x2F;centos:git    # 失败\nThe push refers to a repository [docker.io&#x2F;xxx&#x2F;centos]\nunauthorized: authentication required<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>（4）以后别人就可以从你的仓库中下载合适的镜像了。</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">[root@xxx ~]# docker pull a1andns&#x2F;centos:git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>对应于镜像的两种创建方法，镜像的更新也有两种：</p>\n<ul>\n<li>创建容器之6后做更改，之后commit生成镜像，然后push到仓库中。</li>\n<li>更新Dockerfile。在工作时一般建议这种方式，更简洁明了。</li>\n</ul>\n<h2 id=\"参考材料\"><a href=\"#参考材料\" class=\"headerlink\" title=\"参考材料\"></a>参考材料</h2><p>[1] <a href=\"https://zhuanlan.zhihu.com/p/23599229\">https://zhuanlan.zhihu.com/p/23599229</a></p>\n","text":"what is Docker?Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。比如，你在本地用Python开发网站后台，开发测试完成后，就可以将Python3及其依赖包、Flask及其各种插件、Mysql、Ngi...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"}],"tags":[{"name":"Dcoker","slug":"Dcoker","count":1,"path":"api/tags/Dcoker.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#what-is-Docker\"><span class=\"toc-text\">what is Docker?</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E7%9A%84%E4%B8%89%E4%B8%AA%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">Docker的三个概念</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BD\"><span class=\"toc-text\">Docker的安装和卸载</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E4%B8%AD%E5%85%B3%E4%BA%8E%E9%95%9C%E5%83%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Docker中关于镜像的基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%90%9C%E7%B4%A2%E3%80%81%E8%8E%B7%E5%8F%96%E3%80%81%E8%BF%90%E8%A1%8C%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">搜索、获取、运行镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">创建一个镜像</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%B7%B2%E7%BB%8F%E6%9C%89%E7%9A%84%E9%95%9C%E5%83%8F%E5%AE%B9%E5%99%A8%E4%B8%AD%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">从已经有的镜像容器中创建</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8Dockerfile%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">利用Dockerfile创建</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">删除镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E5%AD%98%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">保存镜像</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E9%95%9C%E5%83%8F\"><span class=\"toc-text\">加载镜像</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E4%B8%AD%E5%85%B3%E4%BA%8E%E5%AE%B9%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Docker中关于容器的基本操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E3%80%81%E5%81%9C%E6%AD%A2%E3%80%81%E9%87%8D%E5%90%AF%E5%AE%B9%E5%99%A8%E5%91%BD%E4%BB%A4\"><span class=\"toc-text\">启动、停止、重启容器命令</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E5%85%A5%E5%88%B0%E5%90%8E%E5%8F%B0%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">进入到后台容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">删除容器</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Docker%E4%B8%AD%E5%85%B3%E4%BA%8E%E4%BB%93%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">Docker中关于仓库的基本操作</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%9D%90%E6%96%99\"><span class=\"toc-text\">参考材料</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"BUUOJ刷题1月第五周","uid":"b68352af34123beef3525b42882db0af","slug":"BUUOJ刷题1月第四周","date":"2021-01-29T15:52:22.000Z","updated":"2021-06-28T14:57:56.601Z","comments":true,"path":"api/articles/BUUOJ刷题1月第四周.json","keywords":"A1andNS","cover":"https://gitee.com/A1andNS/blogimage/raw/master/img/3.png","text":"[BSidesCF 2020]Had a bad day考点：PHP伪协议 这题上来就是一个选择，选择的内容是在url处category参数处，输入一个单引号，引发php报错。由此可以知道url传入的参数会先与”.php”进行拼接，然后使用include()来包含。 这里想要直接...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":13,"path":"api/tags/CTF.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"内网信息收集","uid":"820f7da9564f9f0694c65c741a3b8b11","slug":"内网信息收集","date":"2021-01-18T11:39:46.000Z","updated":"2021-01-21T15:51:27.000Z","comments":true,"path":"api/articles/内网信息收集.json","keywords":"A1andNS","cover":null,"text":"考试结束，继续学习。 内网信息收集概述3个要点：对当前机器角色的判断、对当前机器所处环境的拓扑进行分析和判断、对当前机器所处区域的判断。 角色例如：Web服务器、开发测试服务器、代理服务器、DNS服务器、文件服务器等。 拓扑：大致的内网拓扑结构图。 区域例如：DMZ、办公区、核心...","link":"","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"网络安全","slug":"网络安全","count":3,"path":"api/categories/网络安全.json"}],"tags":[{"name":"内网","slug":"内网","count":2,"path":"api/tags/内网.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}