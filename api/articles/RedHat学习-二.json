{"title":"RedHat学习(二)","uid":"8b3531144a5c5026a6d6f350f14fc7b9","slug":"RedHat学习-二","date":"2020-11-07T11:40:07.000Z","updated":"2020-12-26T14:19:55.000Z","comments":true,"path":"api/articles/RedHat学习-二.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200601211235.jpg","content":"<p>今天继续redhat系列</p>\n<h2 id=\"输入输出重定向\"><a href=\"#输入输出重定向\" class=\"headerlink\" title=\"输入输出重定向\"></a>输入输出重定向</h2><p>输入重定向：把文件导入导命令中来</p>\n<p>输出重定向：把输出写入到指定文件</p>\n<p>如果是先要结合linux命令来使用，一般是输出重定向起到更多作用。而输出重定向可以分为两种，标准输出重定向和错误输出重定向。而输入重定向，就是标准输入重定向。也就是STDIN(文件描述符0)、STDOUT(文件描述符1)、STDERR(文件描述符2)</p>\n<p>下面看输入重定向用到的符号和作用</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">命令 &lt; 文件</td>\n<td align=\"center\">将文件作为命令的标准输入</td>\n</tr>\n<tr>\n<td align=\"center\">命令 &lt;&lt; 分界符</td>\n<td align=\"center\">从标准输入中读入，直到遇见分界符才停止</td>\n</tr>\n<tr>\n<td align=\"center\">命令 &lt; 文件1 &gt;文件2</td>\n<td align=\"center\">将文件1作为命令的标准输入并将标准输出到文件2</td>\n</tr>\n</tbody></table>\n<p>输出重定向用到的符号作用</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">命令 &gt; 文件</td>\n<td align=\"center\">将标准输出重定向到一个文件中，清空原文件数据</td>\n</tr>\n<tr>\n<td align=\"center\">命令 2&gt;&gt;文件</td>\n<td align=\"center\">将标准错误重定向到一个文件中，清空源文件数据</td>\n</tr>\n<tr>\n<td align=\"center\">命令 &gt;&gt; 文件</td>\n<td align=\"center\">将标准输出重定向到一个文件中，追加到原有内容的后面</td>\n</tr>\n<tr>\n<td align=\"center\">命令 2&gt;&gt; 文件</td>\n<td align=\"center\">将标错误出重定向到一个文件中，追加到原有内容的后面</td>\n</tr>\n<tr>\n<td align=\"center\">命令 &gt;&gt; 文件 2&gt;&amp;1</td>\n<td align=\"center\">将标准输出和错误输出共同写入到文件中，追加到原有内容的后面</td>\n</tr>\n<tr>\n<td align=\"center\">命令 &amp;&gt;&gt;文件</td>\n<td align=\"center\">将标准输出和错误输出共同写入到文件中，追加到原有内容的后面</td>\n</tr>\n</tbody></table>\n<p>试一下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Welcome to China\"</span> <span class=\"token operator\">></span> readme.txt \n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token function\">cat</span> readme.txt \nWelcome to China\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"My name is A1andNS\"</span> <span class=\"token operator\">>></span> readme.txt \n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token function\">cat</span> readme.txt \nWelcome to China\nMy name is A1andNS\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"clear all\"</span> <span class=\"token operator\">></span> readme.txt\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token function\">cat</span> readme.txt \n<span class=\"token function\">clear</span> all<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这就是覆盖不覆盖的最好体现了，&gt;&gt;是追加，&gt;则是覆盖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token function\">ls</span> -l aaa <span class=\"token operator\">></span> cout.txt\nls: cannot access aaa: No such <span class=\"token function\">file</span> or directory\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token function\">ls</span> -l aaa bbb <span class=\"token operator\">></span> cout.txt\nls: cannot access aaa: No such <span class=\"token function\">file</span> or directory\nls: cannot access bbb: No such <span class=\"token function\">file</span> or directory\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token function\">ls</span> -l aaa readme.txt <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> cout.txt\n-rw-rw-r--. <span class=\"token number\">1</span> a1andns a1andns <span class=\"token number\">10</span> Nov  <span class=\"token number\">8</span> <span class=\"token number\">18</span>:13 readme.txt\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里可以看到如果命令执行成功就会输出到cout.txt里面，但是在使用&gt;的时候，如果出现报错是无法写入的，所以这样就可以来让正确执行的输出到终端，而错误写入指定的错误日志里。</p>\n<h2 id=\"管道命令符\"><a href=\"#管道命令符\" class=\"headerlink\" title=\"管道命令符\"></a>管道命令符</h2><p>一个经常用到的管道符是<code>|</code>，它的用处是把左边的命令的输出作为后面一个命令的标准输入。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">\"/etc/passwd\"</span> /etc/passwd <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l\n<span class=\"token function\">ls</span> -l /etc/ <span class=\"token operator\">|</span> <span class=\"token function\">more</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>所以你就可以利用管道符来重置密码，只需要一条命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"thisisthenewpassword\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">passwd</span> --stdin root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>有了管道符很多操作就会变得方便起来，例如统计行数的操作，之前做溯源分析的时候就派上用场。</p>\n<h2 id=\"命令行的通配符\"><a href=\"#命令行的通配符\" class=\"headerlink\" title=\"命令行的通配符\"></a>命令行的通配符</h2><p>通配符是在很多时候都可以起到作用，例如想要批量操作以某些关键词开头的文件就可以用到了。有了这个东西，批量操作效率得到提升。这里的通配符有两种，分别是<code>*</code>和<code>?</code>，<code>*</code>代表匹配零个或多个字符，<code>?</code>代表匹配单个字符。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> -l /dev/sda*\n<span class=\"token function\">ls</span> -l /dev/sda?\n<span class=\"token function\">ls</span> -l /dev/sda<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-9<span class=\"token punctuation\">]</span>\nla -l /dev/sda<span class=\"token punctuation\">[</span><span class=\"token number\">156</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h2><p>四个最常用的转义字符为<code>\\</code>,<code>&#39;&#39;</code>,<code>&quot;&quot;</code>,<code>&#39;</code></p>\n<p><code>\\</code>让反斜杠后面的一个变量变成单纯的字符串。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"this is \\<span class=\"token environment constant\">$SHELL</span>\"</span>\nthis is <span class=\"token environment constant\">$SHELL</span>\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"this is <span class=\"token environment constant\">$SHELL</span>\"</span>\nthis is /bin/bash\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"this is \\$<span class=\"token environment constant\">$SHELL</span>\"</span>\nthis is $/bin/bash\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如上尝试就可以发现<code>\\</code>的转义功能了。</p>\n<p><code>&#39;&#39;</code>转义其中所有的变量为单纯的字符串，也就是说’’中的内容就只是字符串。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'this is <span class=\"token environment constant\">$SHELL</span>'</span>\nthis is <span class=\"token environment constant\">$SHELL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>&quot;&quot;</code>会保留其中所有的变量，不会对它们进行转义操作。</p>\n<p>这个看之前演示\\转义功能的就可以看出来了。</p>\n<p>``反引号，他是把其中命令执行后返回结果。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#例如再一些文件名被ban了，无法使用，就可以利用到这个转义字符了</span>\n<span class=\"token function\">cat</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ls</span><span class=\"token variable\">`</span></span>    <span class=\"token comment\">#这就是把ls命令执行的结果传递给cat</span>\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe etc<span class=\"token punctuation\">]</span>$ <span class=\"token function\">more</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">ls</span><span class=\"token variable\">`</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo@master/img/image-20201109212538165.png\" alt=\"image-20201109212538165\"></p>\n<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><p>变量时计算机系统用于保存可变值的数据类型的，再linux系统中，变量名称一般都是大写的。</p>\n<p><strong>命令别名</strong></p>\n<p>我们可以利用一个命令来创建命令别名</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">ls</span><span class=\"token operator\">=</span><span class=\"token string\">'ls -l'</span>\n<span class=\"token comment\">#这样的话执行ls操作就会执行ls -l操作了。</span>\n<span class=\"token builtin class-name\">unalias</span> <span class=\"token function\">ls</span>\n<span class=\"token comment\">#这样会移除别名</span>\n<span class=\"token comment\">#这个再有些时候你需要为常用命令添加一个更加方便的快捷方式就用上了。看你的需求的。</span>\n\n<span class=\"token builtin class-name\">type</span> <span class=\"token function\">ls</span>\n<span class=\"token comment\">#这个命令可以帮助你查看命令是内部命令还是外部命令</span>\n\n<span class=\"token comment\">#添加PATH变量</span>\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>\n/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/root/bin\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span>\n/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/root/bin\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里要注意一点，添加PATH变量要合适，不应该随便乱添加，不然可能出现的问题是，黑客再某些公共目录下放置一些常用命令同名的恶意文件，而你不知道就直接使用，这就会产生风险。所以再接手一台Linux系统后先检查一下PATH变量中时候又可疑目录吧，以免吃亏了。</p>\n<p>如果想要查看所有的环境变量可以使用env命令来实现。</p>\n<p>下面来看看比较重要的一些环境变量</p>\n<table>\n<thead>\n<tr>\n<th>变量名称</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HOME</td>\n<td align=\"left\">用户的主目录</td>\n</tr>\n<tr>\n<td>SHELL</td>\n<td align=\"left\">用户在使用的Shell解释器名称</td>\n</tr>\n<tr>\n<td>HISTSIZE</td>\n<td align=\"left\">输出的历史命令记录条数</td>\n</tr>\n<tr>\n<td>HISTFILESIZE</td>\n<td align=\"left\">保存的历史命令记录条数</td>\n</tr>\n<tr>\n<td>MAIL</td>\n<td align=\"left\">邮件保存路径</td>\n</tr>\n<tr>\n<td>LANG</td>\n<td align=\"left\">系统语言、语系名称</td>\n</tr>\n<tr>\n<td>RANDOM</td>\n<td align=\"left\">生成一个随机数字</td>\n</tr>\n<tr>\n<td>PSI</td>\n<td align=\"left\">Bash解释器的提示符</td>\n</tr>\n<tr>\n<td>PATH</td>\n<td align=\"left\">定义解释器搜索用户执行命令的路径</td>\n</tr>\n<tr>\n<td>EDITOR</td>\n<td align=\"left\">用户默认的文本编辑器</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$HOME</span>\n/home/a1andns\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span>\n/bin/bash\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe Desktop<span class=\"token punctuation\">]</span>$ <span class=\"token function\">su</span> root\n<span class=\"token punctuation\">[</span>root@linuxprobe Desktop<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo $HOME</span>\n/root\n<span class=\"token punctuation\">[</span>root@linuxprobe Desktop<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo $SHELL</span>\n/bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里就试了一下，Linux是一个多用户、多任务的系统，所以可以为不同的用户提供独立的工作环境，因此使用不同的用户登录，你所对应的环境变量也是不同的。</p>\n<p>关于环境变量，我们也是可以去添加的，例如</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@linuxprobe Desktop<span class=\"token punctuation\">]</span><span class=\"token comment\"># CTF=/home/ctf</span>\n<span class=\"token punctuation\">[</span>root@linuxprobe Desktop<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo $CTF</span>\n/home/ctf\n<span class=\"token punctuation\">[</span>root@linuxprobe Desktop<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd $CTF</span>\n<span class=\"token punctuation\">[</span>root@linuxprobe ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>大写来表示环境变量是一个约定熟成的习惯，大家也都是这么干了，所以也这样写。但是需要注意的是这里创建的变量是有作用域的，前面也说过了，linux是一个多用户系统，所以这个环境变量实际上是只适用与当前这个用户的。所以也就是具有<strong>局限性</strong>。而解决局限性，实现全局化，就可以利用到一个命令<code>export</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>a1andns@linuxprobe ~<span class=\"token punctuation\">]</span>$ <span class=\"token assign-left variable\">CTF</span><span class=\"token operator\">=</span>/home/ctf\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe ~<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">cd</span> <span class=\"token variable\">$CTF</span>\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe ctf<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">pwd</span>\n/home/ctf\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe ctf<span class=\"token punctuation\">]</span>$ <span class=\"token builtin class-name\">export</span> CTF\n<span class=\"token punctuation\">[</span>a1andns@linuxprobe ctf<span class=\"token punctuation\">]</span>$ <span class=\"token function\">su</span> root\n<span class=\"token punctuation\">[</span>root@linuxprobe ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo $CTF</span>\n/home/ctf\n<span class=\"token punctuation\">[</span>root@linuxprobe ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd $CTF</span>\n<span class=\"token punctuation\">[</span>root@linuxprobe ctf<span class=\"token punctuation\">]</span><span class=\"token comment\"># pwd</span>\n/home/ctf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>《Linux就该这么学》</p>\n","text":"今天继续redhat系列 输入输出重定向输入重定向：把文件导入导命令中来 输出重定向：把输出写入到指定文件 如果是先要结合linux命令来使用，一般是输出重定向起到更多作用。而输出重定向可以分为两种，标准输出重定向和错误输出重定向。而输入重定向，就是标准输入重定向。也就是STDI...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Linux学习","slug":"Linux学习","count":7,"path":"api/categories/Linux学习.json"}],"tags":[{"name":"Linux","slug":"Linux","count":11,"path":"api/tags/Linux.json"},{"name":"Redhat","slug":"Redhat","count":5,"path":"api/tags/Redhat.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91\"><span class=\"toc-text\">输入输出重定向</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%A1%E9%81%93%E5%91%BD%E4%BB%A4%E7%AC%A6\"><span class=\"toc-text\">管道命令符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E9%80%9A%E9%85%8D%E7%AC%A6\"><span class=\"toc-text\">命令行的通配符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6\"><span class=\"toc-text\">转义字符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">环境变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"BUUOJ刷题2020119-15","uid":"1f9ed3837271c9618e2c89b56e8e0ee6","slug":"BUUOJ刷题2020119-15","date":"2020-11-09T09:20:59.000Z","updated":"2021-04-30T14:05:20.372Z","comments":true,"path":"api/articles/BUUOJ刷题2020119-15.json","keywords":"A1andNS","cover":[],"text":"[BJDCTF2020]Mark loves cat考点：git泄露、代码审计、变量覆盖 只发现最下面有一个交互点，这是一个提交留言的交互点的样子，提交试一下，发现会在GET传参message。 但是有一个奇怪的地方，index.html?message=1111111 但是这个...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"13 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"湖湘杯2020WP","uid":"2c508b1aaa924e3c32b98fccd65763ca","slug":"湖湘杯2020WP","date":"2020-11-06T08:55:49.000Z","updated":"2020-11-06T09:14:18.000Z","comments":true,"path":"api/articles/湖湘杯2020WP.json","keywords":"A1andNS","cover":[],"text":"0x00 题目名字不重要反正题挺简单的给出了源码： &lt;?php error_reporting(0); //I heard you are good at PHPINFO+LFI, flag is in flag.php, find it my dear noob vege...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"湖湘杯","slug":"湖湘杯","count":1,"path":"api/tags/湖湘杯.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}