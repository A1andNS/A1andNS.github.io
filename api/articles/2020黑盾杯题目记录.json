{"title":"2020黑盾杯题目记录","uid":"fac16ea8923bbbe8935929d55bdc28af","slug":"2020黑盾杯题目记录","date":"2020-09-30T04:20:07.000Z","updated":"2020-09-30T12:03:52.000Z","comments":true,"path":"api/articles/2020黑盾杯题目记录.json","keywords":"A1andNS","cover":[],"content":"<p>记录一下黑盾杯2020，和某比赛题目撞了．</p>\n<h2 id=\"Misc-Blue\"><a href=\"#Misc-Blue\" class=\"headerlink\" title=\"Misc-Blue\"></a>Misc-Blue</h2><p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930124331.png\" alt=\"binwalk\"></p>\n<p>利用查找功能找到每一轮的开头33，查看上一条查询语句就知道上一个字母是什么，然后手动拼凑成flag</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930124406.png\" alt=\"流量包\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">flag&#123;Gre4t_j0B_ON_This_Blue_sh4rk&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Misc-Encrypto\"><a href=\"#Misc-Encrypto\" class=\"headerlink\" title=\"Misc-Encrypto\"></a>Misc-Encrypto</h2><p>伪加密压缩包：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930125019.png\" alt=\"伪加密是\"></p>\n<p>使用7z解压文件，得到一个flag.txt文件，里面是一串base64:<code>UTAxSlUwTkRWRVo3Um1GclpWOWxibU55ZVhCMGFXOXVmUT09</code>，进行解码2次</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930125111.png\" alt=\"解码\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CMISCCTF&#123;Fake_encryption&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Misc-Tree\"><a href=\"#Misc-Tree\" class=\"headerlink\" title=\"Misc-Tree\"></a>Misc-Tree</h2><p>起初得到一张图片</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930184513.png\" alt=\"图片\"></p>\n<p>按照题目的hint，一开始用stegsolve进行通道分离，但是效果不好，分离后没办法直接看清结果，但是可以明显感觉到是存在flag在图片中。所以必须用其他方法了。</p>\n<p>对图片进行处理：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\nimg <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'enc.png'</span><span class=\"token punctuation\">)</span>\nw <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>width\nh <span class=\"token operator\">=</span> img<span class=\"token punctuation\">.</span>height\nimg_ob <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGB\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">//</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>h<span class=\"token operator\">//</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>w<span class=\"token operator\">//</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">//</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>img<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">*</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        img_ob<span class=\"token punctuation\">.</span>putpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nimg_ob<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">'1.png'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930184100.png\" alt=\"flag\"></p>\n<p>从而得到flag：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CMISCCTF&#123;coconut_tree&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Misc-Burp\"><a href=\"#Misc-Burp\" class=\"headerlink\" title=\"Misc-Burp\"></a>Misc-Burp</h2><p>一开始采取压缩包密码暴力破解，但是效果不好，小写字母+下划线的1-6位没有成功，感觉方向不对，仔细看看压缩包。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930130808.png\" alt=\"内容\"></p>\n<p>发现原始文件很小，基本都小于5Byte，所以有可能是要考CRC32碰撞。</p>\n<p>用github上的一个开源项目<a href=\"https://github.com/theonlypwner/crc32%E6%9D%A5%E5%81%9ACRC32%E7%A2%B0%E6%92%9E%E3%80%82\">https://github.com/theonlypwner/crc32来做CRC32碰撞。</a></p>\n<p>先把前面几个文件小<code>1.txt-6.txt</code>的CRC提取出来。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">1.txt 0x6083a1c8 \n2.txt 0xce70d424\n3.txt 0xc3f17511\n4.txt 0x526fd582\n5.txt 0x30e25038\n6.txt 0xaa3e6aea<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后使用脚本碰撞，观察结果</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930184732.png\" alt=\"运行结果\"></p>\n<p>每次都得到4 bytes，而且每次得到4块十六进制数，将十六进制转换为字符看看。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930184839.png\" alt=\"转换结果\"></p>\n<p>那么就按这个来搞一遍：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Downloads/crc32-master$ python crc32.py reverse 0x6083a1c8\n<span class=\"token number\">4</span> bytes: <span class=\"token punctuation\">&#123;</span>0x74, 0x68, 0x65, 0x5f<span class=\"token punctuation\">&#125;</span>\nverification checksum: 0x6083a1c8 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: Cb9fTf <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: Jhn4CW <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: K9Md4R <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: Lmggsq <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: Nls5B4 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: PNHKc5 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: TJUJbV <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: X4bYjM <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: apQQ_2 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: bmKntz <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: e9am3Y <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: tEfsYS <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: v4NPmF <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ php -r <span class=\"token string\">\"var_dump(hex2bin('7468655f'));\"</span>\nstring<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"the_\"</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ python3 crc32.py reverse 0xce70d424\n<span class=\"token number\">4</span> bytes: <span class=\"token punctuation\">&#123;</span>0x70, 0x61, 0x73, 0x73<span class=\"token punctuation\">&#125;</span>\nverification checksum: 0xce70d424 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: 1bItKW <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: 4GKT8a <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: 5fTuJ4 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: Ffa_X0 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: KtdPOv <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: TJQCtz <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: WjZ07j <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: ZENsHt <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: bmOgbV <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: dhF4Rp <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: fiRfc5 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: l3262D <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: wXxEd7 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: yWguX9 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: yjv90a <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: yv9e1u <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ php -r <span class=\"token string\">\"var_dump(hex2bin('70617373'));\"</span>\nstring<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"pass\"</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ python3 crc32.py reverse 0xc3f17511\n<span class=\"token number\">4</span> bytes: <span class=\"token punctuation\">&#123;</span>0x77, 0x6f, 0x72, 0x64<span class=\"token punctuation\">&#125;</span>\nverification checksum: 0xc3f17511 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: 4GLZ9v <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: FG8A0k <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: Jhm3Tl <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: SSQs_F <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: TJVMum <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: bmHicA <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: etOWIj <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: l3583S <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: lbWY_O <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: tEetNh <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: yjq71v <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: zJzDrf <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ php -r <span class=\"token string\">\"var_dump(hex2bin('776f7264'));\"</span>\nstring<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"word\"</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ python3 crc32.py reverse 0x526fd582\n<span class=\"token number\">4</span> bytes: <span class=\"token punctuation\">&#123;</span>0x5f, 0x68, 0x65, 0x72<span class=\"token punctuation\">&#125;</span>\nverification checksum: 0x526fd582 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: BbSWOR <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: FfNVN1 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: JhE4Cz <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: KtKYYw <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: RS8ESI <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: SSytHP <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: WWduI3 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: e9Jm3t <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: izl2S7 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: u503G7 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: v4ePmk <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: wXWLr6 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: zJRCep <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ php -r <span class=\"token string\">\"var_dump(hex2bin('5f686572'));\"</span>\nstring<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"_her\"</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ python3 crc32.py reverse 0x30e25038\n<span class=\"token number\">4</span> bytes: <span class=\"token punctuation\">&#123;</span>0x65, 0x5f, 0x63, 0x69<span class=\"token punctuation\">&#125;</span>                                                  \nverification checksum: 0x30e25038 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                             \nalternative: 8tDDMh <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                                           \nalternative: Gf5PS3 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                                           \nalternative: Jt0_Du <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                                           \nalternative: Ktqn_l <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                                           \nalternative: LmvPuG <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                                           \nalternative: SSCCNK <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                                           \nalternative: Y42_wb <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                                           \nalternative: bmZYrL <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>                                                           \nalternative: cqT4hA <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: e9pZ5o <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: lbEiNB <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: m3f99G <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: t5K5Z5 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: tEwD_e <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: v4_gkp <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: zJhtck <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ php -r <span class=\"token string\">\"var_dump(hex2bin('655f6369'));\"</span>\nstring<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"e_ci\"</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ python3 crc32.py reverse 0xaa3e6aea\n<span class=\"token number\">4</span> bytes: <span class=\"token punctuation\">&#123;</span>0x70, 0x68, 0x65, 0x72<span class=\"token punctuation\">&#125;</span>\nverification checksum: 0xaa3e6aea <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: 8tQsKs <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: Eg45dm <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: FfaVN1 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: Jhj4Cz <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: KtdYYw <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: SSVtHP <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: WWKuI3 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: bmOntW <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: e9em3t <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: fiRou4 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: izC2S7 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: v4JPmk <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\nalternative: wXxLr6 <span class=\"token punctuation\">(</span>OK<span class=\"token punctuation\">)</span>\na1andns@a1andns-PC:~/Downloads/crc32-master$ php -r <span class=\"token string\">\"var_dump(hex2bin('70686572'));\"</span>\nstring<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"pher\"</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>拼接得到压缩包密码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">the_password_here_cipher<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解压压缩包,读取flag.txt</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930191607.png\" alt=\"flag\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CMISCCTF&#123;how_to_burp_by_coding&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Misc-qrcode\"><a href=\"#Misc-qrcode\" class=\"headerlink\" title=\"Misc-qrcode\"></a>Misc-qrcode</h2><p>解压文件得到一个缺了一般的qrcode。</p>\n<p>使用在线二维码修复网站，修复二维码，二维码的版本是4,尺寸33x33.</p>\n<p><a href=\"https://merricx.github.io/qrazybox/\">https://merricx.github.io/qrazybox/</a></p>\n<p>挺好用的，imort半张二维码，自动不全角标，然后就只要根据二维码规则，补一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930194030.png\" alt=\"修补\"></p>\n<p>继续处理，把灰色的底色改成白色，提高一下对比度。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930194139.png\" alt=\"二维码\"></p>\n<p>补好二维码，后导出如下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930194851.png\" alt=\"结果\"></p>\n<p>在这个网站有二维码扫描功能extract QR Information，提取二维码数据。</p>\n<p>得到flag：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930194914.png\" alt=\"flag\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CMISCCTF&#123;qr_c0de_r3c0very&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Misc-blind\"><a href=\"#Misc-blind\" class=\"headerlink\" title=\"Misc-blind\"></a>Misc-blind</h2><p>题目给了一个blind.png和一个enc.rar,但是enc.rar需要密码解压，密码应该和图片有关系，题目hint是<code>有些时候固定的文件头尾会欺骗你，尝试找找看别的结构</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195029.png\" alt=\"目录\"></p>\n<p>binwalk分析一下blind.png文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195101.png\" alt=\"binwalk\"></p>\n<p>发现还有图片，所以使用foremost去分离文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195127.png\" alt=\"binwalk\"></p>\n<p>分离出两张图片，接下来提取盲水印，多亏了题目是blind。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># coding=utf-8</span>\n<span class=\"token keyword\">import</span> cv2\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> argparse <span class=\"token keyword\">import</span> ArgumentParser\nALPHA <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">build_parser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    parser <span class=\"token operator\">=</span> ArgumentParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--original'</span><span class=\"token punctuation\">,</span> dest<span class=\"token operator\">=</span><span class=\"token string\">'ori'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--image'</span><span class=\"token punctuation\">,</span> dest<span class=\"token operator\">=</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--result'</span><span class=\"token punctuation\">,</span> dest<span class=\"token operator\">=</span><span class=\"token string\">'res'</span><span class=\"token punctuation\">,</span> required<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    parser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--alpha'</span><span class=\"token punctuation\">,</span> dest<span class=\"token operator\">=</span><span class=\"token string\">'alpha'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>ALPHA<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> parser\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>ori_path<span class=\"token punctuation\">,</span> img_path<span class=\"token punctuation\">,</span> res_path<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ori <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>ori_path<span class=\"token punctuation\">)</span>\n    img <span class=\"token operator\">=</span> cv2<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>img_path<span class=\"token punctuation\">)</span>\n    ori_f <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">.</span>fft2<span class=\"token punctuation\">(</span>ori<span class=\"token punctuation\">)</span>\n    img_f <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fft<span class=\"token punctuation\">.</span>fft2<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\n    height<span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> ori<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ori<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    watermark <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ori_f <span class=\"token operator\">-</span> img_f<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> alpha\n    watermark <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>real<span class=\"token punctuation\">(</span>watermark<span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>watermark<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n    random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span>height <span class=\"token operator\">+</span> width<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    y <span class=\"token operator\">=</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span>\n    random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> watermark<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n    cv2<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>res_path<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>cv2<span class=\"token punctuation\">.</span>IMWRITE_JPEG_QUALITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    parser <span class=\"token operator\">=</span> build_parser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    options <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ori <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>ori\n    img <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>img\n    res <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>res\n    alpha <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>alpha\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>ori<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        parser<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"original image %s does not exist.\"</span> <span class=\"token operator\">%</span> ori<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        parser<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">\"image %s does not exist.\"</span> <span class=\"token operator\">%</span> img<span class=\"token punctuation\">)</span>\n    decode<span class=\"token punctuation\">(</span>ori<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python2 .<span class=\"token punctuation\">\\</span>blind.py --original <span class=\"token number\">1</span>.png --image <span class=\"token number\">2</span>.png --result res.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>res.png图片隐隐约约有字，但是看不清，所以就使用stegSolve来分离通道。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195202.png\" alt=\"密码\"></p>\n<p>所以压缩包的密码就是<code>Q@CTF@NX</code></p>\n<p>下面就去解压缩包，得到了一个ctfer.png图片。</p>\n<p>这张图片，我在Linux上看不了，还要用Windows虚拟机查看。</p>\n<p>有故事啊，binwalk安排。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195319.png\" alt=\"binwalk\"></p>\n<p>有两个png图片结尾信息，这说明其中很可能还有一张图片，结合题目提示文件头可能会欺骗你。找看你的第二张图片，然后补png头。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195401.png\" alt=\"PNG头\"></p>\n<p>找到了两个文件的交界处，把后面一张图片分离出来，存为图片。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195439.png\" alt=\"分离\"></p>\n<p>加入png头，<code>89 50 4E 47 0D 0A 1A 0A 00 00 00 0D</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195515.png\" alt=\"flag\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CMISCCTF&#123;double_picture&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Misc-Music\"><a href=\"#Misc-Music\" class=\"headerlink\" title=\"Misc-Music\"></a>Misc-Music</h2><p>解压下载文件，得到一个music.wav</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195825.png\" alt=\"波形\"></p>\n<p>听也听了，没有听出什么东西来。看的话，感觉有明显高低变化，之前在gactf中也有类似的，于是，利用脚本对高低增幅来转换为二进制01，老规矩低增幅为0，搞增幅为1,然后就可以得到01二进制文件流。然后每8位二进制相当于1位十六进制数，所以做一下转化，把二进制文件流搞成16进制文件流，并且写入文件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> struct\n<span class=\"token keyword\">import</span> wave\n<span class=\"token keyword\">import</span> re\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">write_records</span><span class=\"token punctuation\">(</span>records<span class=\"token punctuation\">,</span> <span class=\"token builtin\">format</span><span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    record_struct <span class=\"token operator\">=</span> Struct<span class=\"token punctuation\">(</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> records<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>record_struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\npath <span class=\"token operator\">=</span> <span class=\"token string\">\"./music.wav\"</span>\nf <span class=\"token operator\">=</span> wave<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span>\nparams <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>getparams<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nnchannels<span class=\"token punctuation\">,</span> sampwidth<span class=\"token punctuation\">,</span> framerate<span class=\"token punctuation\">,</span> nframes <span class=\"token operator\">=</span> params<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\nstr_data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readframes<span class=\"token punctuation\">(</span>nframes<span class=\"token punctuation\">)</span>\nf<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nwave_data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>str_data<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>short<span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\nd <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> wave_data<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">max</span> <span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">max</span><span class=\"token operator\">&lt;</span><span class=\"token number\">25000</span><span class=\"token punctuation\">:</span>\n                d <span class=\"token operator\">+=</span><span class=\"token string\">'0'</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                d <span class=\"token operator\">+=</span> <span class=\"token string\">'1'</span>\n                <span class=\"token keyword\">pass</span>\n        <span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">max</span> <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">max</span> <span class=\"token operator\">=</span> i\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\n\\n\\n\"</span><span class=\"token punctuation\">)</span>\na <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">r'.&#123;8&#125;'</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span>\nhex_list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">:</span>\n    res <span class=\"token operator\">=</span> <span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    hex_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>hex_list<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"wb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> hex_list<span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> struct<span class=\"token punctuation\">.</span>pack<span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195920.png\" alt=\"结果\"></p>\n<p>打开看一下,发现是乱码，但是掺杂的一些正常的字符，于是我使用binwalk分析一下，发现是一个rar文件。所以就修改文件后缀为.rar</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930195950.png\" alt=\"binwalk\"></p>\n<p>打开一看什么都没有，有点难受，压缩包里也没有其他的文件了。说明可能还有和文件流有关的东西。这里考虑是不是NTFS文件流隐写。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930200013.png\" alt=\"假的\"></p>\n<p>ntfs工具还是有一些的，不过收费的就算了 ，用ntfsStreamsEditor扫描nnnnoflag.txt目录</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930200047.png\" alt=\"扫描\"></p>\n<p>导出半张二维码</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930200118.png\" alt=\"半张\"></p>\n<p>怀疑会不是故意修改了长高来隐藏一半文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930200155.png\" alt=\"修改\"></p>\n<p>修改一手长高,保存一手<br><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930200224.png\" alt=\"修改高度\"></p>\n<p>然后它就正常了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930200246.png\" alt=\"二维码\"></p>\n<p>扫描二维码得到flag：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">flag&#123;4dcfda814ec9fd4761c1139fee3f65eb&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"Crypto-Round\"><a href=\"#Crypto-Round\" class=\"headerlink\" title=\"Crypto-Round\"></a>Crypto-Round</h2><p>题目给了一串字符串:<code>D@J::K=r&lt;ecXi^\\[V:X\\jXit</code></p>\n<p>移位密码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">c<span class=\"token operator\">=</span><span class=\"token string\">':D@J::K=r&lt;ecXi^\\[V:X\\jXit'</span>\n\na<span class=\"token operator\">=</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> c<span class=\"token punctuation\">:</span>\n    temp<span class=\"token operator\">=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">126</span><span class=\"token punctuation\">)</span>\n    flag<span class=\"token operator\">+=</span>temp\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200930200328.png\" alt=\"解密结果\"></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">CMISCCTF&#123;Enlarged_Caesar&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n","text":"记录一下黑盾杯2020，和某比赛题目撞了． Misc-Blue 利用查找功能找到每一轮的开头33，查看上一条查询语句就知道上一个字母是什么，然后手动拼凑成flag flag&#123;Gre4t_j0B_ON_This_Blue_sh4rk&#125; Misc-Encrypto...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"CTF","slug":"CTF","count":42,"path":"api/categories/CTF.json"}],"tags":[{"name":"黑盾杯","slug":"黑盾杯","count":1,"path":"api/tags/黑盾杯.json"},{"name":"MISC","slug":"MISC","count":1,"path":"api/tags/MISC.json"},{"name":"CTF","slug":"CTF","count":14,"path":"api/tags/CTF.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-Blue\"><span class=\"toc-text\">Misc-Blue</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-Encrypto\"><span class=\"toc-text\">Misc-Encrypto</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-Tree\"><span class=\"toc-text\">Misc-Tree</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-Burp\"><span class=\"toc-text\">Misc-Burp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-qrcode\"><span class=\"toc-text\">Misc-qrcode</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-blind\"><span class=\"toc-text\">Misc-blind</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-Music\"><span class=\"toc-text\">Misc-Music</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Crypto-Round\"><span class=\"toc-text\">Crypto-Round</span></a></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"PHP反序列化","uid":"5bbc7d316ccd2a535cfb30c74b9fa118","slug":"PHP反序列化","date":"2020-10-02T03:25:15.000Z","updated":"2020-10-06T12:16:56.000Z","comments":true,"path":"api/articles/PHP反序列化.json","keywords":"A1andNS","cover":[],"text":"序列化与反序列化序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。这个过程就像把数据封装成某种可逆的特殊结构，然后在另一台...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":33,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":1,"path":"api/tags/反序列化.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"巅峰极客之flask","uid":"7bb41472be4b9537a699ed5c75c69f9c","slug":"巅峰极客之flask","date":"2020-09-29T15:24:55.000Z","updated":"2020-10-25T11:03:00.000Z","comments":true,"path":"api/articles/巅峰极客之flask.json","keywords":"A1andNS","cover":null,"text":"在巅峰极客杯的WEB题目中有一题flask的题目，这是一题很基础的SSTI题目，涉及的是flask框架注入 首先先登陆，随意输入大于４个字符的用户名就好了，无所谓． 然后会自动转到一个hello xxx！的页面，可以看到关键点在于这个name参数．所以我从name参数入手，通过尝...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"CTF","slug":"CTF","count":42,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":14,"path":"api/tags/CTF.json"},{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"SSTI","slug":"SSTI","count":1,"path":"api/tags/SSTI.json"},{"name":"巅峰极客杯","slug":"巅峰极客杯","count":1,"path":"api/tags/巅峰极客杯.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}