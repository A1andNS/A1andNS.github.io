{"title":"BUUOJ刷题小记","uid":"fbef6aca98c892cb1e786b7509bd311a","slug":"BUUOJ刷题小记","date":"2020-10-03T06:03:06.000Z","updated":"2020-10-25T01:47:54.000Z","comments":true,"path":"api/articles/BUUOJ刷题小记.json","keywords":"A1andNS","cover":[],"content":"<h2 id=\"0x01-De1CTF-SSRF-Me\"><a href=\"#0x01-De1CTF-SSRF-Me\" class=\"headerlink\" title=\"0x01 De1CTF SSRF Me\"></a>0x01 De1CTF SSRF Me</h2><p>考察代码审计</p>\n<p>看名字感觉是SSRF的题目，但是打开发现更像是一题代码审计，给了一个flask框架的代码，有点长先做一下美化，在开始看。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#! /usr/bin/env python #encoding=utf-8</span>\n\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> request\n<span class=\"token keyword\">import</span> socket\n<span class=\"token keyword\">import</span> hashlib\n<span class=\"token keyword\">import</span> urllib\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> json\n\nurllib<span class=\"token punctuation\">.</span><span class=\"token builtin\">reload</span><span class=\"token punctuation\">(</span>sys<span class=\"token punctuation\">)</span>\nsys<span class=\"token punctuation\">.</span>setdefaultencoding<span class=\"token punctuation\">(</span><span class=\"token string\">'latin1'</span><span class=\"token punctuation\">)</span>\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\nsecert_key <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>urandom<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>action <span class=\"token operator\">=</span> action\n    self<span class=\"token punctuation\">.</span>param <span class=\"token operator\">=</span> param\n    self<span class=\"token punctuation\">.</span>sign <span class=\"token operator\">=</span> sign\n    self<span class=\"token punctuation\">.</span>sandbox <span class=\"token operator\">=</span> md5<span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># SandBox For Remote_Addr</span>\n        os<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkSign<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"scan\"</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">:</span>\n                tmpfile <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./%s/result.txt\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n                resp <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>param<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resp <span class=\"token operator\">==</span> <span class=\"token string\">\"Connection Timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> resp\n                <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">print</span> resp\n                    tmpfile<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span>\n                    tmpfile<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n            <span class=\"token keyword\">if</span> <span class=\"token string\">\"read\"</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">:</span>\n                f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./%s/result.txt\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">500</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Action Error\"</span>\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Sign Error\"</span>\n        <span class=\"token keyword\">return</span> result\n<span class=\"token keyword\">def</span> <span class=\"token function\">checkSign</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>getSign<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n<span class=\"token comment\">#generate Sign For Action Scan</span>\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/geneSign\"</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">geneSign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    param <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    action <span class=\"token operator\">=</span> <span class=\"token string\">\"scan\"</span>\n    <span class=\"token keyword\">return</span> getSign<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/De1ta'</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    action <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    param <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sign <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>remote_addr\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>waf<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"No Hacker!!!!\"</span>\n    task <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>Exec<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"code.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">scan</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    socket<span class=\"token punctuation\">.</span>setdefaulttimeout<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> urllib<span class=\"token punctuation\">.</span>urlopen<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Connection Timeout\"</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span>secert_key <span class=\"token operator\">+</span> param <span class=\"token operator\">+</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">waf</span><span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    check <span class=\"token operator\">=</span> param<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> check<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"gopher\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> check<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>debug <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>host <span class=\"token operator\">=</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> port <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>所以我们现在看到的就是code.txt文件,然后看到一个和我们的目标有关的代码段：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>checkSign<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"scan\"</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">:</span>\n            tmpfile <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./%s/result.txt\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span>\n            resp <span class=\"token operator\">=</span> scan<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>param<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>resp <span class=\"token operator\">==</span> <span class=\"token string\">\"Connection Timeout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> resp\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span> resp\n                tmpfile<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span>\n                tmpfile<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">\"read\"</span> <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">:</span>\n            f <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./%s/result.txt\"</span> <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>sandbox<span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">500</span><span class=\"token punctuation\">:</span>\n            result<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Action Error\"</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">500</span>\n        result<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Sign Error\"</span>\n    <span class=\"token keyword\">return</span> result<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的代码中有两个大块，一个是scan，一个是read，但是要能够进到这两个判断条件就必须先满足checkSign(),如果满足了checkSign就会判断action里面有没有scan或read，来决定是否做读和写。这里有一个细节，两个判断语句都是用的if，而不是if-else结构，也就是说如果，上面一个没有被return，只要满足下面一个条件就也可以执行，那么如果action是’readscanf’或’scanfread’，可能就可以即进行写也读，所以就可以把我们需要访问的文件内容写入result.txt同时读出来。那下面就先看一下checkSign()函数是怎么写的：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">checkSign</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>getSign<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>param<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>sign<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>checkSign()函数调用了getSign()函数，而getSign()函数则是使用传入进去的action和param与一个secert_key直接拼接，然后做md5加密，再转化为16进制。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">getSign</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> hashlib<span class=\"token punctuation\">.</span>md5<span class=\"token punctuation\">(</span>secert_key <span class=\"token operator\">+</span> param <span class=\"token operator\">+</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>hexdigest<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>接下来我们看一下如何来验证身份，/geneSign路由有个认证函数，会返回一个认证信息，不过这里的action被预设了scan，但是getSign函数里的返回值，三个变量是直接进行的拼接，没有什么分隔。那么就可以在param变量里做文章了，加入一个read到param里面。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/geneSign\"</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">geneSign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    param <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    action <span class=\"token operator\">=</span> <span class=\"token string\">\"scan\"</span>\n    <span class=\"token keyword\">return</span> getSign<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>先去访问一下路由<code>/geneSign?param=flag.txtread</code>，然后获得一个<code>2641cc09285ada3ac12db2293c6eb1bb</code>认证信息</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/De1ta'</span><span class=\"token punctuation\">,</span> methods <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">challenge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    action <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"action\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    param <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"param\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    sign <span class=\"token operator\">=</span> urllib<span class=\"token punctuation\">.</span>unquote<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"sign\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    ip <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>remote_addr\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>waf<span class=\"token punctuation\">(</span>param<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"No Hacker!!!!\"</span>\n    task <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> param<span class=\"token punctuation\">,</span> sign<span class=\"token punctuation\">,</span> ip<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>Exec<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里可以看出，sign和action是通过cookie来传递的，所以就可以按照上面的格式去访问<code>/De1ta</code>路由了。</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/03/03GhUx.png\" alt=\"03GhUx.png\"></p>\n<h2 id=\"0x02-HCTF2018-WarmUp\"><a href=\"#0x02-HCTF2018-WarmUp\" class=\"headerlink\" title=\"0x02 HCTF2018 WarmUp\"></a>0x02 HCTF2018 WarmUp</h2><p>考察代码审计</p>\n<p>提示source.php直接看源码，做代码审计。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&amp;&amp;</span> <span class=\"token class-name static-context\">emmm</span><span class=\"token operator\">::</span><span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">include</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">exit</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;br>&lt;img src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" />\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里可以看到我们需要传入一个file参。并且满足三个条件，第一个是file变量不空，第二个是file变量是字符串，第三个是通过check函数的检验，否则返回滑稽。那么就看一下checkFile函数的情况：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">checkFile</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$whitelist</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"source\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"source.php\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"hint\"</span><span class=\"token operator\">=></span><span class=\"token string double-quoted-string\">\"hint.php\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">is_string</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token comment\">//?file=source.php?file=fff</span>\n        <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span>\n            <span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">urldecode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$_page</span> <span class=\"token operator\">=</span> <span class=\"token function\">mb_substr</span><span class=\"token punctuation\">(</span>\n            <span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span>\n            <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">mb_strpos</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'?'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_array</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_page</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$whitelist</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"you can't see it\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>hint.php提示flag在ffffllllaaaagggg</p>\n<p>这里有4个判断语句，第一个是如果page不存在或page不是字符串，都会直接返回flase，第二个是，如果page在白名单里就会返回true，第三个是被截取的page需要在白名单里，才会返回true，第四个是如果page在解url编码后再被截取，也要在白名单里，才返回true，否则就false。这里第二个if不能让他满足，因为我们要包含的文件是ffffllllaaaagggg。</p>\n<p>所以我们要利用最后一个if，所以对<code>？</code>做url编码，编码两次<code>%253F</code>，这样在一开始传入的时候会解码一起，在到最后一个if之前会再次解码回<code>?</code>这样在最后一次判断的时候就可以通过。</p>\n<p>payload:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">?file&#x3D;source.php%253F.&#x2F;ffffllllaaaagggg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">?file&#x3D;source.php%253F..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>最后一个一个试出来：</p>\n<p><img src=\"https://s1.ax1x.com/2020/10/03/03GfV1.png\" alt=\"03GfV1.png\"></p>\n","text":"0x01 De1CTF SSRF Me考察代码审计 看名字感觉是SSRF的题目，但是打开发现更像是一题代码审计，给了一个flask框架的代码，有点长先做一下美化，在开始看。 #! /usr/bin/env python #encoding=utf-8 from flask imp...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"},{"name":"De1CTF 2019","slug":"De1CTF-2019","count":1,"path":"api/tags/De1CTF-2019.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x01-De1CTF-SSRF-Me\"><span class=\"toc-text\">0x01 De1CTF SSRF Me</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x02-HCTF2018-WarmUp\"><span class=\"toc-text\">0x02 HCTF2018 WarmUp</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"BUUOJ刷题(2020-20-04)","uid":"586afb52f643078e9cf305f6eadf9480","slug":"BUUOJ刷题-2020-20-04","date":"2020-10-04T06:27:46.000Z","updated":"2020-10-04T13:44:06.000Z","comments":true,"path":"api/articles/BUUOJ刷题-2020-20-04.json","keywords":"A1andNS","cover":[],"text":"0x01 [SUCTF 2019]EasySQL这题经过测试可以知道会有三种情况，一种是回nonono，一种是回复数组，一种是没有回复。 通过nonono可以知道哪些被过滤了。例如from、flag、之类的都被过滤了，所以尝试使用堆叠注入。 可以看到有一个CTF数据库，里面有一个...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"SUCTF","slug":"SUCTF","count":2,"path":"api/tags/SUCTF.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"PHP反序列化","uid":"5bbc7d316ccd2a535cfb30c74b9fa118","slug":"PHP反序列化","date":"2020-10-02T03:25:15.000Z","updated":"2020-10-06T12:16:56.000Z","comments":true,"path":"api/articles/PHP反序列化.json","keywords":"A1andNS","cover":[],"text":"序列化与反序列化序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。这个过程就像把数据封装成某种可逆的特殊结构，然后在另一台...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":30,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":1,"path":"api/tags/反序列化.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}