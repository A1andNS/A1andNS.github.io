{"title":"Python写个2048","uid":"6a4d9e181c2406d317b06b634d8dec47","slug":"Python写个2048","date":"2020-09-09T13:48:50.000Z","updated":"2021-06-28T14:41:26.389Z","comments":true,"path":"api/articles/Python写个2048.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200323233608.png","content":"<h2 id=\"项目名称-2048小游戏\"><a href=\"#项目名称-2048小游戏\" class=\"headerlink\" title=\"项目名称-2048小游戏\"></a>项目名称-2048小游戏</h2><h3 id=\"用户行为\"><a href=\"#用户行为\" class=\"headerlink\" title=\"用户行为\"></a>用户行为</h3><p>所有的有效输入都可以转换为上下左右，游戏重置，退出这六种行为，有效输入键是WASDRQwasdrq，并且要把行为和输入关联起来。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Up'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Left'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Down'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Right'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Restart'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Exit'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#键位字母ascii码化</span>\nletter_codes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> <span class=\"token string\">'WASDRQwasdrq'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">#建立映射，用到字典类型，循环两次actions，毕竟要做到不区分大小写字母</span>\nactions_dict <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>letter_codes<span class=\"token punctuation\">,</span> actions <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"状态机\"><a href=\"#状态机\" class=\"headerlink\" title=\"状态机\"></a>状态机</h3><p>处理游戏的主逻辑的时候我们会用到一种十分常用的技术：状态机，或者更准确的说是有限状态机(FSM)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200918205010.png\" alt=\"状态机\"></p>\n<h3 id=\"游戏初始化函数init\"><a href=\"#游戏初始化函数init\" class=\"headerlink\" title=\"游戏初始化函数init()\"></a>游戏初始化函数init()</h3><p>首先要有一个init()函数用来初始化我们的游戏棋盘，使游戏变成初始状态。</p>\n<h3 id=\"游戏结束函数not-game\"><a href=\"#游戏结束函数not-game\" class=\"headerlink\" title=\"游戏结束函数not_game()\"></a>游戏结束函数not_game()</h3><p>not_game函数用来表示游戏结束时的状态，因为会有两个状态，一个是win，一个是gameover。在显示这两个结果的时候还要提供restart和exit功能。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">not_game</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token triple-quoted-string string\">'''展示游戏结束界面。\n     读取用户输入得到 action，判断是重启游戏还是结束游戏\n     '''</span>\n     <span class=\"token comment\"># defaultdict 参数是 callable 类型，所以需要传一个函数</span>\n     responses <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">)</span>\n     <span class=\"token comment\"># 在字典中新建两个键值对</span>\n     responses<span class=\"token punctuation\">[</span><span class=\"token string\">'Restart'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> responses<span class=\"token punctuation\">[</span><span class=\"token string\">'Exit'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Init'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Exit'</span>\n     <span class=\"token keyword\">return</span> responses<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里 <code>defaultdict</code> 作用是生成一个特殊的字典 <code>responses</code>。 在普通的字典里，我们都知道如果使用字典里不存在的 key 来取 value，程序就会报错。<br>但在 <code>defaultdict</code> 生成的特殊字典里，如果要取的 key 不存在，程序不仅不会报错，还能取到一个我们设定的默认 value 值。也就是说，在 <code>responses</code> 这个特殊字典里，<code>responses[action]</code> 在 <code>action</code> 为 <code>&#39;Restart&#39;</code> 、<code>&#39;Exit&#39;</code> 这两种行为时分别对应 <code>&#39;Init&#39;</code> 和 <code>&#39;Exit&#39;</code> 状态。<br>在 key<code>action</code> 为 <code>actions = [&#39;Up&#39;, &#39;Left&#39;, &#39;Down&#39;, &#39;Right&#39;, &#39;Restart&#39;, &#39;Exit&#39;]</code> 中的其他行为时，对应的都是默认的 value<code>state</code>。</p>\n<p>这样一来，在游戏结束界面，玩家输入 r 和 q 以外的键位都不能对游戏界面造成影响。</p>\n<h3 id=\"游戏进行函数game\"><a href=\"#游戏进行函数game\" class=\"headerlink\" title=\"游戏进行函数game()\"></a>游戏进行函数game()</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n     <span class=\"token comment\"># 画出当前棋盘状态</span>\n     <span class=\"token comment\"># 读取用户输入得到 action</span>\n     <span class=\"token keyword\">if</span> action <span class=\"token operator\">==</span> <span class=\"token string\">'Restart'</span><span class=\"token punctuation\">:</span>\n         <span class=\"token keyword\">return</span> <span class=\"token string\">'Init'</span>\n     <span class=\"token keyword\">if</span> action <span class=\"token operator\">==</span> <span class=\"token string\">'Exit'</span><span class=\"token punctuation\">:</span>\n         <span class=\"token keyword\">return</span> <span class=\"token string\">'Exit'</span>\n     <span class=\"token comment\"># if 成功移动了一步:</span>\n         <span class=\"token keyword\">if</span> 游戏胜利了<span class=\"token punctuation\">:</span>\n             <span class=\"token keyword\">return</span> <span class=\"token string\">'Win'</span>\n         <span class=\"token keyword\">if</span> 游戏失败了<span class=\"token punctuation\">:</span>\n             <span class=\"token keyword\">return</span> <span class=\"token string\">'Gameover'</span>\n     <span class=\"token keyword\">return</span> <span class=\"token string\">'Game'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>逻辑很简单，如果中途Restart就回到Init state，如果中途Exit就跳转到Exit状态游戏结束。如果游戏胜利就跳转到Win state，同事Win state是触发了not_game(Win)。同理Gameover状态也就会出发notgame(gameover)。</p>\n<p>状态机的机制很像操作系统中xv6的proc结构中的process设置状态，然后实现状态转换。不同的是一个操作对象是process，一个是游戏场景。</p>\n<p>game()表示的是游戏的运行状态，在不重新开始或退出游戏的情况下，只要游戏没有胜利或失败，就会一直处于游戏状态。</p>\n<h3 id=\"User输入处理\"><a href=\"#User输入处理\" class=\"headerlink\" title=\"User输入处理\"></a>User输入处理</h3><p>user输入是程序人机交互的重要环节，上面的代码也是根据用户输入来进行判断的。我们引入了键位和关键词映射的方法，把几种操作映射到awsdqeAWSDQE这几个键位上。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_user_action</span><span class=\"token punctuation\">(</span>keyboard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ch <span class=\"token operator\">=</span> <span class=\"token string\">\"N\"</span>\n    <span class=\"token keyword\">while</span> ch <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> action_dict<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#返回按下键位的ASCII码值</span>\n        char <span class=\"token operator\">=</span> keyboard<span class=\"token punctuation\">.</span>getch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> actions_dict<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>阻塞+循环，知道获取到有效输入。</p>\n<h3 id=\"棋盘创建\"><a href=\"#棋盘创建\" class=\"headerlink\" title=\"棋盘创建\"></a>棋盘创建</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GameField</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> height <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> width <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> win <span class=\"token operator\">=</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n        self<span class=\"token punctuation\">.</span>win_value <span class=\"token operator\">=</span> <span class=\"token number\">2048</span>\t<span class=\"token comment\">#胜利分数</span>\n        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\t<span class=\"token comment\">#当前分数</span>\n        self<span class=\"token punctuation\">.</span>highscore <span class=\"token operator\">=</span> <span class=\"token number\">0</span> \t<span class=\"token comment\">#最高分数</span>\n        self<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">#重置棋盘</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>初始化棋盘的参数，可以指定棋盘的高度和宽度以及游戏胜利的条件。这里我是指定了一个4X4,胜利条件为2048分的棋盘。</p>\n<h3 id=\"棋盘操作\"><a href=\"#棋盘操作\" class=\"headerlink\" title=\"棋盘操作\"></a>棋盘操作</h3><p>根据2048的游戏规则，我需要随机生成一个2或4,这里要用到random库，这是一个python的随机数生成库，用到了里面的randrange方法和choice方法。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>randrange(x)方法：从x中去一个随机数</p>\n<p>choice()方法：从一个非空的序列(list、str、tuple等)中随机返回一个元素。</p></blockquote>\n<p>用二维数组来表示i,j坐标，但是为了方便可以把array作为list的element来存储，这样施一公choice方法选择list中的一个element就会还是一个array type，这个时候把他再赋给array就会简单很多。</p>\n<h4 id=\"重置棋盘\"><a href=\"#重置棋盘\" class=\"headerlink\" title=\"重置棋盘\"></a>重置棋盘</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>highscore<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>highscore <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>score\n    self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    self<span class=\"token punctuation\">.</span>field <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    self<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>先把所有的元素复原为0 ，然后再在随机位置生成游戏初始数值。</p>\n<h4 id=\"判断输赢\"><a href=\"#判断输赢\" class=\"headerlink\" title=\"判断输赢\"></a>判断输赢</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">is_win</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span>self<span class=\"token punctuation\">.</span>win_value <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">is_gameover</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>selfd<span class=\"token punctuation\">.</span>move_is_possible<span class=\"token punctuation\">(</span>move<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> move <span class=\"token keyword\">in</span> actions<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>any函数是python内置函数，any用于接受一个可迭代对象作为参数，返回bool值。</p>\n<p>这里的any里面嵌套了另一个any，里层any传入每一行的元素并依次比较这一行的每个元素与self.win_value的大小，如果有任何一个元素大于self.win_value，就返回True，否则返回False。外层any传入的是矩阵每一行元素在内层any处理后返回的bool值。</p>\n<p><strong>curses库：curses.wrapper函数会激活并初始化终端进入curses模式。这个模式下会禁止输入的字符显示在终端上、禁止终端程序的行缓冲，也就是字符在输入是实时可用，不需要回车或者换行，这就是游戏的体验了。</strong></p>\n<h3 id=\"项目源代码：\"><a href=\"#项目源代码：\" class=\"headerlink\" title=\"项目源代码：\"></a>项目源代码：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: utf-8 -*-</span>\n<span class=\"token keyword\">import</span> curses\n<span class=\"token keyword\">from</span> random <span class=\"token keyword\">import</span> randrange<span class=\"token punctuation\">,</span> choice\n<span class=\"token keyword\">from</span> collections <span class=\"token keyword\">import</span> defaultdict\n<span class=\"token keyword\">from</span> typing <span class=\"token keyword\">import</span> List\n\nletter_code <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> ch <span class=\"token keyword\">in</span> <span class=\"token string\">'WASDRQwasdrq'</span><span class=\"token punctuation\">:</span>\n    letter_code<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>ch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># return the ascii value of the button we push</span>\n<span class=\"token comment\"># print(letter_code)</span>\naction <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Up'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Left'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Down'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Right'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Restart'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Exit'</span><span class=\"token punctuation\">]</span>\naction_dict <span class=\"token operator\">=</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>letter_code<span class=\"token punctuation\">,</span> action <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># print(action_dict)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_user_action</span><span class=\"token punctuation\">(</span>keyboard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    char <span class=\"token operator\">=</span> <span class=\"token string\">'N'</span>\n    <span class=\"token keyword\">while</span> char <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> action_dict<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># if char in action_dict, we should get the char from keyboard until char is right</span>\n        char <span class=\"token operator\">=</span> keyboard<span class=\"token punctuation\">.</span>getch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> action_dict<span class=\"token punctuation\">[</span>char<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        ls<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ls\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">invert</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> field<span class=\"token punctuation\">:</span>\n        ls<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> ls\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GameField</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> height<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> win<span class=\"token operator\">=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height\n        self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width\n        self<span class=\"token punctuation\">.</span>win_value <span class=\"token operator\">=</span> win\n        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>highscore <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> self<span class=\"token punctuation\">.</span>highscore<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>highscore <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>score\n        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>field <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ls<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">move_row_left</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">def</span> <span class=\"token function\">tighten</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>    <span class=\"token comment\"># squeeze non-zore elements</span>\n                new_row <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        new_row<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>new_row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    ls<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                new_row <span class=\"token operator\">+=</span> ls\n                <span class=\"token keyword\">return</span> new_row\n\n            <span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                pair <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                new_row <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> pair<span class=\"token punctuation\">:</span>\n                        new_row<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                        self<span class=\"token punctuation\">.</span>score <span class=\"token operator\">+=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                        pair <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">if</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> row<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                            pair <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n                            new_row<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                            new_row<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">assert</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>new_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> new_row\n            <span class=\"token keyword\">return</span> tighten<span class=\"token punctuation\">(</span>merge<span class=\"token punctuation\">(</span>tighten<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        moves <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        moves<span class=\"token punctuation\">[</span><span class=\"token string\">'Left'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> field<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>move_row_left<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> field<span class=\"token punctuation\">]</span>\n        moves<span class=\"token punctuation\">[</span><span class=\"token string\">'Right'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> field<span class=\"token punctuation\">:</span> invert<span class=\"token punctuation\">(</span>moves<span class=\"token punctuation\">[</span><span class=\"token string\">'Left'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>invert<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        moves<span class=\"token punctuation\">[</span><span class=\"token string\">'Up'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> field<span class=\"token punctuation\">:</span> transpose<span class=\"token punctuation\">(</span>moves<span class=\"token punctuation\">[</span><span class=\"token string\">'Left'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>transpose<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        moves<span class=\"token punctuation\">[</span><span class=\"token string\">'Down'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> field<span class=\"token punctuation\">:</span> transpose<span class=\"token punctuation\">(</span>moves<span class=\"token punctuation\">[</span><span class=\"token string\">'Right'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>transpose<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> direction <span class=\"token keyword\">in</span> moves<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>move_is_possible<span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>field <span class=\"token operator\">=</span> moves<span class=\"token punctuation\">[</span>direction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>spawn<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_win</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">>=</span>self<span class=\"token punctuation\">.</span>win_value <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">is_gameover</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>move_is_possible<span class=\"token punctuation\">(</span>move<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> move <span class=\"token keyword\">in</span> action<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        help_string1 <span class=\"token operator\">=</span> <span class=\"token string\">\"(W)Up (S)Down (A)Left (D)Right\"</span>\n        help_string2 <span class=\"token operator\">=</span> <span class=\"token string\">\"    (R)Restart (Q)Exit\"</span>\n        gameover_sting <span class=\"token operator\">=</span> <span class=\"token string\">\"          GAME OVER!!!\"</span>\n        win_sting <span class=\"token operator\">=</span> <span class=\"token string\">\"    CONGRATUATION!!YOU WIN!!!\"</span>\n\n        <span class=\"token keyword\">def</span> <span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            screen<span class=\"token punctuation\">.</span>addstr<span class=\"token punctuation\">(</span>string<span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">def</span> <span class=\"token function\">draw_hor_separator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            line <span class=\"token operator\">=</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"+------\"</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>width <span class=\"token operator\">+</span> <span class=\"token string\">\"+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n            separator <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> line<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>draw_hor_separator<span class=\"token punctuation\">,</span> <span class=\"token string\">\"counter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                draw_hor_separator<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            cast<span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">[</span>draw_hor_separator<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            draw_hor_separator<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n        <span class=\"token keyword\">def</span> <span class=\"token function\">draw_row</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cast<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'|&#123;: ^5&#125; '</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token string\">'|      '</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> row<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span>\n\n        screen<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        cast<span class=\"token punctuation\">(</span><span class=\"token string\">'SCORE:'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">!=</span> self<span class=\"token punctuation\">.</span>highscore<span class=\"token punctuation\">:</span>\n            cast<span class=\"token punctuation\">(</span><span class=\"token string\">\"HIGHSCORE:\"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>highscore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">:</span>\n            draw_hor_separator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            draw_row<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span>\n        draw_hor_separator<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_win<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cast<span class=\"token punctuation\">(</span>win_sting<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>is_gameover<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                cast<span class=\"token punctuation\">(</span>gameover_sting<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cast<span class=\"token punctuation\">(</span>help_string1<span class=\"token punctuation\">)</span>\n        cast<span class=\"token punctuation\">(</span>help_string2<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_element <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token keyword\">if</span> randrange<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">89</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span>\n        <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> new_element\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">move_is_possible</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">row_is_left_movable</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">def</span> <span class=\"token function\">change</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> row<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n                <span class=\"token keyword\">if</span> row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> row<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> row<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>change<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        check <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n        check<span class=\"token punctuation\">[</span><span class=\"token string\">'Left'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> field<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">(</span>row_is_left_movable<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> row <span class=\"token keyword\">in</span> field<span class=\"token punctuation\">)</span>\n        check<span class=\"token punctuation\">[</span><span class=\"token string\">'Right'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> field<span class=\"token punctuation\">:</span> check<span class=\"token punctuation\">[</span><span class=\"token string\">'Left'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>invert<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        check<span class=\"token punctuation\">[</span><span class=\"token string\">'Up'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> field<span class=\"token punctuation\">:</span> check<span class=\"token punctuation\">[</span><span class=\"token string\">'Left'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>transpose<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        check<span class=\"token punctuation\">[</span><span class=\"token string\">'Down'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> field<span class=\"token punctuation\">:</span> check<span class=\"token punctuation\">[</span><span class=\"token string\">'Right'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>transpose<span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> direction <span class=\"token keyword\">in</span> check<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> check<span class=\"token punctuation\">[</span>direction<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>field<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>stdscr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        game_field<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Game'</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">not_game</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        game_field<span class=\"token punctuation\">.</span>draw<span class=\"token punctuation\">(</span>stdscr<span class=\"token punctuation\">)</span>\n        action <span class=\"token operator\">=</span> get_user_action<span class=\"token punctuation\">(</span>stdscr<span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> defaultdict<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">)</span>\n        response<span class=\"token punctuation\">[</span><span class=\"token string\">'Restart'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">[</span><span class=\"token string\">'Exit'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Init'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Exit'</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">game</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        game_field<span class=\"token punctuation\">.</span>draw<span class=\"token punctuation\">(</span>stdscr<span class=\"token punctuation\">)</span>\n        action <span class=\"token operator\">=</span> get_user_action<span class=\"token punctuation\">(</span>stdscr<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> action <span class=\"token operator\">==</span> <span class=\"token string\">'Restart'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'Init'</span>\n        <span class=\"token keyword\">if</span> action <span class=\"token operator\">==</span> <span class=\"token string\">'Exit'</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">'Exit'</span>\n        <span class=\"token keyword\">if</span> game_field<span class=\"token punctuation\">.</span>move<span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> game_field<span class=\"token punctuation\">.</span>is_win<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'Win'</span>\n            <span class=\"token keyword\">if</span> game_field<span class=\"token punctuation\">.</span>is_gameover<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token string\">'Gameover'</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'Game'</span>\n\n    state_action <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">'Init'</span><span class=\"token punctuation\">:</span> init<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Win'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> not_game<span class=\"token punctuation\">(</span><span class=\"token string\">'Win'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Gameover'</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">lambda</span><span class=\"token punctuation\">:</span> not_game<span class=\"token punctuation\">(</span><span class=\"token string\">'Gameover'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'Game'</span><span class=\"token punctuation\">:</span> game\n    <span class=\"token punctuation\">&#125;</span>\n\n    curses<span class=\"token punctuation\">.</span>use_default_colors<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    game_field <span class=\"token operator\">=</span> GameField<span class=\"token punctuation\">(</span>win<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n    state <span class=\"token operator\">=</span> <span class=\"token string\">'Init'</span>\n    <span class=\"token keyword\">while</span> state <span class=\"token operator\">!=</span> <span class=\"token string\">'Exit'</span><span class=\"token punctuation\">:</span>\n        state <span class=\"token operator\">=</span> state_action<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ncurses<span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里写的都是普通写法的for结合append来添加list element。其实可以还用list解析的写法会更加快速。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">ls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"参考材料\"><a href=\"#参考材料\" class=\"headerlink\" title=\"参考材料\"></a>参考材料</h2><p>[1]. 蓝桥课程：<a href=\"https://www.lanqiao.cn/courses/368\">https://www.lanqiao.cn/courses/368</a></p>\n","text":"项目名称-2048小游戏用户行为所有的有效输入都可以转换为上下左右，游戏重置，退出这六种行为，有效输入键是WASDRQwasdrq，并且要把行为和输入关联起来。 actions = ['Up', 'Left', 'Down', 'Right', 'Restart', 'Exit'...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"Python","slug":"Python","count":2,"path":"api/categories/Python.json"},{"name":"学习笔记","slug":"Python/学习笔记","count":1,"path":"api/categories/Python/学习笔记.json"}],"tags":[{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"},{"name":"2048","slug":"2048","count":1,"path":"api/tags/2048.json"},{"name":"学习笔记","slug":"学习笔记","count":3,"path":"api/tags/学习笔记.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0-2048%E5%B0%8F%E6%B8%B8%E6%88%8F\"><span class=\"toc-text\">项目名称-2048小游戏</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%88%B7%E8%A1%8C%E4%B8%BA\"><span class=\"toc-text\">用户行为</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E6%9C%BA\"><span class=\"toc-text\">状态机</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%B8%E6%88%8F%E5%88%9D%E5%A7%8B%E5%8C%96%E5%87%BD%E6%95%B0init\"><span class=\"toc-text\">游戏初始化函数init()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%B8%E6%88%8F%E7%BB%93%E6%9D%9F%E5%87%BD%E6%95%B0not-game\"><span class=\"toc-text\">游戏结束函数not_game()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B8%B8%E6%88%8F%E8%BF%9B%E8%A1%8C%E5%87%BD%E6%95%B0game\"><span class=\"toc-text\">游戏进行函数game()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#User%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86\"><span class=\"toc-text\">User输入处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A3%8B%E7%9B%98%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">棋盘创建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A3%8B%E7%9B%98%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">棋盘操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%87%8D%E7%BD%AE%E6%A3%8B%E7%9B%98\"><span class=\"toc-text\">重置棋盘</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E8%BE%93%E8%B5%A2\"><span class=\"toc-text\">判断输赢</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E6%BA%90%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">项目源代码：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%9D%90%E6%96%99\"><span class=\"toc-text\">参考材料</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"羊城杯CTF(部分，包含复现)","uid":"993573f867cfcdcc59590e5a4fe361bb","slug":"羊城杯CTF-部分","date":"2020-09-11T01:19:52.000Z","updated":"2020-09-30T04:21:50.000Z","comments":true,"path":"api/articles/羊城杯CTF-部分.json","keywords":"A1andNS","cover":[],"text":"昨天有些事，就摸了三题，两题web一题杂项。其他全都靠同队大佬了。 0x01 easyphp这题很直接给出来源代码： 其中有一个file_put_contents()函数，可以写入内容要指定文件里。 payload: ?content&#x3D;&lt;?php eval($_P...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"CTF","slug":"CTF","count":42,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":14,"path":"api/tags/CTF.json"},{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"Misc","slug":"Misc","count":3,"path":"api/tags/Misc.json"},{"name":"羊城杯","slug":"羊城杯","count":1,"path":"api/tags/羊城杯.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"二分查找","uid":"d843ced03f40ac612213952de4b63ad2","slug":"二分查找","date":"2020-09-09T09:47:15.000Z","updated":"2020-09-29T10:32:22.000Z","comments":true,"path":"api/articles/二分查找.json","keywords":"A1andNS","cover":null,"text":"之前学习了一下二分查找，然后根据算法的描述和效果。写了一下实现代码，一个使用C++写的，一个使用Python3写的。 C++实现如下： #include &lt;iostream&gt; using namespace std; void banary_search(int da...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":30,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"},{"name":"学习笔记","slug":"学习笔记","count":3,"path":"api/tags/学习笔记.json"},{"name":"数据结构","slug":"数据结构","count":3,"path":"api/tags/数据结构.json"},{"name":"C++","slug":"C","count":2,"path":"api/tags/C.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}