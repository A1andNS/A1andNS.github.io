{"title":"核心防御机制之处理用户访问、处理用户输入","uid":"b9ca1258184e8ee98832b57de6133069","slug":"核心防御机制之处理用户访问、处理用户输入","date":"2020-03-09T07:41:41.000Z","updated":"2020-04-13T00:47:30.000Z","comments":true,"path":"api/articles/核心防御机制之处理用户访问、处理用户输入.json","keywords":"A1andNS","cover":[],"content":"<p>web应用的基本安全问题就是所有用户输入都不可信，这一点要有清晰的认识，必须假设用户所有输入都不可信，并且进行相应的过滤，才能较大可能排除哪些不坏好意的输入。Web应用采用的防御机制基本是由一下几个核心因素构成的：</p>\n<p>1、处理用户访问应用程序的数据与功能，防止用户获得未授权的访问。</p>\n<p>2、处理用户对应用程序的输入，防止错误输入造成的不当行为。</p>\n<p>3、处理攻击者，确保应用程序在称为直接攻击目标是能够正常运转，并采取适当的防御与攻击措施挫败攻击者。</p>\n<p>4、管理应用程序本身，帮助管理员监控它的行为，配置其功能。</p>\n<p>一个典型的应用程序的绝大多数受攻击面也是由这些机制构成的。</p>\n<p>注：受攻击面是指对未通过验证的用户的有效功能，也就是说，未通过验证的用户通过软件的默认配置能够达到什么目的。</p>\n<h2 id=\"处理用户访问\"><a href=\"#处理用户访问\" class=\"headerlink\" title=\"处理用户访问\"></a>处理用户访问</h2><p>几乎任何的Web应用程序都必须满足一个中心安全要求，那就是处理用户访问其数据和功能。一般用户可以分为几种类型，如匿名用户（游客）、正常通过验证的用户和管理用户。大家平时喜欢上网应该都会有所了解。一般不同的用户也是只允许不同的数据，游客可能就无法实现一些功能，验证用户也只能访问服务器里属于自己的信息，管理员用户就不用说了。</p>\n<p>大多数Web Application实用3层相互关联的安全机制来对用户访问进行处理：</p>\n<p>1、身份验证</p>\n<p>2、会话管理</p>\n<p>3、访问控制</p>\n<p>这三者都是应用程序受攻击面的一个关键部分，对于应用程序的的安全很重要，这三者相互依赖，任何一个部分存在缺陷被突破，攻击者就可以达到访问应用程序功能和数据的目的。</p>\n<h3 id=\"身份验证\"><a href=\"#身份验证\" class=\"headerlink\" title=\"身份验证\"></a>身份验证</h3><p>这个机制试应用程序里处理用户访问的最基本的机制，说简单点就是，确认访问者的真实身份。不使用这个机制将会带来的问题就是，不利于用户管理和数据安全，所有用户都被作为匿名用户对待，将会出现一些问题。</p>\n<p>目前，绝大多数的Web application都会实用传统的身份验证模型，也就是要求用户提交用户名和密码，然后应用程序去核实情况，来确认合法与否。当然一些对安全性要求较高的应用程序还会实用其他手段来验证，例如其他证书和多阶段登录过程强化，甚至实用客户端证书、智能卡等。这个银行的application就很明显了，大家使用网上银行的时候可能都会被要求安装数字证书等。除了进行身份验证，身份验证机制一般还会提供一些支持型功能，比如大家熟悉的账号注册，密码找回和密码修改。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191219224059945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MTM5MDQ1,size_16,color_FFFFFF,t_70\" alt=\"1\"></p>\n<p>但是身份验证机制的设计和执行方面，还是会存在缺陷。攻击者可能可以确定其他用户用户名、并且通过一定手段推测它们密码，又或者利用验证系统在设计时的缺陷，绕过登陆验证。攻击者甚至会攻击应用程序采用的与身份验证有关的功能，借此来非法访问数据。</p>\n<h3 id=\"会话管理\"><a href=\"#会话管理\" class=\"headerlink\" title=\"会话管理\"></a>会话管理</h3><p>身份验证结束后，用户也就登录成功了，那么就可以使用一些功能和访问一些页面，那么浏览器就会发出一系列的HTTP请求。同时其他用户可能也在发出无数请求。为了可以有效的访问控制，就必须要识别来自每一位用户的请求。所以应用程序就为每一个用户建立一个会话，并且向用户发布一个标识会话的令牌。令牌是一个唯一的字符串，唯一标识一个用户。通过令牌，浏览器的HTTP请求就可以被应用程序识别，并把请求与用户关联起来。虽然很多的应用使用隐藏表单字段或URL查询字符串传送session token，当HTTP cookie才是实现这一目的的常规方法。这就是为什么攻击者会使用XSS攻击偷取cookie然后伪造用户访问或进行CSRF攻击。如果用户一段时间没有发出请求，会话就会自动终结。</p>\n<p>所以会话管理的关键就在于Token的安全，大多数攻击者都会想要获取用户令牌。如果可以偷取到令牌，攻击者就可以伪装用户使用应用程序。令牌生成过程中存在的缺陷是主要的漏洞来源，攻击者能够推测发给用户的令牌，然后去截获令牌。也有少数应用不使用令牌，而是使用其他方法来确认用户身份。有时应用程序会将状态信息存储在客户端而非服务器，并且对这些信息进行加密。</p>\n<h3 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h3><p>访问控制是前两者正常工作后一个重要的机制，它需要进行正确决策，决定允许还是拒绝认证用户的请求。这是一个很关键的过程，需要是实现进行设计的逻辑，考虑应用领域和不同类型功能，需要根据请求访问者的身份，来判断其是否有相关权限。甚至对一些特殊操作及进行较为严格的访问控制和检查。但是访问控制比较复杂，所以在一些权限的配置上可能存在疏忽，从而导致漏洞，或者开发者在开发时对一些功能存在错误判断，使攻击者可以未经授权访问应用程序的数据和功能。但是寻找访问控制上的漏洞也是一件费力的工作，必须要一个一个重复进行检查。当一旦成功，也会造成一定的损失。</p>\n<h2 id=\"处理用户输入\"><a href=\"#处理用户输入\" class=\"headerlink\" title=\"处理用户输入\"></a>处理用户输入</h2><p>所有用户输入都不可信。所有必须要采取一定的措施来过滤和避免有人输入恶意内容。因此必须要安全处理用户输入，这是应用程序安全的一个关键。通常输入确认是防御这些攻击的必要手段，但是任何一种保护机制都不是绝对安全的。</p>\n<h3 id=\"输入的多样性\"><a href=\"#输入的多样性\" class=\"headerlink\" title=\"输入的多样性\"></a>输入的多样性</h3><p>在许多情况下，应用程序可能会对一些特殊输入实行非常严格的确认检查。所以你会看到在注册一个账号的时，网站会对用户名和密码的字符有要求，如长度，所能包含的字符。</p>\n<p>在其他情况下，可能要接受更加广泛的输入。比如说填写地址就会涉及到很多的字符。但是依旧要对字段进行有效限制。比如不能超过最大长度，不能包含一些HTML等语言的标记。</p>\n<p>还有一些场景，应用必须完全接受用户提交的完全任意的输入，例如想CSDN博客一样，我在这里写博客，博客里可能会含有一些有害的字段（演示用），但是CSDN有不能拒绝我这样写作。所以就要想办法来解决这个问题，并且要以安全的方式来向用户显示。</p>\n<h3 id=\"输入处理方式\"><a href=\"#输入处理方式\" class=\"headerlink\" title=\"输入处理方式\"></a>输入处理方式</h3><p>通常可以采用各种方法来处理用户输入，不同方法一般使用与不同的情形与不同类型的输入，有时最好结合采用几种方法。</p>\n<h4 id=\"1、拒绝已知的不良输入\"><a href=\"#1、拒绝已知的不良输入\" class=\"headerlink\" title=\"1、拒绝已知的不良输入\"></a>1、拒绝已知的不良输入</h4><p>这个一般使用黑名单来进行字符串或模式的匹配，并且阻止任何与黑名单匹配的数据，并接受其他数据。不过这个有点不太好，效率不高，目前攻击的字符语句越来越多，各式各样。加上不同的编码方式赋予了攻击语句不同的形似，而且很可能会忽略某些攻击语句和模式，很明显黑名单无法满足满足需求。</p>\n<h4 id=\"2、接受已知的正常输入\"><a href=\"#2、接受已知的正常输入\" class=\"headerlink\" title=\"2、接受已知的正常输入\"></a>2、接受已知的正常输入</h4><p>这个和上面的刚好相反，这个就是个白名单，在某种意义上它似乎对于处理恶意输入很有效，因为只有白名单可以接受，其他统统不要，而制定白名单的是否肯定很谨慎，所以基本上恶意输入可以被过滤掉，但是它同时会给用户的输入带来不太好的体验，可能无法满足用户的输入需求，比较死板。所以虽然它极其有效，但是基于白名单的方法并非是解决处理用户输入问题的万能办法。</p>\n<h4 id=\"3、净化\"><a href=\"#3、净化\" class=\"headerlink\" title=\"3、净化\"></a>3、净化</h4><p>这种方法允许有时需要接受无法保证安全的数据，application不拒绝这种输入，而是，以各种方法来净化，防止它造成任何不利的影响。数据中可能存在的恶意字符会被删除，只留下安全字符。或者在进一步处理前对它进行编码或转义。基于数据净化的方法一般非常有效。比如可以在危险字符植入应用页面前对其进行HTML编码，这是防XSS攻击的常用方法，目前有很多网页都是把危险脚本进行HTML编码，使其无法达到目的。但是如果是一个输入包含多种而已数据，这个净化就不太OK了，这时最好就要使用边界确认来解决了。</p>\n<h4 id=\"4、安全数据处理\"><a href=\"#4、安全数据处理\" class=\"headerlink\" title=\"4、安全数据处理\"></a>4、安全数据处理</h4><p>以不安全的方式处理用户提交的数据，是许多Web应用程序漏洞形成的根本原因。通常，不需要确认输入本身，只需确保处理过程绝对安全，就可以避免这些漏洞。有时候可以使用安全的编程方法避免常见问题。例如在数据库访问过程中正确使用参数化查询，就可以避免SQL注入攻击。</p>\n<h4 id=\"5、语法检查\"><a href=\"#5、语法检查\" class=\"headerlink\" title=\"5、语法检查\"></a>5、语法检查</h4><p>，就可以避免这些漏洞。有时候可以使用安全的编程方法避免常见问题。例如在数据库访问过程中正确使用参数化查询，就可以避免SQL注入攻击。</p>\n<h4 id=\"5、语法检查-1\"><a href=\"#5、语法检查-1\" class=\"headerlink\" title=\"5、语法检查\"></a>5、语法检查</h4><p>当攻击者提交的输入于普通的非恶意用户提交的输入完全相同，再多的语法确认也无法区别用户和攻击者的数据。为了防止未授权的访问，应用程序必须确认所提交的账号属于之前提交该账户的用户。</p>\n","text":"web应用的基本安全问题就是所有用户输入都不可信，这一点要有清晰的认识，必须假设用户所有输入都不可信，并且进行相应的过滤，才能较大可能排除哪些不坏好意的输入。Web应用采用的防御机制基本是由一下几个核心因素构成的： 1、处理用户访问应用程序的数据与功能，防止用户获得未授权的访问。...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":35,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">处理用户访问</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">身份验证</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%9A%E8%AF%9D%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">会话管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">访问控制</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">处理用户输入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E7%9A%84%E5%A4%9A%E6%A0%B7%E6%80%A7\"><span class=\"toc-text\">输入的多样性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">输入处理方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%8B%92%E7%BB%9D%E5%B7%B2%E7%9F%A5%E7%9A%84%E4%B8%8D%E8%89%AF%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">1、拒绝已知的不良输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%8E%A5%E5%8F%97%E5%B7%B2%E7%9F%A5%E7%9A%84%E6%AD%A3%E5%B8%B8%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">2、接受已知的正常输入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%87%80%E5%8C%96\"><span class=\"toc-text\">3、净化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81%E5%AE%89%E5%85%A8%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86\"><span class=\"toc-text\">4、安全数据处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5\"><span class=\"toc-text\">5、语法检查</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5%E3%80%81%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5-1\"><span class=\"toc-text\">5、语法检查</span></a></li></ol></li></ol></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"9个同心圆（Python turtle）","uid":"526fc2b02f39d7fc607c24567a204ab6","slug":"9个同心圆（Python-turtle）","date":"2020-03-09T07:43:47.000Z","updated":"2020-04-13T00:45:32.000Z","comments":true,"path":"api/articles/9个同心圆（Python-turtle）.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200323233608.png","text":"这个程序用来绘制9个同心圆，程序很简单。运用到的库：turtlepython version：3.7说到turtle是一个很实用的库，实用python来画图，这个库就是一个好帮手了。 import turtle turtle.setup(400,400,300,300) turt...","link":"","photos":[],"count_time":{"symbolsCount":429,"symbolsTime":"1 mins."},"categories":[{"name":"Python学习","slug":"Python学习","count":19,"path":"api/categories/Python学习.json"}],"tags":[{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Python之汉诺塔问题及python安全","uid":"627388fd642a6b198cb0eb0502f3acb1","slug":"Python之汉诺塔问题及python安全","date":"2020-03-09T07:40:14.000Z","updated":"2021-04-21T15:59:49.000Z","comments":true,"path":"api/articles/Python之汉诺塔问题及python安全.json","keywords":"A1andNS","cover":"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200323233608.png","text":"今天学习了一下汉诺塔问题，像了许久啊！！脑袋不太OK！记得上次看到汉诺塔是我在看电影的时候，电影场景里给大猩猩测试智商的。。。。 这里使用的是Python3编写的代码，毕竟大家都知道2020年的1月1日Python2已经正式退休了。下面是Python3的时代了。 发现规律后就会意...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"Python学习","slug":"Python学习","count":19,"path":"api/categories/Python学习.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"Python","slug":"Python","count":23,"path":"api/tags/Python.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}