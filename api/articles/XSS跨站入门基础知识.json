{"title":"XSS跨站入门基础知识","uid":"26ba6c78face14f329da4d0dd48531b1","slug":"XSS跨站入门基础知识","date":"2020-03-09T07:49:59.000Z","updated":"2020-04-13T00:46:22.000Z","comments":true,"path":"api/articles/XSS跨站入门基础知识.json","keywords":"A1andNS","cover":[],"content":"<p>之前写的SQL主要时针对服务器端，通过构造SQL命令提交，以达到脱库或其他目的。今天要说的这个XSS也是一个非常著名的Web漏洞。XSS（Cross Site Scripting）的全称是跨站脚本攻击，之所以叫XSS，是想与Web中的另一个层叠样式表CSS区分。该攻击主要是在网页中嵌入JavaScript脚本代码，当用户访问此网页时，脚本就会在浏览器中被执行，从而达到攻击目的。</p>\n<p>在XSS中，一般有3个角色，分别是：攻击者、目标服务器、受害者的浏览器。</p>\n<p>由于有些服务器没有对用户输入进行有效的安全验证，从而导致攻击者可以通过正常的书写方式并带有部分的HTML恶意脚本代码的方法进行攻击，当受害者的浏览器访问目标服务器的时候，由于对目标服务器的信任，这段恶意代码的执行不会受到什么影响，从而构成了XSS攻击。</p>\n<p>例如我们使用一个简单的脚本：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;script&gt;alert(document.cookie);&lt;&#x2F;script&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个语句的意识就是以警告框的形式将用户访问网站的Cookie输出。如果攻击者向一个网站输入数据时，在正常数据后面带上这一段代码，那么那个网站的源码将变成如下情况。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n…\n\ttest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n…\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个时候如果受害者访问这个网页时就会弹出它的Cookie信息，类似下面这样子（下图是用console控制台做出来的效果，并未进行真实攻击）</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20191216175802551.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2MTM5MDQ1,size_16,color_FFFFFF,t_70\" alt=\"1\"></p>\n<p>这里只是XSS的一个简单的小演示，只要愿意，黑客就可以向里面插入任意的代码，甚至写一个js文件代码，以引用的形式插入进入网页。下面详细说说XSS攻击类型。</p>\n<h2 id=\"1、反射型XSS\"><a href=\"#1、反射型XSS\" class=\"headerlink\" title=\"1、反射型XSS\"></a>1、反射型XSS</h2><p>反射型XSS又叫做非持久型XSS。之所以称为反射型XSS，是因为这种攻击方式的注入代码是从目标服务器通过错误信息、搜索结果等方式“反射”回来的。而称为非持久型XSS，则是因为这种攻击方式是一次性的。攻击者通过电子邮件等方式将包含注入脚本的恶意链接发给受害者，当受害者单击该链接时，注入脚本就会被传输到目标服务器上，然后目标服务器将注入脚本“反射”到受害人的浏览器上，从而在该浏览器上执行了这段脚本。</p>\n<p>例如，攻击者将如下链接发送给受害者: <code>http://www.example.com/search.asp?input=&lt;script&gt;alert(document. cookie);&lt;/script&gt;</code><br>当受害者单击这个链接的时候，注入的脚本被当作搜索的关键词发送到目标服务器的search.asp页面中，则在搜索结果的返回页面中，这段脚本将被当作搜索的关键词而嵌入。这样，当用户得到搜索结果页面后，这段脚本也得到了执行。这就是反射型XSS攻击的原理，可以看到，攻击者巧妙地通过反射型XSS的攻击方式，达到了在受害者的浏览器上执行脚本的目的。由于代码注入的是一个动态产生的页面而不是永久的页面，因此这种攻击方式只在单击链接的时候才产生作用，这也是它被称为非持久型XSS的原因。</p>\n<h2 id=\"2、存储型XSS\"><a href=\"#2、存储型XSS\" class=\"headerlink\" title=\"2、存储型XSS\"></a>2、存储型XSS</h2><p>存储型XSS又叫做持久型XSS，看名字其实很容易联想到，既然是存储的自然就持久的，之前的反射一下自然就是非持久型。存储也是他和反射型最大的区别，攻击脚本将被永远存放在目标服务器的数据库和文件中。这种攻击比较常见于论坛，攻击者在发帖的时候，将恶意脚本连同正常的信息一起注入到帖子的内容中。随着帖子被论坛服务器存储下来，恶意脚本也永远地存放在论坛服务器的后端存储器里了。当其他用户浏览这个被注入了恶意脚本的帖子的时候，恶意脚本就会在它们的浏览器中得到运行，从而收到攻击。</p>\n<p>可以看到的，存储型XSS的攻击方式可以把恶意带啊吗永久地嵌入一个网页之中，所有访问这个页面的人都会称为受害者。如果我们对待不明链接足够谨慎，那么反射型XSS攻击将没有多大作用，因为我们根本就不会去点击它。而存储型则不一样了，由于它注入的往往是一些受信任的页面，因此无论多么小心，都难免会受到攻击。因此，存储型XSS更加具有隐蔽性，带来的危害是更大的，除非服务器可以智能地阻止注入，否则任何人都有可能被攻击。</p>\n<h2 id=\"3、DOM-XSS\"><a href=\"#3、DOM-XSS\" class=\"headerlink\" title=\"3、DOM XSS\"></a>3、DOM XSS</h2><p>DOM XSS全称就是DOM Based XSS，即基于DOM的XSS，其中的DOM（Document Object Model）是文档对象模型。这种攻击不是以是否存储在服务器中来进行划分。理论上它属于反射型XSS攻击，但之所以把它独立归类，当然是它又特色。这种攻击不依赖于起初发送到服务器的恶意数据。这似乎于前面的XSS有出入，但有一个例子可以用来解释这种攻击。</p>\n<p>当Javascript 在浏览器执行时，浏览器提供给Javascript代码几个DOM对象。文档对象首先在这些对象之中，并且它代表着大多数浏览器呈现的页面的属性。这个文档对象包含很多子对象，如location、 URL和referrer. 这些对象根据浏览器的显示填充浏览器。因此，document.URL和document.location是由页面的URL按照浏览器的解析填充的。要注意的是，这些对象不是提取自HTML的body,它们不会出现在数据页面。文档对象包含一个 body对象，<br>它代表对于HTML的解析。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>HTML</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TITLE</span><span class=\"token punctuation\">></span></span>Welcome!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TITLE</span><span class=\"token punctuation\">></span></span>\nHi\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SCRIPT</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">var</span> pos<span class=\"token operator\">=</span>docunment<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexof</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SCRIPT</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BR</span><span class=\"token punctuation\">></span></span>\nWelcome to our system\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>HTML</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以上是HTML里面解析URL和执行一些客户端逻辑的代码。然后，在发送请求的后面加上如下的指令：<code>http://www.example.com/welcome.html?name=abc&lt;script&gt;alert(document.coocoo);&lt;/script&gt;</code></p>\n<p>但受害者访问到该网页时，浏览器会解析这个HTML为DOM，DOM包含一个对象叫document，document里面有一个URL属性，这个属性里填充着当前页面的URL。但解析器到达JavaScript代码，他会执行它并修改HTML页面。倘若代码中应用了document.URL，那么这部分的字符串就会在解析时嵌入到HTML中，然后就立即解析，同时，JavaScript代码会找到（alert(document.cookie))并且在同 一个页面执行它，这就产生了XSS攻击条件。</p>\n<h2 id=\"4、检测\"><a href=\"#4、检测\" class=\"headerlink\" title=\"4、检测\"></a>4、检测</h2><p>在前面的部分介绍了XSS的原理及其类型。由此可以看出，XSS攻击是与SQL注入类似的代码注入类漏洞。并且在JavaScript灵活运用的今天，对于XSS的检测与预防必不可少。</p>\n<p>下面简单介绍一下XSS的预防措施，也是我从别的地方看到的。<br>(1)输入检测<br>对用户输入的数据进行检测。对于这些代码注入类的漏洞原则上是不相信用户输入的数据的。所以，我们要对用户输入的数据进行一定程度的过滤， 将输入数据中的特殊字符与关键词都过滤掉，并且对输入的长度进行一定的限制。 只要开发的人员严格检查每个输入点，对每个输入点的数据进行检测和XSS过滤，是可以阻止XSS攻击的。现在很多网站都已经对用户输入进行了一定的过滤来保证安全性，但是新手开发的就不一定了。<br>(2)输出编码<br>通过前面XSS的原理分析，我们知道造成XSS的还有一个原因是应用程序直接将用户输入的数据嵌入HTML页面中。如果我们对用户输入的数据进行编码，之后在嵌入页面中，那么HTML页面会将输入的数据当作是普通的数据进行处理。这样就可以一定程度避免执行恶意脚本。<br>(3) Cookie 安全<br>利用XSS攻击可以轻易获取到用户的Cookie信息，XSS偷Cookie然后再用用户Cookie来做坏事。那么需要对用户的Cookie进行一定的处理。首先应尽可能减少Cookie中敏感信息的存储，并且尽量对Cookie使用多次散列算法存放。之前再说密码学的时候也有提到散列算法，并且有不可逆性，不存在碰撞和存在雪崩效应。可以更加安全的保护用户信息，几乎无法被破译。有的计算机系统的登录认证也是使用散列来存储用户密码。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>[1]陈铁明.网络空间安全实战基础:第一版.北京:人民邮电出版社,2018</p>\n","text":"之前写的SQL主要时针对服务器端，通过构造SQL命令提交，以达到脱库或其他目的。今天要说的这个XSS也是一个非常著名的Web漏洞。XSS（Cross Site Scripting）的全称是跨站脚本攻击，之所以叫XSS，是想与Web中的另一个层叠样式表CSS区分。该攻击主要是在网页...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":32,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"XSS","slug":"XSS","count":4,"path":"api/tags/XSS.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%8F%8D%E5%B0%84%E5%9E%8BXSS\"><span class=\"toc-text\">1、反射型XSS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%AD%98%E5%82%A8%E5%9E%8BXSS\"><span class=\"toc-text\">2、存储型XSS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81DOM-XSS\"><span class=\"toc-text\">3、DOM XSS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4%E3%80%81%E6%A3%80%E6%B5%8B\"><span class=\"toc-text\">4、检测</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\"><span class=\"toc-text\">参考文献</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"SQL注入简单入门","uid":"301fa19ea5e03cee262a69d587c44e7a","slug":"SQL注入简单入门","date":"2020-03-09T07:51:08.000Z","updated":"2020-04-13T00:46:44.000Z","comments":true,"path":"api/articles/SQL注入简单入门.json","keywords":"A1andNS","cover":[],"text":"写在前面谈到SQL注入，那么自然和数据库有很大的关系。先说数据库，数据库大致可以分为Access数据库、MySQL数据库、SQLServer数据库、Oracle数据库等。Access数据库是比较早期的应用于Web应用的数据库。但是近几年Access数据库的使用再逐渐地减少，这是因...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":32,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"SQL注入","slug":"SQL注入","count":3,"path":"api/tags/SQL注入.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CSRF基础学习","uid":"e5e3a6aac05f155097d5d514020d33d1","slug":"CSRF基础学习","date":"2020-03-09T07:48:04.000Z","updated":"2020-04-13T00:46:24.000Z","comments":true,"path":"api/articles/CSRF基础学习.json","keywords":"A1andNS","cover":[],"text":"上一篇博客说的是XSS跨站脚本攻击，现在说的是另一种跨站攻击，CSRF（Cross-Site Request Forgery),跨站请求伪造。 1、概述正如其名，CSRF是伪造请求，就是冒充用户在站内进行正常操作。我们知道，绝大多数网站是通过Cookie等方式辨别用户身份（包括使...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":32,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}