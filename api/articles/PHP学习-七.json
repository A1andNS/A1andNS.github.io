{"title":"PHP学习(七)","uid":"b2b1874642f5ccef369c939a5b309ee0","slug":"PHP学习-七","date":"2020-09-03T02:54:29.000Z","updated":"2020-09-03T15:33:42.000Z","comments":true,"path":"api/articles/PHP学习-七.json","keywords":"A1andNS","cover":null,"content":"<h2 id=\"PHP命名空间\"><a href=\"#PHP命名空间\" class=\"headerlink\" title=\"PHP命名空间\"></a>PHP命名空间</h2><p>PHP 命名空间可以解决以下两类问题：</p>\n<ol>\n<li>用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。</li>\n<li>为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。</li>\n</ol>\n<h3 id=\"定义命名空间\"><a href=\"#定义命名空间\" class=\"headerlink\" title=\"定义命名空间\"></a>定义命名空间</h3><p>命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间。语法格式如下；</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>  \n<span class=\"token comment\">// 定义代码在 'MyProject' 命名空间中  </span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">MyProject</span><span class=\"token punctuation\">;</span>  \n \n<span class=\"token comment\">// ... 代码 ...  </span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>也可以定义不同的命名空间代码：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token package\">MyProject</span><span class=\"token punctuation\">&#123;</span>\n\t\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">CONNETC_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Connection</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/**/</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">namespace</span> <span class=\"token package\">AnotherProject</span><span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">CONNETC_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/**/</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/**/</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>全局命名空间用:</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">namespace</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//全局代码</span>\n    <span class=\"token comment\">//code</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>在声明命名空间之前唯一合法的代码是用于定义源文件编码方式的declare语句，所有非PHP代码包括空白符都不能出现在命名空间的声明之前。</p>\n<h3 id=\"子命名空间\"><a href=\"#子命名空间\" class=\"headerlink\" title=\"子命名空间\"></a>子命名空间</h3><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token package\">MyProject<span class=\"token punctuation\">\\</span>Sub<span class=\"token punctuation\">\\</span>Level</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token constant\">CONNETC_OK</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">class</span> <span class=\"token class-name\">Connection</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/**/</span><span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/**/</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>创建了常量MyProject\\Sub\\Level\\CONNNECT_OK，类MyProject\\Sub\\Level\\Connnection和函数MyProject\\Sub\\Level\\Connect</p>\n<p>用菜鸟教程里的一个实例很容易就理解了：</p>\n<p>file1.php 文件代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>subnamespace</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FOO</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">foo</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">staticmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>file2.php 文件代码</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo<span class=\"token punctuation\">\\</span>Bar</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">include</span> <span class=\"token string single-quoted-string\">'file1.php'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">FOO</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">foo</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">staticmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/* 非限定名称 */</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为函数 Foo\\Bar\\foo</span>\n<span class=\"token class-name static-context\">foo</span><span class=\"token operator\">::</span><span class=\"token function\">staticmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为类 Foo\\Bar\\foo ，方法为 staticmethod</span>\n<span class=\"token keyword\">echo</span> <span class=\"token constant\">FOO</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为常量 Foo\\Bar\\FOO</span>\n\n<span class=\"token comment\">/* 限定名称 */</span>\nsubnamespace\\<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为函数 Foo\\Bar\\subnamespace\\foo</span>\n<span class=\"token class-name class-name-fully-qualified static-context\">subnamespace<span class=\"token punctuation\">\\</span>foo</span><span class=\"token operator\">::</span><span class=\"token function\">staticmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为类 Foo\\Bar\\subnamespace\\foo,</span>\n                                  <span class=\"token comment\">// 以及类的方法 staticmethod</span>\n<span class=\"token keyword\">echo</span> subnamespace\\<span class=\"token constant\">FOO</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为常量 Foo\\Bar\\subnamespace\\FOO</span>\n                                  \n<span class=\"token comment\">/* 完全限定名称 */</span>\n\\Foo\\Bar\\<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为函数 Foo\\Bar\\foo</span>\n<span class=\"token class-name class-name-fully-qualified static-context\"><span class=\"token punctuation\">\\</span>Foo<span class=\"token punctuation\">\\</span>Bar<span class=\"token punctuation\">\\</span>foo</span><span class=\"token operator\">::</span><span class=\"token function\">staticmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为类 Foo\\Bar\\foo, 以及类的方法 staticmethod</span>\n<span class=\"token keyword\">echo</span> \\Foo\\Bar\\<span class=\"token constant\">FOO</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 解析为常量 Foo\\Bar\\FOO</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>可以看出来限定名称有点相对路径的意思，而完全限定名称则是绝对路径。非限定就是就近原则了，在那个namespace中就默认那个。</p>\n<p>在命名空间内部访问全局类、函数和常量：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token package\">Foo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INI_ALL</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> \\<span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用全局函数strlen</span>\n<span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> \\<span class=\"token constant\">INI_ALL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 访问全局常量 INI_ALL</span>\n<span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name class-name-fully-qualified\"><span class=\"token punctuation\">\\</span>Exception</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 实例化全局类 Exception</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"namespace关键字和-NAMESPACE-常量\"><a href=\"#namespace关键字和-NAMESPACE-常量\" class=\"headerlink\" title=\"namespace关键字和__NAMESPACE__常量\"></a>namespace关键字和__NAMESPACE__常量</h3><p>PHP支持两种抽象的访问当前命名空间内部元素的方法，__NAMESPACE__魔术常量和namespace关键字。常量__NAMESPACE__的值是包含当前命名空间名称的字符串。在全局的，不包括在任何命名空间中的代码，它包含一个空的字符串。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">//命名空间中的代码\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token package\">MyProject</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">echo</span> <span class=\"token constant\">__NAMESPACE__</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">//全局代码\n<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token constant\">__NAMESPACE__</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"PHP面向对象\"><a href=\"#PHP面向对象\" class=\"headerlink\" title=\"PHP面向对象\"></a>PHP面向对象</h2><ul>\n<li><strong>类</strong> − 定义了一件事物的抽象特点。类的定义包含了数据的形式以及对数据的操作。</li>\n<li><strong>对象</strong> − 是类的实例。</li>\n<li><strong>成员变量</strong> − 定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可称为对象的属性。</li>\n<li><strong>成员函数</strong> − 定义在类的内部，可用于访问对象的数据。</li>\n<li><strong>继承</strong> − 继承性是子类自动共享父类数据结构和方法的机制，这是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并加入若干新的内容。</li>\n<li><strong>父类</strong> − 一个类被其他类继承，可将该类称为父类，或基类，或超类。</li>\n<li><strong>子类</strong> − 一个类继承其他类称为子类，也可称为派生类。</li>\n<li><strong>多态</strong> − 多态性是指相同的函数或方法可作用于多种类型的对象上并获得不同的结果。不同的对象，收到同一消息可以产生不同的结果，这种现象称为多态性。</li>\n<li><strong>重载</strong> − 简单说，就是函数或者方法有同样的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</li>\n<li><strong>抽象性</strong> − 抽象性是指将具有一致的数据结构（属性）和行为（操作）的对象抽象成类。一个类就是这样一种抽象，它反映了与应用有关的重要性质，而忽略其他一些无关内容。任何类的划分都是主观的，但必须与具体的应用有关。</li>\n<li><strong>封装</strong> − 封装是指将现实世界中存在的某个客体的属性与行为绑定在一起，并放置在一个逻辑单元内。</li>\n<li><strong>构造函数</strong> − 主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</li>\n<li><strong>析构函数</strong> − 析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。析构函数往往用来做”清理善后” 的工作（例如在建立对象时用new开辟了一片内存空间，应在退出前在析构函数中用delete释放）。</li>\n</ul>\n<h3 id=\"PHP-类定义\"><a href=\"#PHP-类定义\" class=\"headerlink\" title=\"PHP 类定义\"></a>PHP 类定义</h3><p>PHP 定义类通常语法格式如下：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">phpClass</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token variable\">$var1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> <span class=\"token variable\">$var2</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"constant string\"</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">myfunc </span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arg1</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arg2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     <span class=\"token punctuation\">[</span><span class=\"token operator\">.</span><span class=\"token operator\">.</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">.</span><span class=\"token operator\">.</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"PHP-构造函数\"><a href=\"#PHP-构造函数\" class=\"headerlink\" title=\"PHP 构造函数\"></a>PHP 构造函数</h3><p>构造函数是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，在创建对象的语句中与 <strong>new</strong> 运算符一起使用。</p>\n<p>PHP 5 允许开发者在一个类中定义一个方法作为构造函数，语法格式如下：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">void __construct ([ mixed $args [, $... ]] )<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在上面的例子中我们就可以通过构造方法来初始化 $url 和 $title 变量：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">function __construct( $par1, $par2 ) &#123;\n   $this-&gt;url &#x3D; $par1;\n   $this-&gt;title &#x3D; $par2;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个和java中的构造函数类似，只不过java中直接使用类名作为函数名，这里有专门的__construct()函数。</p>\n<h3 id=\"PHP析构函数\"><a href=\"#PHP析构函数\" class=\"headerlink\" title=\"PHP析构函数\"></a>PHP析构函数</h3><p>析构函数(destructor) 与构造函数相反，当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函数。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword type-declaration\">void</span> <span class=\"token function\">__destruct </span><span class=\"token punctuation\">(</span> <span class=\"token keyword type-declaration\">void</span> <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDestructableClass</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"构造函数\\n\"</span><span class=\"token punctuation\">;</span>\n       <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"MyDestructableClass\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n\n   <span class=\"token keyword\">function</span> <span class=\"token function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"销毁 \"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyDestructableClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span>\n/*\n构造函数\n销毁 MyDestructableClass<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>PHP 使用关键字 <strong>extends</strong> 来继承一个类，PHP 不支持多继承，格式如下：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">class</span> Child <span class=\"token keyword\">extends</span> <span class=\"token keyword\">Parent</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 代码部分</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><p>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</p>\n<p>实例中重写了 getUrl 与 getTitle 方法：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">url</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">url</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n   \n<span class=\"token keyword\">function</span> <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">title</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">title</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"方法重写-1\"><a href=\"#方法重写-1\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h3><p>如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</p>\n<p>实例中重写了 getUrl 与 getTitle 方法：</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">url</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">url</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n   \n<span class=\"token keyword\">function</span> <span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">title</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">title</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h3><p>使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。</p>\n<p>接口是通过 <strong>interface</strong> 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。</p>\n<p>接口中定义的所有方法都必须是公有，这是接口的特性。</p>\n<p>要实现一个接口，使用 <strong>implements</strong> 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。</p>\n<p>面向对象基本都是类似的。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token comment\">// 声明一个'iTemplate'接口</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">iTemplate</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setVariable</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$template</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token comment\">// 实现接口</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Template</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">iTemplate</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token variable\">$vars</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">setVariable</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">vars</span><span class=\"token punctuation\">[</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$var</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getHtml</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$template</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">vars</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$template</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&#123;'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">'&#125;'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$template</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n \n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$template</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>可以把在类中始终保持不变的值定义为常量。在定义和使用常量的时候不需要使用 $ 符号。</p>\n<p>常量的值必须是一个定值，不能是变量，类属性，数学运算的结果或函数调用。</p>\n<h3 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h3><p>任何一个类，如果它里面至少有一个方法是被声明为抽象的，那么这个类就必须被声明为抽象的。</p>\n<p>定义为抽象的类不能被实例化。</p>\n<p>被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。</p>\n<p>继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractClass</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 我们的抽象方法仅需要定义需要的参数</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">prefixName</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcreteClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractClass</span>\n<span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">// 我们的子类可以定义父类签名中不存在的可选参数</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">prefixName</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$separator</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\".\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"Pacman\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Mr\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">elseif</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span> <span class=\"token operator\">==</span> <span class=\"token string double-quoted-string\">\"Pacwoman\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"Mrs\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token variable\">$prefix</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$prefix</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$separator</span><span class=\"token punctuation\">&#125;</span></span> <span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">&#125;</span></span>\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token variable\">$class</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcreteClass</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$class</span><span class=\"token operator\">-></span><span class=\"token function\">prefixName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Pacman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">echo</span> <span class=\"token variable\">$class</span><span class=\"token operator\">-></span><span class=\"token function\">prefixName</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Pacwoman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"Static-关键字\"><a href=\"#Static-关键字\" class=\"headerlink\" title=\"Static 关键字\"></a>Static 关键字</h3><p>声明类属性或方法为 static(静态)，就可以不实例化类而直接访问。</p>\n<p>静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）。</p>\n<p>由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用。</p>\n<p>静态属性不可以由对象通过 -&gt; 操作符来访问。可以用classname::属性来访问</p>\n<h3 id=\"Final-关键字\"><a href=\"#Final-关键字\" class=\"headerlink\" title=\"Final 关键字\"></a>Final 关键字</h3><p>PHP 5 新增了一个 final 关键字。如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。</p>\n<h2 id=\"调用父类构造方法\"><a href=\"#调用父类构造方法\" class=\"headerlink\" title=\"调用父类构造方法\"></a>调用父类构造方法</h2><p>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 <strong>parent::__construct()</strong> 。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BaseClass</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"BaseClass 类中构造方法\"</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseClass</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword static-context\">parent</span><span class=\"token operator\">::</span><span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 子类构造方法不能自动调用父类的构造方法</span>\n       <span class=\"token keyword\">print</span> <span class=\"token string double-quoted-string\">\"SubClass 类中构造方法\"</span> <span class=\"token operator\">.</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">OtherSubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseClass</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 继承 BaseClass 的构造方法</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 调用 BaseClass 构造方法</span>\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BaseClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 调用 BaseClass、SubClass 构造方法</span>\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 调用 BaseClass 构造方法</span>\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OtherSubClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token delimiter important\">?></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>执行以上程序，输出结果为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">BaseClass 类中构造方法\nBaseClass 类中构造方法\nSubClass 类中构造方法\nBaseClass 类中构造方法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"PHP中的易错点\"><a href=\"#PHP中的易错点\" class=\"headerlink\" title=\"PHP中的易错点\"></a>PHP中的易错点</h2><ul>\n<li>PHP中没有整数除法</li>\n<li>用户定义的函数和语言关键字对大小写不敏感。</li>\n<li>空数组转化为null</li>\n<li>键名将被这样转换：null 转为(空字符串)，true 转为 1，false 转为 0</li>\n<li><strong>\\** 是单引号字符串字面量中的一个特殊情况，它给出了一个单引号字符串字面量中没有插入</strong>\\，\\n**</li>\n<li>headers_list() 函数返回已发送的（或待发送的）响应头部的一个列表，如需确定是否已发送报头，使用 headers_sent() 函数。</li>\n</ul>\n","text":"PHP命名空间PHP 命名空间可以解决以下两类问题： 用户编写的代码与PHP内部的类/函数/常量或第三方类/函数/常量之间的名字冲突。 为很长的标识符名称(通常是为了缓解第一类问题而定义的)创建一个别名（或简短）的名称，提高源代码的可读性。 定义命名空间命名空间通过关键字name...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"PHP","slug":"PHP","count":7,"path":"api/categories/PHP.json"}],"tags":[{"name":"PHP","slug":"PHP","count":8,"path":"api/tags/PHP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">PHP命名空间</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">定义命名空间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%90%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4\"><span class=\"toc-text\">子命名空间</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#namespace%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C-NAMESPACE-%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">namespace关键字和__NAMESPACE__常量</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">PHP面向对象</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E7%B1%BB%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">PHP 类定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">PHP 构造函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#PHP%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">PHP析构函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">实例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99\"><span class=\"toc-text\">方法重写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99-1\"><span class=\"toc-text\">方法重写</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E9%87%8F\"><span class=\"toc-text\">常量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">抽象类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Static-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">Static 关键字</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Final-%E5%85%B3%E9%94%AE%E5%AD%97\"><span class=\"toc-text\">Final 关键字</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">调用父类构造方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PHP%E4%B8%AD%E7%9A%84%E6%98%93%E9%94%99%E7%82%B9\"><span class=\"toc-text\">PHP中的易错点</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CVE-2016-5195(脏牛)内核提权漏洞分析","uid":"6dd91781970153ec4199ae8f8830b41e","slug":"CVE-2016-5195-脏牛-内核提权漏洞分析","date":"2020-09-06T01:01:27.000Z","updated":"2020-09-06T04:10:54.000Z","comments":true,"path":"api/articles/CVE-2016-5195-脏牛-内核提权漏洞分析.json","keywords":"A1andNS","cover":[],"text":"实验目的 了解Linux内核提权漏洞原理 掌握检测修复脏牛漏洞技术 实验内容为什么这个漏洞叫脏牛（Dirty COW）漏洞？Linux内核的内存子系统在处理写时拷贝（Copy-on-Write)时存在条件竞争漏洞，导致可以破坏私有只读内存映射。 一个低权限的本地用户能够利用此漏洞...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"权限提升","slug":"权限提升","count":2,"path":"api/categories/权限提升.json"}],"tags":[{"name":"漏洞复现","slug":"漏洞复现","count":6,"path":"api/tags/漏洞复现.json"},{"name":"权限提升","slug":"权限提升","count":2,"path":"api/tags/权限提升.json"},{"name":"漏洞分析","slug":"漏洞分析","count":3,"path":"api/tags/漏洞分析.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"PHP学习(六)","uid":"f788d8271a603c16b39ea0a6ab3ddb7a","slug":"PHP学习-六","date":"2020-09-02T01:20:54.000Z","updated":"2020-09-02T15:59:18.000Z","comments":true,"path":"api/articles/PHP学习-六.json","keywords":"A1andNS","cover":null,"text":"PHP数组排序PHP - 数组排序函数在本章中，我们将一一介绍下列 PHP 数组排序函数： sort() - 对数组进行升序排列 rsort() - 对数组进行降序排列 asort() - 根据关联数组的值，对数组进行升序排列 ksort() - 根据关联数组的键，对数组进行升序...","link":"","photos":[],"count_time":{"symbolsCount":"5.8k","symbolsTime":"5 mins."},"categories":[{"name":"PHP","slug":"PHP","count":7,"path":"api/categories/PHP.json"}],"tags":[{"name":"PHP","slug":"PHP","count":8,"path":"api/tags/PHP.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}