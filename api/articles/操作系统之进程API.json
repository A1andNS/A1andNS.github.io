{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"操作系统之进程API","date":"2020-09-20T13:44:15.000Z","updated":"2020-09-30T12:04:44.000Z","comments":true,"path":"api/articles/操作系统之进程API.json","keywords":"A1andNS","cover":null,"content":"<p>系统调用函数来控制进程，UNIX系统采用了一对系统调用来创建新进程：fork()、exec()，并且还可以通过另一个系统调用wait()来等待其创建的子进程完成执行。</p>\n<h2 id=\"fork-系统调用\"><a href=\"#fork-系统调用\" class=\"headerlink\" title=\"fork()系统调用\"></a>fork()系统调用</h2><p>system uses fork() system call to creat a new process. </p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> args<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world (pid:%d)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rc <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> rc<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fork failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, I am child (pid:%d)\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, I am parent of %d (pid:%d)\\n\"</span><span class=\"token punctuation\">,</span> rc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Desktop/C++ Program$ ./p1\nHello world <span class=\"token punctuation\">(</span>pid:13940<span class=\"token punctuation\">)</span>\nHello, I am parent of <span class=\"token number\">13941</span> <span class=\"token punctuation\">(</span>pid:13940<span class=\"token punctuation\">)</span>\nHello, I am child <span class=\"token punctuation\">(</span>pid:13941<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>一开始运行的时候创建了一个进程PID为13940的进程。然后程序到了<code>int rc = fork()</code>，吊用了fork()系统调用，这样将会创建一个新的进程，而新创建的进程机会和调用进程完全一样，对于操作系统来说，这时看起来就有两个完全一样的p1程序在运行，而且返回都是通过fork()来实现。fork的进程就是子进程了，原来的进程就是父进程。子进程不会从main()开始执行了，而是直接从fork()处返回。</p>\n<p>子进程和父进程还是有区别的，它拥有自己的地址空间、寄存器、程序计数器等等，但是子进程从fork返回的值是0,而父进程从fork返回的值是创建的子进程的PID。</p>\n<p>但是不一定都会是以上的运行结果，上面的是父进程先运行并且输出了信息，但是在某些情况下也可能由子进程先运行，会有下面的结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Desktop/C++ Program$ ./p1\nHello world <span class=\"token punctuation\">(</span>pid:13940<span class=\"token punctuation\">)</span>\nHello, I am child <span class=\"token punctuation\">(</span>pid:13941<span class=\"token punctuation\">)</span>\nHello, I am parent of <span class=\"token number\">13941</span> <span class=\"token punctuation\">(</span>pid:13940<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这是CPU调度程序决定的，CPU调用程序决定了某个时候哪个进程被执行。</p>\n<h2 id=\"wait-系统调用\"><a href=\"#wait-系统调用\" class=\"headerlink\" title=\"wait()系统调用\"></a>wait()系统调用</h2><p>父进程调用wait()来延迟自己的执行，直到子进程执行完毕，wait()才会返回父进程。</p>\n<h2 id=\"exec-系统调用\"><a href=\"#exec-系统调用\" class=\"headerlink\" title=\"exec()系统调用\"></a>exec()系统调用</h2><p>当想要运行不同程序于子程序中，那就会就用到exec()系统调用了。exec()会从可执行程序中加载代码和静态数据，并且用它来覆写自己的代码段，堆栈以及其他内存空间也会被重新初始化。所以它并没有创建新程序，而是直接将当前运行的程序替换为不同的运行程序。子进程执行exec后，几乎和p3.c程序没有运行过一样，对exec的成功调用不会返回。</p>\n<p>UNIX系统的shell就是一个例子，通过fork()和exec()结合来创建一个子进程并且执行相应代码，然后使用wait()函数来确保子进程的先运行，等到子进程运行完毕就会返回到shell的提示符，等待用户输入下一条命令。</p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h3 id=\"1-编写一个调用fork-程序。在调用fork-之前，让主程序访问一个变量-例如-x-并将其值设置为某个值，观察情况\"><a href=\"#1-编写一个调用fork-程序。在调用fork-之前，让主程序访问一个变量-例如-x-并将其值设置为某个值，观察情况\" class=\"headerlink\" title=\"(1)编写一个调用fork()程序。在调用fork()之前，让主程序访问一个变量(例如 x)并将其值设置为某个值，观察情况\"></a>(1)编写一个调用fork()程序。在调用fork()之前，让主程序访问一个变量(例如 x)并将其值设置为某个值，观察情况</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;sys/wait.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world(pid:%d)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the number is %d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> rc <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"fork failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rc <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, I am child (pid:%d)\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">+=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the number is %d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> wc <span class=\"token operator\">=</span> <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">+=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, I am parent of %d (wc:%d) (pid:%d)\\n\"</span><span class=\"token punctuation\">,</span> rc <span class=\"token punctuation\">,</span> wc<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getpid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"the number is %d\\n\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>运行结果：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">a1andns@a1andns-PC:~/Desktop/C++ Program$ ./unit5h1\nhello world<span class=\"token punctuation\">(</span>pid:32676<span class=\"token punctuation\">)</span>\nthe number is <span class=\"token number\">100</span>\nhello, I am child <span class=\"token punctuation\">(</span>pid:32677<span class=\"token punctuation\">)</span>\nthe number is <span class=\"token number\">110</span>\nhello, I am parent of <span class=\"token number\">32677</span> <span class=\"token punctuation\">(</span>wc:32677<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>pid:32676<span class=\"token punctuation\">)</span>\nthe number is <span class=\"token number\">120</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"系统调用函数来控制进程，UNIX系统采用了一对系统调用来创建新进程：fork()、exec()，并且还可以通过另一个系统调用wait()来等待其创建的子进程完成执行。 fork()系统调用system uses fork() system call to creat a new ...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"},{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#fork-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">fork()系统调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#wait-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">wait()系统调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#exec-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">exec()系统调用</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Homework\"><span class=\"toc-text\">Homework</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%B0%83%E7%94%A8fork-%E7%A8%8B%E5%BA%8F%E3%80%82%E5%9C%A8%E8%B0%83%E7%94%A8fork-%E4%B9%8B%E5%89%8D%EF%BC%8C%E8%AE%A9%E4%B8%BB%E7%A8%8B%E5%BA%8F%E8%AE%BF%E9%97%AE%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F-%E4%BE%8B%E5%A6%82-x-%E5%B9%B6%E5%B0%86%E5%85%B6%E5%80%BC%E8%AE%BE%E7%BD%AE%E4%B8%BA%E6%9F%90%E4%B8%AA%E5%80%BC%EF%BC%8C%E8%A7%82%E5%AF%9F%E6%83%85%E5%86%B5\"><span class=\"toc-text\">(1)编写一个调用fork()程序。在调用fork()之前，让主程序访问一个变量(例如 x)并将其值设置为某个值，观察情况</span></a></li></ol></li></ol>","author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CTFHUB技能树SSRF练习","uid":"c21309bde02094523c3bada7d46c6a98","slug":"CTFHUB技能树SSRF练习","date":"2020-09-21T09:13:38.000Z","updated":"2020-10-02T04:29:26.000Z","comments":true,"path":"api/articles/CTFHUB技能树SSRF练习.json","keywords":"A1andNS","cover":[],"text":"ssrf-内网访问http://challenge-5446eda4d5e3ebf6.sandbox.ctfhub.com:10080/?url=127.0.0.1/flag.php 得到flag：ctfhub{23a8ea61e8bc1f0a6e40a121491b4c78f7...","link":"","photos":[],"count_time":{"symbolsCount":"7.1k","symbolsTime":"6 mins."},"categories":[{"name":"CTF","slug":"CTF","count":43,"path":"api/categories/CTF.json"}],"tags":[{"name":"CTF","slug":"CTF","count":15,"path":"api/tags/CTF.json"},{"name":"WEB","slug":"WEB","count":39,"path":"api/tags/WEB.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Operating System Homework(1)","uid":"53e6dede4a08a86369937a2c59d15b83","slug":"Operating-System-Homework-1","date":"2020-09-19T06:35:04.000Z","updated":"2020-09-19T08:31:12.000Z","comments":true,"path":"api/articles/Operating-System-Homework-1.json","keywords":"A1andNS","cover":null,"text":"This is a homework about cpu-intro, you can get the source from https://github.com/remzi-arpacidusseau/ostep-homework/blob/master/cpu-intro/...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/categories/操作系统.json"}],"tags":[{"name":"操作系统","slug":"操作系统","count":3,"path":"api/tags/操作系统.json"}],"author":{"name":"A1andNS","slug":"blog-author","avatar":"/svg/head.png","link":"/","description":"爱你所爱，行你所行，听从你心，无问西东","socials":{"github":"https://github.com/A1andNS","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}